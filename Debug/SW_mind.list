
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800478c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  20000010  0800479c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  0800479c  00020dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012771  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c35  00000000  00000000  000327b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000353e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000362c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022923  00000000  00000000  00037080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cba  00000000  00000000  000599a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a9c  00000000  00000000  0006b65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  0013d14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004734 	.word	0x08004734

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004734 	.word	0x08004734

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a25      	ldr	r2, [pc, #148]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2120      	movs	r1, #32
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MX_GPIO_Init+0xd4>)
 80005b0:	f000 fc96 	bl	8000ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_GPIO_Init+0xd8>)
 80005cc:	f000 faf4 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d0:	2320      	movs	r3, #32
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_GPIO_Init+0xd4>)
 80005e8:	f000 fae6 	bl	8000bb8 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40020800 	.word	0x40020800

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 f980 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f80c 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ff8a 	bl	8000524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8de 	bl	80007d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000614:	f001 fd5c 	bl	80020d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000618:	f7ff ff7c 	bl	8000514 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800061c:	f001 fd7c 	bl	8002118 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x20>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f876 	bl	8004724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <SystemClock_Config+0xd4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xd4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <SystemClock_Config+0xd8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff78 	bl	80015a8 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006be:	f000 f81f 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fc18 	bl	8000f14 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ea:	f000 f809 	bl	8000700 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x54>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <HAL_MspInit+0x54>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x54>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_MspInit+0x54>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <HAL_MspInit+0x54>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x54>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f000 fa08 	bl	8000b66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f90a 	bl	80009ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000798:	f003 f85c 	bl	8003854 <xTaskGetSchedulerState>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d001      	beq.n	80007a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a2:	f003 fe41 	bl	8004428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f001 f96c 	bl	8001ae4 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f7ff ff75 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000002c 	.word	0x2000002c
 8000820:	40004400 	.word	0x40004400

08000824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0x88>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_UART_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087e:	230c      	movs	r3, #12
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_UART_MspInit+0x8c>)
 800089a:	f000 f98d 	bl	8000bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008de:	f7ff ff65 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f003 feed 	bl	80046c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff fe8b 	bl	8000600 <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f8:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 80008fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000900:	20000dbc 	.word	0x20000dbc

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_Init+0x40>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_Init+0x40>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x40>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f90d 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fee6 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023c00 	.word	0x40023c00

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f917 	bl	8000b9e <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8ed 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000070 	.word	0x20000070

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000070 	.word	0x20000070

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff47 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff5c 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb0 	bl	8000b0c <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e165      	b.n	8000ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8154 	bne.w	8000e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d130      	bne.n	8000c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c40:	2201      	movs	r2, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 0201 	and.w	r2, r3, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d017      	beq.n	8000ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d123      	bne.n	8000cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	691a      	ldr	r2, [r3, #16]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0203 	and.w	r2, r3, #3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80ae 	beq.w	8000e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a5c      	ldr	r2, [pc, #368]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b5a      	ldr	r3, [pc, #360]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5a:	4a58      	ldr	r2, [pc, #352]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x308>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d025      	beq.n	8000dd2 <HAL_GPIO_Init+0x21a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x216>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x212>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x314>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x20e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x318>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x20a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x31c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x202>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae96 	bls.w	8000bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
 8000eec:	4613      	mov	r3, r2
 8000eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef0:	787b      	ldrb	r3, [r7, #1]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000efc:	e003      	b.n	8000f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	041a      	lsls	r2, r3, #16
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	619a      	str	r2, [r3, #24]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0cc      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d90c      	bls.n	8000f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0b8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	494d      	ldr	r1, [pc, #308]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d044      	beq.n	8001034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d119      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e06f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e067      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f023 0203 	bic.w	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4934      	ldr	r1, [pc, #208]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001004:	f7ff fce6 	bl	80009d4 <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	e00a      	b.n	8001022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff fce2 	bl	80009d4 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e04f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 020c 	and.w	r2, r3, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	429a      	cmp	r2, r3
 8001032:	d1eb      	bne.n	800100c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d20c      	bcs.n	800105c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e032      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109a:	f000 f855 	bl	8001148 <HAL_RCC_GetSysClockFreq>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	490a      	ldr	r1, [pc, #40]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	5ccb      	ldrb	r3, [r1, r3]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1c8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fc46 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00
 80010d0:	40023800 	.word	0x40023800
 80010d4:	08004764 	.word	0x08004764
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010fc:	f7ff fff0 	bl	80010e0 <HAL_RCC_GetHCLKFreq>
 8001100:	4602      	mov	r2, r0
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	0a9b      	lsrs	r3, r3, #10
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	4903      	ldr	r1, [pc, #12]	; (800111c <HAL_RCC_GetPCLK1Freq+0x24>)
 800110e:	5ccb      	ldrb	r3, [r1, r3]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	08004774 	.word	0x08004774

08001120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001124:	f7ff ffdc 	bl	80010e0 <HAL_RCC_GetHCLKFreq>
 8001128:	4602      	mov	r2, r0
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0b5b      	lsrs	r3, r3, #13
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	4903      	ldr	r1, [pc, #12]	; (8001144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001136:	5ccb      	ldrb	r3, [r1, r3]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	08004774 	.word	0x08004774

08001148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800114c:	b0ae      	sub	sp, #184	; 0xb8
 800114e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800116e:	4bcb      	ldr	r3, [pc, #812]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b0c      	cmp	r3, #12
 8001178:	f200 8206 	bhi.w	8001588 <HAL_RCC_GetSysClockFreq+0x440>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <HAL_RCC_GetSysClockFreq+0x3c>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	080011b9 	.word	0x080011b9
 8001188:	08001589 	.word	0x08001589
 800118c:	08001589 	.word	0x08001589
 8001190:	08001589 	.word	0x08001589
 8001194:	080011c1 	.word	0x080011c1
 8001198:	08001589 	.word	0x08001589
 800119c:	08001589 	.word	0x08001589
 80011a0:	08001589 	.word	0x08001589
 80011a4:	080011c9 	.word	0x080011c9
 80011a8:	08001589 	.word	0x08001589
 80011ac:	08001589 	.word	0x08001589
 80011b0:	08001589 	.word	0x08001589
 80011b4:	080013b9 	.word	0x080013b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b8:	4bb9      	ldr	r3, [pc, #740]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80011ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80011be:	e1e7      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011c0:	4bb8      	ldr	r3, [pc, #736]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011c6:	e1e3      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c8:	4bb4      	ldr	r3, [pc, #720]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011d4:	4bb1      	ldr	r3, [pc, #708]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d071      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011e0:	4bae      	ldr	r3, [pc, #696]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	099b      	lsrs	r3, r3, #6
 80011e6:	2200      	movs	r2, #0
 80011e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80011f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001206:	4622      	mov	r2, r4
 8001208:	462b      	mov	r3, r5
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0159      	lsls	r1, r3, #5
 8001214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001218:	0150      	lsls	r0, r2, #5
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4621      	mov	r1, r4
 8001220:	1a51      	subs	r1, r2, r1
 8001222:	6439      	str	r1, [r7, #64]	; 0x40
 8001224:	4629      	mov	r1, r5
 8001226:	eb63 0301 	sbc.w	r3, r3, r1
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001238:	4649      	mov	r1, r9
 800123a:	018b      	lsls	r3, r1, #6
 800123c:	4641      	mov	r1, r8
 800123e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001242:	4641      	mov	r1, r8
 8001244:	018a      	lsls	r2, r1, #6
 8001246:	4641      	mov	r1, r8
 8001248:	1a51      	subs	r1, r2, r1
 800124a:	63b9      	str	r1, [r7, #56]	; 0x38
 800124c:	4649      	mov	r1, r9
 800124e:	eb63 0301 	sbc.w	r3, r3, r1
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001260:	4649      	mov	r1, r9
 8001262:	00cb      	lsls	r3, r1, #3
 8001264:	4641      	mov	r1, r8
 8001266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800126a:	4641      	mov	r1, r8
 800126c:	00ca      	lsls	r2, r1, #3
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	4603      	mov	r3, r0
 8001274:	4622      	mov	r2, r4
 8001276:	189b      	adds	r3, r3, r2
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
 800127a:	462b      	mov	r3, r5
 800127c:	460a      	mov	r2, r1
 800127e:	eb42 0303 	adc.w	r3, r2, r3
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001290:	4629      	mov	r1, r5
 8001292:	024b      	lsls	r3, r1, #9
 8001294:	4621      	mov	r1, r4
 8001296:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800129a:	4621      	mov	r1, r4
 800129c:	024a      	lsls	r2, r1, #9
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012b4:	f7fe ffac 	bl	8000210 <__aeabi_uldivmod>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4613      	mov	r3, r2
 80012be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012c2:	e067      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	099b      	lsrs	r3, r3, #6
 80012ca:	2200      	movs	r2, #0
 80012cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80012d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80012de:	2300      	movs	r3, #0
 80012e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80012e6:	4622      	mov	r2, r4
 80012e8:	462b      	mov	r3, r5
 80012ea:	f04f 0000 	mov.w	r0, #0
 80012ee:	f04f 0100 	mov.w	r1, #0
 80012f2:	0159      	lsls	r1, r3, #5
 80012f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012f8:	0150      	lsls	r0, r2, #5
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4621      	mov	r1, r4
 8001300:	1a51      	subs	r1, r2, r1
 8001302:	62b9      	str	r1, [r7, #40]	; 0x28
 8001304:	4629      	mov	r1, r5
 8001306:	eb63 0301 	sbc.w	r3, r3, r1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001318:	4649      	mov	r1, r9
 800131a:	018b      	lsls	r3, r1, #6
 800131c:	4641      	mov	r1, r8
 800131e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001322:	4641      	mov	r1, r8
 8001324:	018a      	lsls	r2, r1, #6
 8001326:	4641      	mov	r1, r8
 8001328:	ebb2 0a01 	subs.w	sl, r2, r1
 800132c:	4649      	mov	r1, r9
 800132e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800133e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001346:	4692      	mov	sl, r2
 8001348:	469b      	mov	fp, r3
 800134a:	4623      	mov	r3, r4
 800134c:	eb1a 0303 	adds.w	r3, sl, r3
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	462b      	mov	r3, r5
 8001354:	eb4b 0303 	adc.w	r3, fp, r3
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001366:	4629      	mov	r1, r5
 8001368:	028b      	lsls	r3, r1, #10
 800136a:	4621      	mov	r1, r4
 800136c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001370:	4621      	mov	r1, r4
 8001372:	028a      	lsls	r2, r1, #10
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800137c:	2200      	movs	r2, #0
 800137e:	673b      	str	r3, [r7, #112]	; 0x70
 8001380:	677a      	str	r2, [r7, #116]	; 0x74
 8001382:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001386:	f7fe ff43 	bl	8000210 <__aeabi_uldivmod>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4613      	mov	r3, r2
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	3301      	adds	r3, #1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80013a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80013aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013b6:	e0eb      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c4:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d06b      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_GetSysClockFreq+0x354>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	2200      	movs	r2, #0
 80013d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80013da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e2:	663b      	str	r3, [r7, #96]	; 0x60
 80013e4:	2300      	movs	r3, #0
 80013e6:	667b      	str	r3, [r7, #100]	; 0x64
 80013e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013ec:	4622      	mov	r2, r4
 80013ee:	462b      	mov	r3, r5
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	f04f 0100 	mov.w	r1, #0
 80013f8:	0159      	lsls	r1, r3, #5
 80013fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fe:	0150      	lsls	r0, r2, #5
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4621      	mov	r1, r4
 8001406:	1a51      	subs	r1, r2, r1
 8001408:	61b9      	str	r1, [r7, #24]
 800140a:	4629      	mov	r1, r5
 800140c:	eb63 0301 	sbc.w	r3, r3, r1
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800141e:	4659      	mov	r1, fp
 8001420:	018b      	lsls	r3, r1, #6
 8001422:	4651      	mov	r1, sl
 8001424:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001428:	4651      	mov	r1, sl
 800142a:	018a      	lsls	r2, r1, #6
 800142c:	4651      	mov	r1, sl
 800142e:	ebb2 0801 	subs.w	r8, r2, r1
 8001432:	4659      	mov	r1, fp
 8001434:	eb63 0901 	sbc.w	r9, r3, r1
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001444:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001448:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144c:	4690      	mov	r8, r2
 800144e:	4699      	mov	r9, r3
 8001450:	4623      	mov	r3, r4
 8001452:	eb18 0303 	adds.w	r3, r8, r3
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	462b      	mov	r3, r5
 800145a:	eb49 0303 	adc.w	r3, r9, r3
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800146c:	4629      	mov	r1, r5
 800146e:	024b      	lsls	r3, r1, #9
 8001470:	4621      	mov	r1, r4
 8001472:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001476:	4621      	mov	r1, r4
 8001478:	024a      	lsls	r2, r1, #9
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001482:	2200      	movs	r2, #0
 8001484:	65bb      	str	r3, [r7, #88]	; 0x58
 8001486:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001488:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800148c:	f7fe fec0 	bl	8000210 <__aeabi_uldivmod>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4613      	mov	r3, r2
 8001496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800149a:	e065      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0x420>
 800149c:	40023800 	.word	0x40023800
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	2200      	movs	r2, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	4611      	mov	r1, r2
 80014b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014b8:	653b      	str	r3, [r7, #80]	; 0x50
 80014ba:	2300      	movs	r3, #0
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
 80014be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014c2:	4642      	mov	r2, r8
 80014c4:	464b      	mov	r3, r9
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d4:	0150      	lsls	r0, r2, #5
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4641      	mov	r1, r8
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4649      	mov	r1, r9
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014f4:	4659      	mov	r1, fp
 80014f6:	018b      	lsls	r3, r1, #6
 80014f8:	4651      	mov	r1, sl
 80014fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fe:	4651      	mov	r1, sl
 8001500:	018a      	lsls	r2, r1, #6
 8001502:	4651      	mov	r1, sl
 8001504:	1a54      	subs	r4, r2, r1
 8001506:	4659      	mov	r1, fp
 8001508:	eb63 0501 	sbc.w	r5, r3, r1
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	00eb      	lsls	r3, r5, #3
 8001516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800151a:	00e2      	lsls	r2, r4, #3
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	4643      	mov	r3, r8
 8001522:	18e3      	adds	r3, r4, r3
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	464b      	mov	r3, r9
 8001528:	eb45 0303 	adc.w	r3, r5, r3
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800153a:	4629      	mov	r1, r5
 800153c:	028b      	lsls	r3, r1, #10
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001544:	4621      	mov	r1, r4
 8001546:	028a      	lsls	r2, r1, #10
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001550:	2200      	movs	r2, #0
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
 8001554:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001556:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800155a:	f7fe fe59 	bl	8000210 <__aeabi_uldivmod>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4613      	mov	r3, r2
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0f1b      	lsrs	r3, r3, #28
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800157a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001586:	e003      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800158a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800158e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001594:	4618      	mov	r0, r3
 8001596:	37b8      	adds	r7, #184	; 0xb8
 8001598:	46bd      	mov	sp, r7
 800159a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	00f42400 	.word	0x00f42400

080015a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e28d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8083 	beq.w	80016ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015c8:	4b94      	ldr	r3, [pc, #592]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d019      	beq.n	8001608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d4:	4b91      	ldr	r3, [pc, #580]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e0:	4b8e      	ldr	r3, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ec:	d00c      	beq.n	8001608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b84      	ldr	r3, [pc, #528]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x124>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e25a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x90>
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7b      	ldr	r2, [pc, #492]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xcc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0xb4>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xcc>
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6e      	ldr	r2, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6b      	ldr	r2, [pc, #428]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff f9aa 	bl	80009d4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff f9a6 	bl	80009d4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e21f      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xdc>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f996 	bl	80009d4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff f992 	bl	80009d4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e20b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x104>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d06f      	beq.n	80017ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016da:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d017      	beq.n	8001716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e6:	4b4d      	ldr	r3, [pc, #308]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x186>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1d3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff f93f 	bl	80009d4 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f93b 	bl	80009d4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1b4      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4925      	ldr	r1, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f91e 	bl	80009d4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff f91a 	bl	80009d4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e193      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d036      	beq.n	8001834 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f8fe 	bl	80009d4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f8fa 	bl	80009d4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e173      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x234>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff f8e7 	bl	80009d4 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	e00e      	b.n	8001828 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff f8e3 	bl	80009d4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e15c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ea      	bne.n	800180a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8097 	beq.w	8001970 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a7e      	ldr	r2, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a75      	ldr	r2, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff f8a3 	bl	80009d4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff f89f 	bl	80009d4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e118      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x31e>
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x358>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x340>
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a60      	ldr	r2, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a5d      	ldr	r2, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x358>
 80018e8:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a59      	ldr	r2, [pc, #356]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f864 	bl	80009d4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff f860 	bl	80009d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0d7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x368>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f84e 	bl	80009d4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f84a 	bl	80009d4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0c1      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ad 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d060      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d145      	bne.n	8001a1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f81e 	bl	80009d4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f81a 	bl	80009d4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e093      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	071b      	lsls	r3, r3, #28
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7fe ffef 	bl	80009d4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe ffeb 	bl	80009d4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e064      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x452>
 8001a18:	e05c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7fe ffd8 	bl	80009d4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe ffd4 	bl	80009d4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
 8001a46:	e045      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e040      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x538>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d030      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d129      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d122      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d119      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d10f      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e03f      	b.n	8001b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fe8a 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f829 	bl	8001b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0c0      	sub	sp, #256	; 0x100
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	ea40 0301 	orr.w	r3, r0, r1
 8001ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001bd8:	f021 010c 	bic.w	r1, r1, #12
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001be6:	430b      	orrs	r3, r1
 8001be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bfa:	6999      	ldr	r1, [r3, #24]
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	ea40 0301 	orr.w	r3, r0, r1
 8001c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <UART_SetConfig+0x2cc>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d005      	beq.n	8001c20 <UART_SetConfig+0xa0>
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <UART_SetConfig+0x2d0>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d104      	bne.n	8001c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c20:	f7ff fa7e 	bl	8001120 <HAL_RCC_GetPCLK2Freq>
 8001c24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c28:	e003      	b.n	8001c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c2a:	f7ff fa65 	bl	80010f8 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3c:	f040 810c 	bne.w	8001e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c52:	4622      	mov	r2, r4
 8001c54:	462b      	mov	r3, r5
 8001c56:	1891      	adds	r1, r2, r2
 8001c58:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c5a:	415b      	adcs	r3, r3
 8001c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c62:	4621      	mov	r1, r4
 8001c64:	eb12 0801 	adds.w	r8, r2, r1
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb43 0901 	adc.w	r9, r3, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	eb18 0303 	adds.w	r3, r8, r3
 8001c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c90:	462b      	mov	r3, r5
 8001c92:	eb49 0303 	adc.w	r3, r9, r3
 8001c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cae:	460b      	mov	r3, r1
 8001cb0:	18db      	adds	r3, r3, r3
 8001cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	657b      	str	r3, [r7, #84]	; 0x54
 8001cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cc4:	f7fe faa4 	bl	8000210 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <UART_SetConfig+0x2d4>)
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	011c      	lsls	r4, r3, #4
 8001cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ce8:	4642      	mov	r2, r8
 8001cea:	464b      	mov	r3, r9
 8001cec:	1891      	adds	r1, r2, r2
 8001cee:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cf0:	415b      	adcs	r3, r3
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb43 0b01 	adc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d18:	4692      	mov	sl, r2
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8001d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d26:	464b      	mov	r3, r9
 8001d28:	eb4b 0303 	adc.w	r3, fp, r3
 8001d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d44:	460b      	mov	r3, r1
 8001d46:	18db      	adds	r3, r3, r3
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	eb42 0303 	adc.w	r3, r2, r3
 8001d50:	647b      	str	r3, [r7, #68]	; 0x44
 8001d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d5a:	f7fe fa59 	bl	8000210 <__aeabi_uldivmod>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <UART_SetConfig+0x2d4>)
 8001d66:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2264      	movs	r2, #100	; 0x64
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	1acb      	subs	r3, r1, r3
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <UART_SetConfig+0x2d4>)
 8001d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d88:	441c      	add	r4, r3
 8001d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	464b      	mov	r3, r9
 8001da0:	1891      	adds	r1, r2, r2
 8001da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da4:	415b      	adcs	r3, r3
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dac:	4641      	mov	r1, r8
 8001dae:	1851      	adds	r1, r2, r1
 8001db0:	6339      	str	r1, [r7, #48]	; 0x30
 8001db2:	4649      	mov	r1, r9
 8001db4:	414b      	adcs	r3, r1
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4651      	mov	r1, sl
 8001dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dce:	4651      	mov	r1, sl
 8001dd0:	00ca      	lsls	r2, r1, #3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4642      	mov	r2, r8
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001de0:	464b      	mov	r3, r9
 8001de2:	460a      	mov	r2, r1
 8001de4:	eb42 0303 	adc.w	r3, r2, r3
 8001de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001df8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e00:	460b      	mov	r3, r1
 8001e02:	18db      	adds	r3, r3, r3
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	4613      	mov	r3, r2
 8001e08:	eb42 0303 	adc.w	r3, r2, r3
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e16:	f7fe f9fb 	bl	8000210 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <UART_SetConfig+0x2d4>)
 8001e20:	fba3 1302 	umull	r1, r3, r3, r2
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	2164      	movs	r1, #100	; 0x64
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3332      	adds	r3, #50	; 0x32
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <UART_SetConfig+0x2d4>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4422      	add	r2, r4
 8001e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e48:	e105      	b.n	8002056 <UART_SetConfig+0x4d6>
 8001e4a:	bf00      	nop
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e6a:	4642      	mov	r2, r8
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	1891      	adds	r1, r2, r2
 8001e70:	6239      	str	r1, [r7, #32]
 8001e72:	415b      	adcs	r3, r3
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1854      	adds	r4, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb43 0501 	adc.w	r5, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	eb45 0303 	adc.w	r3, r5, r3
 8001ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	008b      	lsls	r3, r1, #2
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	008a      	lsls	r2, r1, #2
 8001ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ed8:	f7fe f99a 	bl	8000210 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4b60      	ldr	r3, [pc, #384]	; (8002064 <UART_SetConfig+0x4e4>)
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	011c      	lsls	r4, r3, #4
 8001eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ef4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	61b9      	str	r1, [r7, #24]
 8001f04:	415b      	adcs	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	1851      	adds	r1, r2, r1
 8001f10:	6139      	str	r1, [r7, #16]
 8001f12:	4649      	mov	r1, r9
 8001f14:	414b      	adcs	r3, r1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f24:	4659      	mov	r1, fp
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	4651      	mov	r1, sl
 8001f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2e:	4651      	mov	r1, sl
 8001f30:	00ca      	lsls	r2, r1, #3
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	4642      	mov	r2, r8
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f40:	464b      	mov	r3, r9
 8001f42:	460a      	mov	r2, r1
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f64:	4649      	mov	r1, r9
 8001f66:	008b      	lsls	r3, r1, #2
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f6e:	4641      	mov	r1, r8
 8001f70:	008a      	lsls	r2, r1, #2
 8001f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f76:	f7fe f94b 	bl	8000210 <__aeabi_uldivmod>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <UART_SetConfig+0x4e4>)
 8001f80:	fba3 1302 	umull	r1, r3, r3, r2
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	2164      	movs	r1, #100	; 0x64
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	3332      	adds	r3, #50	; 0x32
 8001f92:	4a34      	ldr	r2, [pc, #208]	; (8002064 <UART_SetConfig+0x4e4>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9e:	441c      	add	r4, r3
 8001fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8001fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8001faa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fae:	4642      	mov	r2, r8
 8001fb0:	464b      	mov	r3, r9
 8001fb2:	1891      	adds	r1, r2, r2
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	415b      	adcs	r3, r3
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	1851      	adds	r1, r2, r1
 8001fc2:	6039      	str	r1, [r7, #0]
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	414b      	adcs	r3, r1
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fd6:	4659      	mov	r1, fp
 8001fd8:	00cb      	lsls	r3, r1, #3
 8001fda:	4651      	mov	r1, sl
 8001fdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	00ca      	lsls	r2, r1, #3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4642      	mov	r2, r8
 8001fec:	189b      	adds	r3, r3, r2
 8001fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	460a      	mov	r2, r1
 8001ff4:	eb42 0303 	adc.w	r3, r2, r3
 8001ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	663b      	str	r3, [r7, #96]	; 0x60
 8002004:	667a      	str	r2, [r7, #100]	; 0x64
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002012:	4649      	mov	r1, r9
 8002014:	008b      	lsls	r3, r1, #2
 8002016:	4641      	mov	r1, r8
 8002018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800201c:	4641      	mov	r1, r8
 800201e:	008a      	lsls	r2, r1, #2
 8002020:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002024:	f7fe f8f4 	bl	8000210 <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <UART_SetConfig+0x4e4>)
 800202e:	fba3 1302 	umull	r1, r3, r3, r2
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2164      	movs	r1, #100	; 0x64
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	3332      	adds	r3, #50	; 0x32
 8002040:	4a08      	ldr	r2, [pc, #32]	; (8002064 <UART_SetConfig+0x4e4>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4422      	add	r2, r4
 8002054:	609a      	str	r2, [r3, #8]
}
 8002056:	bf00      	nop
 8002058:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800205c:	46bd      	mov	sp, r7
 800205e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002062:	bf00      	nop
 8002064:	51eb851f 	.word	0x51eb851f

08002068 <__NVIC_SetPriority>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020c0:	2100      	movs	r1, #0
 80020c2:	f06f 0004 	mvn.w	r0, #4
 80020c6:	f7ff ffcf 	bl	8002068 <__NVIC_SetPriority>
#endif
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020d6:	f3ef 8305 	mrs	r3, IPSR
 80020da:	603b      	str	r3, [r7, #0]
  return(result);
 80020dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80020e2:	f06f 0305 	mvn.w	r3, #5
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	e00c      	b.n	8002104 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <osKernelInitialize+0x44>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <osKernelInitialize+0x44>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e002      	b.n	8002104 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000074 	.word	0x20000074

08002118 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800211e:	f3ef 8305 	mrs	r3, IPSR
 8002122:	603b      	str	r3, [r7, #0]
  return(result);
 8002124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <osKernelStart+0x1a>
    stat = osErrorISR;
 800212a:	f06f 0305 	mvn.w	r3, #5
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	e010      	b.n	8002154 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <osKernelStart+0x48>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d109      	bne.n	800214e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800213a:	f7ff ffbf 	bl	80020bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <osKernelStart+0x48>)
 8002140:	2202      	movs	r2, #2
 8002142:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002144:	f000 ff3e 	bl	8002fc4 <vTaskStartScheduler>
      stat = osOK;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	e002      	b.n	8002154 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000074 	.word	0x20000074

08002164 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <vApplicationGetIdleTaskMemory+0x2c>)
 8002174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <vApplicationGetIdleTaskMemory+0x30>)
 800217a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000078 	.word	0x20000078
 8002194:	200000d4 	.word	0x200000d4

08002198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80021a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <vApplicationGetTimerTaskMemory+0x30>)
 80021ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	200002d4 	.word	0x200002d4
 80021c8:	20000330 	.word	0x20000330

080021cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f103 0208 	add.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f103 0208 	add.w	r2, r3, #8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f103 0208 	add.w	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d103      	bne.n	800228e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e00c      	b.n	80022a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3308      	adds	r3, #8
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e002      	b.n	800229c <vListInsert+0x2e>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d2f6      	bcs.n	8002296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6892      	ldr	r2, [r2, #8]
 80022f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6852      	ldr	r2, [r2, #4]
 8002300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d103      	bne.n	8002314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800235a:	bf00      	nop
 800235c:	e7fe      	b.n	800235c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800235e:	f001 ffd1 	bl	8004304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	441a      	add	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	3b01      	subs	r3, #1
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	441a      	add	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d114      	bne.n	80023de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01a      	beq.n	80023f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3310      	adds	r3, #16
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 f889 	bl	80034d8 <xTaskRemoveFromEventList>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <xQueueGenericReset+0xcc>)
 80023ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	e009      	b.n	80023f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3310      	adds	r3, #16
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fef2 	bl	80021cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3324      	adds	r3, #36	; 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff feed 	bl	80021cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023f2:	f001 ffb7 	bl	8004364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	e000ed04 	.word	0xe000ed04

08002404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002446:	bf00      	nop
 8002448:	e7fe      	b.n	8002448 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <xQueueGenericCreateStatic+0x52>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <xQueueGenericCreateStatic+0x56>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueGenericCreateStatic+0x58>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	623b      	str	r3, [r7, #32]
}
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <xQueueGenericCreateStatic+0x7e>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueGenericCreateStatic+0x82>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueGenericCreateStatic+0x84>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61fb      	str	r3, [r7, #28]
}
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024a2:	2350      	movs	r3, #80	; 0x50
 80024a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d00a      	beq.n	80024c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	61bb      	str	r3, [r7, #24]
}
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f805 	bl	80024f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3730      	adds	r7, #48	; 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e002      	b.n	8002516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002522:	2101      	movs	r1, #1
 8002524:	69b8      	ldr	r0, [r7, #24]
 8002526:	f7ff ff05 	bl	8002334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	; 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800254a:	2300      	movs	r3, #0
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericSend+0x32>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <xQueueGenericSend+0x40>
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <xQueueGenericSend+0x44>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <xQueueGenericSend+0x46>
 8002580:	2300      	movs	r3, #0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <xQueueGenericSend+0x60>
	__asm volatile
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002598:	bf00      	nop
 800259a:	e7fe      	b.n	800259a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d103      	bne.n	80025aa <xQueueGenericSend+0x6e>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <xQueueGenericSend+0x72>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xQueueGenericSend+0x74>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <xQueueGenericSend+0x8e>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	623b      	str	r3, [r7, #32]
}
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ca:	f001 f943 	bl	8003854 <xTaskGetSchedulerState>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <xQueueGenericSend+0x9e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xQueueGenericSend+0xa2>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xQueueGenericSend+0xa4>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueGenericSend+0xbe>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
}
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025fa:	f001 fe83 	bl	8004304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <xQueueGenericSend+0xd4>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d129      	bne.n	8002664 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002616:	f000 fa0b 	bl	8002a30 <prvCopyDataToQueue>
 800261a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	3324      	adds	r3, #36	; 0x24
 8002628:	4618      	mov	r0, r3
 800262a:	f000 ff55 	bl	80034d8 <xTaskRemoveFromEventList>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <xQueueGenericSend+0x1f8>)
 8002636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	e00a      	b.n	800265c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <xQueueGenericSend+0x1f8>)
 800264e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800265c:	f001 fe82 	bl	8004364 <vPortExitCritical>
				return pdPASS;
 8002660:	2301      	movs	r3, #1
 8002662:	e063      	b.n	800272c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800266a:	f001 fe7b 	bl	8004364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800266e:	2300      	movs	r3, #0
 8002670:	e05c      	b.n	800272c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4618      	mov	r0, r3
 800267e:	f000 ff8f 	bl	80035a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002682:	2301      	movs	r3, #1
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002686:	f001 fe6d 	bl	8004364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800268a:	f000 fd01 	bl	8003090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800268e:	f001 fe39 	bl	8004304 <vPortEnterCritical>
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d103      	bne.n	80026a8 <xQueueGenericSend+0x16c>
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x182>
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026be:	f001 fe51 	bl	8004364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026c2:	1d3a      	adds	r2, r7, #4
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 ff7e 	bl	80035cc <xTaskCheckForTimeOut>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d124      	bne.n	8002720 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d8:	f000 faa2 	bl	8002c20 <prvIsQueueFull>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	3310      	adds	r3, #16
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fea4 	bl	8003438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f2:	f000 fa2d 	bl	8002b50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026f6:	f000 fcd9 	bl	80030ac <xTaskResumeAll>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f47f af7c 	bne.w	80025fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <xQueueGenericSend+0x1f8>)
 8002704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	e772      	b.n	80025fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002716:	f000 fa1b 	bl	8002b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800271a:	f000 fcc7 	bl	80030ac <xTaskResumeAll>
 800271e:	e76c      	b.n	80025fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002722:	f000 fa15 	bl	8002b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002726:	f000 fcc1 	bl	80030ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800272a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800272c:	4618      	mov	r0, r3
 800272e:	3738      	adds	r7, #56	; 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b090      	sub	sp, #64	; 0x40
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <xQueueGenericSendFromISR+0x3c>
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <xQueueGenericSendFromISR+0x40>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <xQueueGenericSendFromISR+0x42>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002790:	bf00      	nop
 8002792:	e7fe      	b.n	8002792 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d103      	bne.n	80027a2 <xQueueGenericSendFromISR+0x6a>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <xQueueGenericSendFromISR+0x6e>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <xQueueGenericSendFromISR+0x70>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	623b      	str	r3, [r7, #32]
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027c2:	f001 fe81 	bl	80044c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027c6:	f3ef 8211 	mrs	r2, BASEPRI
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	61fa      	str	r2, [r7, #28]
 80027dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <xQueueGenericSendFromISR+0xbc>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d12f      	bne.n	8002854 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800280a:	f000 f911 	bl	8002a30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800280e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d112      	bne.n	800283e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	3324      	adds	r3, #36	; 0x24
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fe57 	bl	80034d8 <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e007      	b.n	800284e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800283e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002842:	3301      	adds	r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	b25a      	sxtb	r2, r3
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800284e:	2301      	movs	r3, #1
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002852:	e001      	b.n	8002858 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002854:	2300      	movs	r3, #0
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002862:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002866:	4618      	mov	r0, r3
 8002868:	3740      	adds	r7, #64	; 0x40
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <xQueueReceive+0x30>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	623b      	str	r3, [r7, #32]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <xQueueReceive+0x3e>
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <xQueueReceive+0x42>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <xQueueReceive+0x44>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <xQueueReceive+0x5e>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	61fb      	str	r3, [r7, #28]
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ce:	f000 ffc1 	bl	8003854 <xTaskGetSchedulerState>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <xQueueReceive+0x6e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <xQueueReceive+0x72>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <xQueueReceive+0x74>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueReceive+0x8e>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	61bb      	str	r3, [r7, #24]
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028fe:	f001 fd01 	bl	8004304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01f      	beq.n	800294e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002912:	f000 f8f7 	bl	8002b04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00f      	beq.n	8002946 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	3310      	adds	r3, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fdd4 	bl	80034d8 <xTaskRemoveFromEventList>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <xQueueReceive+0x1bc>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002946:	f001 fd0d 	bl	8004364 <vPortExitCritical>
				return pdPASS;
 800294a:	2301      	movs	r3, #1
 800294c:	e069      	b.n	8002a22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002954:	f001 fd06 	bl	8004364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002958:	2300      	movs	r3, #0
 800295a:	e062      	b.n	8002a22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fe1a 	bl	80035a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002970:	f001 fcf8 	bl	8004364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002974:	f000 fb8c 	bl	8003090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002978:	f001 fcc4 	bl	8004304 <vPortEnterCritical>
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002982:	b25b      	sxtb	r3, r3
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d103      	bne.n	8002992 <xQueueReceive+0x122>
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002998:	b25b      	sxtb	r3, r3
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d103      	bne.n	80029a8 <xQueueReceive+0x138>
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a8:	f001 fcdc 	bl	8004364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ac:	1d3a      	adds	r2, r7, #4
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fe09 	bl	80035cc <xTaskCheckForTimeOut>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d123      	bne.n	8002a08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c2:	f000 f917 	bl	8002bf4 <prvIsQueueEmpty>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fd2f 	bl	8003438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029dc:	f000 f8b8 	bl	8002b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029e0:	f000 fb64 	bl	80030ac <xTaskResumeAll>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d189      	bne.n	80028fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <xQueueReceive+0x1bc>)
 80029ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	e780      	b.n	80028fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fe:	f000 f8a7 	bl	8002b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a02:	f000 fb53 	bl	80030ac <xTaskResumeAll>
 8002a06:	e77a      	b.n	80028fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0a:	f000 f8a1 	bl	8002b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a0e:	f000 fb4d 	bl	80030ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a14:	f000 f8ee 	bl	8002bf4 <prvIsQueueEmpty>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f43f af6f 	beq.w	80028fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3730      	adds	r7, #48	; 0x30
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000ed04 	.word	0xe000ed04

08002a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d14d      	bne.n	8002af2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 ff18 	bl	8003890 <xTaskPriorityDisinherit>
 8002a60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e043      	b.n	8002af2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d119      	bne.n	8002aa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6858      	ldr	r0, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	f001 fe44 	bl	8004708 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	441a      	add	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d32b      	bcc.n	8002af2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	e026      	b.n	8002af2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68d8      	ldr	r0, [r3, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	461a      	mov	r2, r3
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	f001 fe2a 	bl	8004708 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	425b      	negs	r3, r3
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	425b      	negs	r3, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d105      	bne.n	8002af2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002afa:	697b      	ldr	r3, [r7, #20]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d303      	bcc.n	8002b38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68d9      	ldr	r1, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	461a      	mov	r2, r3
 8002b42:	6838      	ldr	r0, [r7, #0]
 8002b44:	f001 fde0 	bl	8004708 <memcpy>
	}
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b58:	f001 fbd4 	bl	8004304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b64:	e011      	b.n	8002b8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d012      	beq.n	8002b94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3324      	adds	r3, #36	; 0x24
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fcb0 	bl	80034d8 <xTaskRemoveFromEventList>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b7e:	f000 fd87 	bl	8003690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dce9      	bgt.n	8002b66 <prvUnlockQueue+0x16>
 8002b92:	e000      	b.n	8002b96 <prvUnlockQueue+0x46>
					break;
 8002b94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b9e:	f001 fbe1 	bl	8004364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ba2:	f001 fbaf 	bl	8004304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bae:	e011      	b.n	8002bd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3310      	adds	r3, #16
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fc8b 	bl	80034d8 <xTaskRemoveFromEventList>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bc8:	f000 fd62 	bl	8003690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	dce9      	bgt.n	8002bb0 <prvUnlockQueue+0x60>
 8002bdc:	e000      	b.n	8002be0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	22ff      	movs	r2, #255	; 0xff
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002be8:	f001 fbbc 	bl	8004364 <vPortExitCritical>
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bfc:	f001 fb82 	bl	8004304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e001      	b.n	8002c12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c12:	f001 fba7 	bl	8004364 <vPortExitCritical>

	return xReturn;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c28:	f001 fb6c 	bl	8004304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d102      	bne.n	8002c3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e001      	b.n	8002c42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c42:	f001 fb8f 	bl	8004364 <vPortExitCritical>

	return xReturn;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e014      	b.n	8002c8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c60:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <vQueueAddToRegistry+0x50>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <vQueueAddToRegistry+0x50>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <vQueueAddToRegistry+0x50>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c82:	e006      	b.n	8002c92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3301      	adds	r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	d9e7      	bls.n	8002c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000730 	.word	0x20000730

08002ca4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cb4:	f001 fb26 	bl	8004304 <vPortEnterCritical>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d103      	bne.n	8002cce <vQueueWaitForMessageRestricted+0x2a>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d103      	bne.n	8002ce4 <vQueueWaitForMessageRestricted+0x40>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce4:	f001 fb3e 	bl	8004364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fbc1 	bl	8003480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff26 	bl	8002b50 <prvUnlockQueue>
	}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	623b      	str	r3, [r7, #32]
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	61fb      	str	r3, [r7, #28]
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d52:	235c      	movs	r3, #92	; 0x5c
 8002d54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b5c      	cmp	r3, #92	; 0x5c
 8002d5a:	d00a      	beq.n	8002d72 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	61bb      	str	r3, [r7, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01e      	beq.n	8002db8 <xTaskCreateStatic+0xac>
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d92:	2300      	movs	r3, #0
 8002d94:	9303      	str	r3, [sp, #12]
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f80b 	bl	8002dc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db2:	f000 f897 	bl	8002ee4 <prvAddNewTaskToReadyList>
 8002db6:	e001      	b.n	8002dbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dbc:	697b      	ldr	r3, [r7, #20]
	}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b088      	sub	sp, #32
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	21a5      	movs	r1, #165	; 0xa5
 8002de0:	f001 fca0 	bl	8004724 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dee:	3b01      	subs	r3, #1
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f023 0307 	bic.w	r3, r3, #7
 8002dfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	617b      	str	r3, [r7, #20]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01f      	beq.n	8002e64 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e012      	b.n	8002e50 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	7819      	ldrb	r1, [r3, #0]
 8002e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	3334      	adds	r3, #52	; 0x34
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	d9e9      	bls.n	8002e2a <prvInitialiseNewTask+0x64>
 8002e56:	e000      	b.n	8002e5a <prvInitialiseNewTask+0x94>
			{
				break;
 8002e58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e62:	e003      	b.n	8002e6c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	2b37      	cmp	r3, #55	; 0x37
 8002e70:	d901      	bls.n	8002e76 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e72:	2337      	movs	r3, #55	; 0x37
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f9bd 	bl	800220c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	3318      	adds	r3, #24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f9b8 	bl	800220c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	69b8      	ldr	r0, [r7, #24]
 8002ec6:	f001 f8f3 	bl	80040b0 <pxPortInitialiseStack>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002edc:	bf00      	nop
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eec:	f001 fa0a 	bl	8004304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <prvAddNewTaskToReadyList+0xc4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <prvAddNewTaskToReadyList+0xc4>)
 8002ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f02:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <prvAddNewTaskToReadyList+0xc4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d110      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f10:	f000 fbe2 	bl	80036d8 <prvInitialiseTaskLists>
 8002f14:	e00d      	b.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <prvAddNewTaskToReadyList+0xcc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d802      	bhi.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <prvAddNewTaskToReadyList+0xd0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <prvAddNewTaskToReadyList+0xd0>)
 8002f3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <prvAddNewTaskToReadyList+0xd0>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <prvAddNewTaskToReadyList+0xd4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d903      	bls.n	8002f58 <prvAddNewTaskToReadyList+0x74>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <prvAddNewTaskToReadyList+0xd4>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <prvAddNewTaskToReadyList+0xd8>)
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff f959 	bl	8002226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f74:	f001 f9f6 	bl	8004364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <prvAddNewTaskToReadyList+0xcc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d207      	bcs.n	8002f9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <prvAddNewTaskToReadyList+0xdc>)
 8002f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000c44 	.word	0x20000c44
 8002fac:	20000770 	.word	0x20000770
 8002fb0:	20000c50 	.word	0x20000c50
 8002fb4:	20000c60 	.word	0x20000c60
 8002fb8:	20000c4c 	.word	0x20000c4c
 8002fbc:	20000774 	.word	0x20000774
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fd2:	463a      	mov	r2, r7
 8002fd4:	1d39      	adds	r1, r7, #4
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f8c2 	bl	8002164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	9202      	str	r2, [sp, #8]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	4921      	ldr	r1, [pc, #132]	; (8003078 <vTaskStartScheduler+0xb4>)
 8002ff4:	4821      	ldr	r0, [pc, #132]	; (800307c <vTaskStartScheduler+0xb8>)
 8002ff6:	f7ff fe89 	bl	8002d0c <xTaskCreateStatic>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4a20      	ldr	r2, [pc, #128]	; (8003080 <vTaskStartScheduler+0xbc>)
 8002ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <vTaskStartScheduler+0xbc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e001      	b.n	8003012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003018:	f000 fcfc 	bl	8003a14 <xTimerCreateTimerTask>
 800301c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d116      	bne.n	8003052 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <vTaskStartScheduler+0xc0>)
 800303a:	f04f 32ff 	mov.w	r2, #4294967295
 800303e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <vTaskStartScheduler+0xc4>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <vTaskStartScheduler+0xc8>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800304c:	f001 f8b8 	bl	80041c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003050:	e00e      	b.n	8003070 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d10a      	bne.n	8003070 <vTaskStartScheduler+0xac>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60fb      	str	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vTaskStartScheduler+0xaa>
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	0800474c 	.word	0x0800474c
 800307c:	080036a9 	.word	0x080036a9
 8003080:	20000c68 	.word	0x20000c68
 8003084:	20000c64 	.word	0x20000c64
 8003088:	20000c50 	.word	0x20000c50
 800308c:	20000c48 	.word	0x20000c48

08003090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <vTaskSuspendAll+0x18>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <vTaskSuspendAll+0x18>)
 800309c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000c6c 	.word	0x20000c6c

080030ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <xTaskResumeAll+0x118>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	603b      	str	r3, [r7, #0]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030d8:	f001 f914 	bl	8004304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030dc:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <xTaskResumeAll+0x118>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <xTaskResumeAll+0x118>)
 80030e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <xTaskResumeAll+0x118>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d162      	bne.n	80031b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <xTaskResumeAll+0x11c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d05e      	beq.n	80031b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f6:	e02f      	b.n	8003158 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <xTaskResumeAll+0x120>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3318      	adds	r3, #24
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f8eb 	bl	80022e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f8e6 	bl	80022e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <xTaskResumeAll+0x124>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d903      	bls.n	8003128 <xTaskResumeAll+0x7c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <xTaskResumeAll+0x124>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <xTaskResumeAll+0x128>)
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7ff f871 	bl	8002226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <xTaskResumeAll+0x12c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <xTaskResumeAll+0x130>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <xTaskResumeAll+0x120>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1cb      	bne.n	80030f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003166:	f000 fb55 	bl	8003814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <xTaskResumeAll+0x134>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003176:	f000 f847 	bl	8003208 <xTaskIncrementTick>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <xTaskResumeAll+0x130>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3b01      	subs	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f1      	bne.n	8003176 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <xTaskResumeAll+0x134>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003198:	4b10      	ldr	r3, [pc, #64]	; (80031dc <xTaskResumeAll+0x130>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <xTaskResumeAll+0x138>)
 80031a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031b4:	f001 f8d6 	bl	8004364 <vPortExitCritical>

	return xAlreadyYielded;
 80031b8:	68bb      	ldr	r3, [r7, #8]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000c6c 	.word	0x20000c6c
 80031c8:	20000c44 	.word	0x20000c44
 80031cc:	20000c04 	.word	0x20000c04
 80031d0:	20000c4c 	.word	0x20000c4c
 80031d4:	20000774 	.word	0x20000774
 80031d8:	20000770 	.word	0x20000770
 80031dc:	20000c58 	.word	0x20000c58
 80031e0:	20000c54 	.word	0x20000c54
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <xTaskGetTickCount+0x1c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031f4:	687b      	ldr	r3, [r7, #4]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000c48 	.word	0x20000c48

08003208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003212:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <xTaskIncrementTick+0x148>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 808f 	bne.w	800333a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <xTaskIncrementTick+0x14c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003224:	4a4b      	ldr	r2, [pc, #300]	; (8003354 <xTaskIncrementTick+0x14c>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d120      	bne.n	8003272 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <xTaskIncrementTick+0x150>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <xTaskIncrementTick+0x48>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	603b      	str	r3, [r7, #0]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xTaskIncrementTick+0x46>
 8003250:	4b41      	ldr	r3, [pc, #260]	; (8003358 <xTaskIncrementTick+0x150>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <xTaskIncrementTick+0x154>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3f      	ldr	r2, [pc, #252]	; (8003358 <xTaskIncrementTick+0x150>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <xTaskIncrementTick+0x154>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <xTaskIncrementTick+0x158>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a3d      	ldr	r2, [pc, #244]	; (8003360 <xTaskIncrementTick+0x158>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	f000 fad1 	bl	8003814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003272:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <xTaskIncrementTick+0x15c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d349      	bcc.n	8003310 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <xTaskIncrementTick+0x150>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <xTaskIncrementTick+0x15c>)
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	601a      	str	r2, [r3, #0]
					break;
 800328e:	e03f      	b.n	8003310 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <xTaskIncrementTick+0x150>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d203      	bcs.n	80032b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032a8:	4a2e      	ldr	r2, [pc, #184]	; (8003364 <xTaskIncrementTick+0x15c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032ae:	e02f      	b.n	8003310 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f813 	bl	80022e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3318      	adds	r3, #24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f80a 	bl	80022e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <xTaskIncrementTick+0x160>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d903      	bls.n	80032e0 <xTaskIncrementTick+0xd8>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <xTaskIncrementTick+0x160>)
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <xTaskIncrementTick+0x164>)
 80032ee:	441a      	add	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fe ff95 	bl	8002226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <xTaskIncrementTick+0x168>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	429a      	cmp	r2, r3
 8003308:	d3b8      	bcc.n	800327c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	e7b5      	b.n	800327c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <xTaskIncrementTick+0x168>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4915      	ldr	r1, [pc, #84]	; (800336c <xTaskIncrementTick+0x164>)
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d901      	bls.n	800332c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <xTaskIncrementTick+0x16c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e004      	b.n	8003344 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <xTaskIncrementTick+0x170>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <xTaskIncrementTick+0x170>)
 8003342:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003344:	697b      	ldr	r3, [r7, #20]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000c6c 	.word	0x20000c6c
 8003354:	20000c48 	.word	0x20000c48
 8003358:	20000bfc 	.word	0x20000bfc
 800335c:	20000c00 	.word	0x20000c00
 8003360:	20000c5c 	.word	0x20000c5c
 8003364:	20000c64 	.word	0x20000c64
 8003368:	20000c4c 	.word	0x20000c4c
 800336c:	20000774 	.word	0x20000774
 8003370:	20000770 	.word	0x20000770
 8003374:	20000c58 	.word	0x20000c58
 8003378:	20000c54 	.word	0x20000c54

0800337c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003382:	4b28      	ldr	r3, [pc, #160]	; (8003424 <vTaskSwitchContext+0xa8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800338a:	4b27      	ldr	r3, [pc, #156]	; (8003428 <vTaskSwitchContext+0xac>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003390:	e041      	b.n	8003416 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <vTaskSwitchContext+0xac>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <vTaskSwitchContext+0xb0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e010      	b.n	80033c2 <vTaskSwitchContext+0x46>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <vTaskSwitchContext+0x40>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	607b      	str	r3, [r7, #4]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <vTaskSwitchContext+0x3e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3b01      	subs	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	491b      	ldr	r1, [pc, #108]	; (8003430 <vTaskSwitchContext+0xb4>)
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0e4      	beq.n	80033a0 <vTaskSwitchContext+0x24>
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <vTaskSwitchContext+0xb4>)
 80033e2:	4413      	add	r3, r2
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3308      	adds	r3, #8
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d104      	bne.n	8003406 <vTaskSwitchContext+0x8a>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <vTaskSwitchContext+0xb8>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <vTaskSwitchContext+0xb0>)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6013      	str	r3, [r2, #0]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000c6c 	.word	0x20000c6c
 8003428:	20000c58 	.word	0x20000c58
 800342c:	20000c4c 	.word	0x20000c4c
 8003430:	20000774 	.word	0x20000774
 8003434:	20000770 	.word	0x20000770

08003438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60fb      	str	r3, [r7, #12]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800345e:	4b07      	ldr	r3, [pc, #28]	; (800347c <vTaskPlaceOnEventList+0x44>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3318      	adds	r3, #24
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe ff01 	bl	800226e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800346c:	2101      	movs	r1, #1
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f000 fa7c 	bl	800396c <prvAddCurrentTaskToDelayedList>
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000770 	.word	0x20000770

08003480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	617b      	str	r3, [r7, #20]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4619      	mov	r1, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7fe feb8 	bl	8002226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f000 fa51 	bl	800396c <prvAddCurrentTaskToDelayedList>
	}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000770 	.word	0x20000770

080034d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60fb      	str	r3, [r7, #12]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	3318      	adds	r3, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fee9 	bl	80022e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <xTaskRemoveFromEventList+0xb0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11d      	bne.n	8003552 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3304      	adds	r3, #4
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fee0 	bl	80022e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <xTaskRemoveFromEventList+0xb4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d903      	bls.n	8003534 <xTaskRemoveFromEventList+0x5c>
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <xTaskRemoveFromEventList+0xb4>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <xTaskRemoveFromEventList+0xb8>)
 8003542:	441a      	add	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7fe fe6b 	bl	8002226 <vListInsertEnd>
 8003550:	e005      	b.n	800355e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3318      	adds	r3, #24
 8003556:	4619      	mov	r1, r3
 8003558:	480e      	ldr	r0, [pc, #56]	; (8003594 <xTaskRemoveFromEventList+0xbc>)
 800355a:	f7fe fe64 	bl	8002226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <xTaskRemoveFromEventList+0xc0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	429a      	cmp	r2, r3
 800356a:	d905      	bls.n	8003578 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <xTaskRemoveFromEventList+0xc4>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e001      	b.n	800357c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800357c:	697b      	ldr	r3, [r7, #20]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000c6c 	.word	0x20000c6c
 800358c:	20000c4c 	.word	0x20000c4c
 8003590:	20000774 	.word	0x20000774
 8003594:	20000c04 	.word	0x20000c04
 8003598:	20000770 	.word	0x20000770
 800359c:	20000c58 	.word	0x20000c58

080035a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <vTaskInternalSetTimeOutState+0x24>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <vTaskInternalSetTimeOutState+0x28>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	20000c5c 	.word	0x20000c5c
 80035c8:	20000c48 	.word	0x20000c48

080035cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	613b      	str	r3, [r7, #16]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800360e:	f000 fe79 	bl	8004304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <xTaskCheckForTimeOut+0xbc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d102      	bne.n	8003632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e023      	b.n	800367a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <xTaskCheckForTimeOut+0xc0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d007      	beq.n	800364e <xTaskCheckForTimeOut+0x82>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e015      	b.n	800367a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	d20b      	bcs.n	8003670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff9b 	bl	80035a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e004      	b.n	800367a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003676:	2301      	movs	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800367a:	f000 fe73 	bl	8004364 <vPortExitCritical>

	return xReturn;
 800367e:	69fb      	ldr	r3, [r7, #28]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000c48 	.word	0x20000c48
 800368c:	20000c5c 	.word	0x20000c5c

08003690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <vTaskMissedYield+0x14>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000c58 	.word	0x20000c58

080036a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036b0:	f000 f852 	bl	8003758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <prvIdleTask+0x28>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d9f9      	bls.n	80036b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <prvIdleTask+0x2c>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036cc:	e7f0      	b.n	80036b0 <prvIdleTask+0x8>
 80036ce:	bf00      	nop
 80036d0:	20000774 	.word	0x20000774
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	e00c      	b.n	80036fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <prvInitialiseTaskLists+0x60>)
 80036f0:	4413      	add	r3, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fd6a 	bl	80021cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3301      	adds	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b37      	cmp	r3, #55	; 0x37
 8003702:	d9ef      	bls.n	80036e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003704:	480d      	ldr	r0, [pc, #52]	; (800373c <prvInitialiseTaskLists+0x64>)
 8003706:	f7fe fd61 	bl	80021cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <prvInitialiseTaskLists+0x68>)
 800370c:	f7fe fd5e 	bl	80021cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <prvInitialiseTaskLists+0x6c>)
 8003712:	f7fe fd5b 	bl	80021cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003716:	480c      	ldr	r0, [pc, #48]	; (8003748 <prvInitialiseTaskLists+0x70>)
 8003718:	f7fe fd58 	bl	80021cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800371c:	480b      	ldr	r0, [pc, #44]	; (800374c <prvInitialiseTaskLists+0x74>)
 800371e:	f7fe fd55 	bl	80021cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <prvInitialiseTaskLists+0x78>)
 8003724:	4a05      	ldr	r2, [pc, #20]	; (800373c <prvInitialiseTaskLists+0x64>)
 8003726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvInitialiseTaskLists+0x7c>)
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <prvInitialiseTaskLists+0x68>)
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000774 	.word	0x20000774
 800373c:	20000bd4 	.word	0x20000bd4
 8003740:	20000be8 	.word	0x20000be8
 8003744:	20000c04 	.word	0x20000c04
 8003748:	20000c18 	.word	0x20000c18
 800374c:	20000c30 	.word	0x20000c30
 8003750:	20000bfc 	.word	0x20000bfc
 8003754:	20000c00 	.word	0x20000c00

08003758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375e:	e019      	b.n	8003794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003760:	f000 fdd0 	bl	8004304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <prvCheckTasksWaitingTermination+0x50>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fdb5 	bl	80022e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <prvCheckTasksWaitingTermination+0x54>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <prvCheckTasksWaitingTermination+0x54>)
 800377e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800378a:	f000 fdeb 	bl	8004364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f810 	bl	80037b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e1      	bne.n	8003760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000c18 	.word	0x20000c18
 80037ac:	20000c44 	.word	0x20000c44
 80037b0:	20000c2c 	.word	0x20000c2c

080037b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 febc 	bl	8004548 <vPortFree>
				vPortFree( pxTCB );
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 feb9 	bl	8004548 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037d6:	e018      	b.n	800380a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d103      	bne.n	80037ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 feb0 	bl	8004548 <vPortFree>
	}
 80037e8:	e00f      	b.n	800380a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d00a      	beq.n	800380a <prvDeleteTCB+0x56>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <prvDeleteTCB+0x54>
	}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <prvResetNextTaskUnblockTime+0x38>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800382c:	e008      	b.n	8003840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <prvResetNextTaskUnblockTime+0x38>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000bfc 	.word	0x20000bfc
 8003850:	20000c64 	.word	0x20000c64

08003854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <xTaskGetSchedulerState+0x34>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003862:	2301      	movs	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	e008      	b.n	800387a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <xTaskGetSchedulerState+0x38>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003870:	2302      	movs	r3, #2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e001      	b.n	800387a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800387a:	687b      	ldr	r3, [r7, #4]
	}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	20000c50 	.word	0x20000c50
 800388c:	20000c6c 	.word	0x20000c6c

08003890 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d056      	beq.n	8003954 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <xTaskPriorityDisinherit+0xd0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d00a      	beq.n	80038c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60bb      	str	r3, [r7, #8]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d02c      	beq.n	8003954 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d128      	bne.n	8003954 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fcea 	bl	80022e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <xTaskPriorityDisinherit+0xd4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d903      	bls.n	8003934 <xTaskPriorityDisinherit+0xa4>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <xTaskPriorityDisinherit+0xd4>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <xTaskPriorityDisinherit+0xd8>)
 8003942:	441a      	add	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fc6b 	bl	8002226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003954:	697b      	ldr	r3, [r7, #20]
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000770 	.word	0x20000770
 8003964:	20000c4c 	.word	0x20000c4c
 8003968:	20000774 	.word	0x20000774

0800396c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <prvAddCurrentTaskToDelayedList+0x90>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x94>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3304      	adds	r3, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fcac 	bl	80022e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d10a      	bne.n	80039a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4819      	ldr	r0, [pc, #100]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x98>)
 80039a0:	f7fe fc41 	bl	8002226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039a4:	e026      	b.n	80039f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d209      	bcs.n	80039d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f7fe fc4f 	bl	800226e <vListInsert>
}
 80039d0:	e010      	b.n	80039f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <prvAddCurrentTaskToDelayedList+0xa0>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe fc45 	bl	800226e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d202      	bcs.n	80039f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6013      	str	r3, [r2, #0]
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000c48 	.word	0x20000c48
 8003a00:	20000770 	.word	0x20000770
 8003a04:	20000c30 	.word	0x20000c30
 8003a08:	20000c00 	.word	0x20000c00
 8003a0c:	20000bfc 	.word	0x20000bfc
 8003a10:	20000c64 	.word	0x20000c64

08003a14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a1e:	f000 fb07 	bl	8004030 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <xTimerCreateTimerTask+0x80>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d021      	beq.n	8003a6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a32:	1d3a      	adds	r2, r7, #4
 8003a34:	f107 0108 	add.w	r1, r7, #8
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fbab 	bl	8002198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	9202      	str	r2, [sp, #8]
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	460a      	mov	r2, r1
 8003a54:	4910      	ldr	r1, [pc, #64]	; (8003a98 <xTimerCreateTimerTask+0x84>)
 8003a56:	4811      	ldr	r0, [pc, #68]	; (8003a9c <xTimerCreateTimerTask+0x88>)
 8003a58:	f7ff f958 	bl	8002d0c <xTaskCreateStatic>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <xTimerCreateTimerTask+0x8c>)
 8003a60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <xTimerCreateTimerTask+0x8c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	613b      	str	r3, [r7, #16]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a8a:	697b      	ldr	r3, [r7, #20]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000ca0 	.word	0x20000ca0
 8003a98:	08004754 	.word	0x08004754
 8003a9c:	08003bd9 	.word	0x08003bd9
 8003aa0:	20000ca4 	.word	0x20000ca4

08003aa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	623b      	str	r3, [r7, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <xTimerGenericCommand+0x98>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02a      	beq.n	8003b30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	dc18      	bgt.n	8003b1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003aec:	f7ff feb2 	bl	8003854 <xTaskGetSchedulerState>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d109      	bne.n	8003b0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <xTimerGenericCommand+0x98>)
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f107 0110 	add.w	r1, r7, #16
 8003afe:	2300      	movs	r3, #0
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	f7fe fd1b 	bl	800253c <xQueueGenericSend>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24
 8003b08:	e012      	b.n	8003b30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <xTimerGenericCommand+0x98>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f107 0110 	add.w	r1, r7, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	2200      	movs	r2, #0
 8003b16:	f7fe fd11 	bl	800253c <xQueueGenericSend>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8003b1c:	e008      	b.n	8003b30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <xTimerGenericCommand+0x98>)
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f107 0110 	add.w	r1, r7, #16
 8003b26:	2300      	movs	r3, #0
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	f7fe fe05 	bl	8002738 <xQueueGenericSendFromISR>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3728      	adds	r7, #40	; 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000ca0 	.word	0x20000ca0

08003b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <prvProcessExpiredTimer+0x94>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fbc1 	bl	80022e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d022      	beq.n	8003bb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	18d1      	adds	r1, r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	f000 f8d1 	bl	8003d20 <prvInsertTimerInActiveList>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01f      	beq.n	8003bc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f7ff ff88 	bl	8003aa4 <xTimerGenericCommand>
 8003b94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	4798      	blx	r3
}
 8003bcc:	bf00      	nop
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000c98 	.word	0x20000c98

08003bd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003be0:	f107 0308 	add.w	r3, r7, #8
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f857 	bl	8003c98 <prvGetNextExpireTime>
 8003bea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f803 	bl	8003bfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bf6:	f000 f8d5 	bl	8003da4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bfa:	e7f1      	b.n	8003be0 <prvTimerTask+0x8>

08003bfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c06:	f7ff fa43 	bl	8003090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f866 	bl	8003ce0 <prvSampleTimeNow>
 8003c14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d130      	bne.n	8003c7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <prvProcessTimerOrBlockTask+0x3c>
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d806      	bhi.n	8003c38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c2a:	f7ff fa3f 	bl	80030ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff85 	bl	8003b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c36:	e024      	b.n	8003c82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <prvProcessTimerOrBlockTask+0x90>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <prvProcessTimerOrBlockTask+0x50>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <prvProcessTimerOrBlockTask+0x52>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <prvProcessTimerOrBlockTask+0x94>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f7ff f821 	bl	8002ca4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c62:	f7ff fa23 	bl	80030ac <xTaskResumeAll>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <prvProcessTimerOrBlockTask+0x98>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
}
 8003c7c:	e001      	b.n	8003c82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c7e:	f7ff fa15 	bl	80030ac <xTaskResumeAll>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000c9c 	.word	0x20000c9c
 8003c90:	20000ca0 	.word	0x20000ca0
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <prvGetNextExpireTime+0x44>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <prvGetNextExpireTime+0x16>
 8003caa:	2201      	movs	r2, #1
 8003cac:	e000      	b.n	8003cb0 <prvGetNextExpireTime+0x18>
 8003cae:	2200      	movs	r2, #0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <prvGetNextExpireTime+0x44>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e001      	b.n	8003ccc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000c98 	.word	0x20000c98

08003ce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ce8:	f7ff fa7e 	bl	80031e8 <xTaskGetTickCount>
 8003cec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <prvSampleTimeNow+0x3c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d205      	bcs.n	8003d04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cf8:	f000 f936 	bl	8003f68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <prvSampleTimeNow+0x3c>)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000ca8 	.word	0x20000ca8

08003d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d812      	bhi.n	8003d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e01b      	b.n	8003d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <prvInsertTimerInActiveList+0x7c>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f7fe fa82 	bl	800226e <vListInsert>
 8003d6a:	e012      	b.n	8003d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d206      	bcs.n	8003d82 <prvInsertTimerInActiveList+0x62>
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e007      	b.n	8003d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <prvInsertTimerInActiveList+0x80>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe fa6e 	bl	800226e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d92:	697b      	ldr	r3, [r7, #20]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000c9c 	.word	0x20000c9c
 8003da0:	20000c98 	.word	0x20000c98

08003da4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003daa:	e0ca      	b.n	8003f42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da18      	bge.n	8003de4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	3304      	adds	r3, #4
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	61fb      	str	r3, [r7, #28]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dda:	6850      	ldr	r0, [r2, #4]
 8003ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	4611      	mov	r1, r2
 8003de2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f2c0 80aa 	blt.w	8003f40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fa6f 	bl	80022e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e02:	463b      	mov	r3, r7
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff6b 	bl	8003ce0 <prvSampleTimeNow>
 8003e0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	f200 8097 	bhi.w	8003f42 <prvProcessReceivedCommands+0x19e>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <prvProcessReceivedCommands+0x78>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e45 	.word	0x08003e45
 8003e28:	08003eb9 	.word	0x08003eb9
 8003e2c:	08003ecd 	.word	0x08003ecd
 8003e30:	08003f17 	.word	0x08003f17
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e45 	.word	0x08003e45
 8003e3c:	08003eb9 	.word	0x08003eb9
 8003e40:	08003ecd 	.word	0x08003ecd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	18d1      	adds	r1, r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e64:	f7ff ff5c 	bl	8003d20 <prvInsertTimerInActiveList>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d069      	beq.n	8003f42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05e      	beq.n	8003f42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e96:	f7ff fe05 	bl	8003aa4 <xTimerGenericCommand>
 8003e9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d14f      	bne.n	8003f42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	61bb      	str	r3, [r7, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003eca:	e03a      	b.n	8003f42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617b      	str	r3, [r7, #20]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	18d1      	adds	r1, r2, r3
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f10:	f7ff ff06 	bl	8003d20 <prvInsertTimerInActiveList>
					break;
 8003f14:	e015      	b.n	8003f42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f26:	f000 fb0f 	bl	8004548 <vPortFree>
 8003f2a:	e00a      	b.n	8003f42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f3e:	e000      	b.n	8003f42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <prvProcessReceivedCommands+0x1c0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1d39      	adds	r1, r7, #4
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fc90 	bl	8002870 <xQueueReceive>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f47f af2a 	bne.w	8003dac <prvProcessReceivedCommands+0x8>
	}
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3730      	adds	r7, #48	; 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000ca0 	.word	0x20000ca0

08003f68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f6e:	e048      	b.n	8004002 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f9a9 	bl	80022e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02e      	beq.n	8004002 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90e      	bls.n	8003fd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe f94e 	bl	800226e <vListInsert>
 8003fd2:	e016      	b.n	8004002 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fd60 	bl	8003aa4 <xTimerGenericCommand>
 8003fe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	603b      	str	r3, [r7, #0]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1b1      	bne.n	8003f70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <prvSwitchTimerLists+0xc0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <prvSwitchTimerLists+0xc4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8004018:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <prvSwitchTimerLists+0xc4>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000c98 	.word	0x20000c98
 800402c:	20000c9c 	.word	0x20000c9c

08004030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004036:	f000 f965 	bl	8004304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <prvCheckForValidListAndQueue+0x60>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d120      	bne.n	8004084 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004042:	4814      	ldr	r0, [pc, #80]	; (8004094 <prvCheckForValidListAndQueue+0x64>)
 8004044:	f7fe f8c2 	bl	80021cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004048:	4813      	ldr	r0, [pc, #76]	; (8004098 <prvCheckForValidListAndQueue+0x68>)
 800404a:	f7fe f8bf 	bl	80021cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <prvCheckForValidListAndQueue+0x6c>)
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <prvCheckForValidListAndQueue+0x64>)
 8004052:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <prvCheckForValidListAndQueue+0x70>)
 8004056:	4a10      	ldr	r2, [pc, #64]	; (8004098 <prvCheckForValidListAndQueue+0x68>)
 8004058:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <prvCheckForValidListAndQueue+0x74>)
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <prvCheckForValidListAndQueue+0x78>)
 8004062:	2110      	movs	r1, #16
 8004064:	200a      	movs	r0, #10
 8004066:	f7fe f9cd 	bl	8002404 <xQueueGenericCreateStatic>
 800406a:	4603      	mov	r3, r0
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <prvCheckForValidListAndQueue+0x60>)
 800406e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <prvCheckForValidListAndQueue+0x60>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <prvCheckForValidListAndQueue+0x60>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	490b      	ldr	r1, [pc, #44]	; (80040ac <prvCheckForValidListAndQueue+0x7c>)
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fde6 	bl	8002c50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004084:	f000 f96e 	bl	8004364 <vPortExitCritical>
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000ca0 	.word	0x20000ca0
 8004094:	20000c70 	.word	0x20000c70
 8004098:	20000c84 	.word	0x20000c84
 800409c:	20000c98 	.word	0x20000c98
 80040a0:	20000c9c 	.word	0x20000c9c
 80040a4:	20000d4c 	.word	0x20000d4c
 80040a8:	20000cac 	.word	0x20000cac
 80040ac:	0800475c 	.word	0x0800475c

080040b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b04      	subs	r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b04      	subs	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e0:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <pxPortInitialiseStack+0x64>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b14      	subs	r3, #20
 80040ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b04      	subs	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f06f 0202 	mvn.w	r2, #2
 80040fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b20      	subs	r3, #32
 8004104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	08004119 	.word	0x08004119

08004118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <prvTaskExitError+0x54>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d00a      	beq.n	8004142 <prvTaskExitError+0x2a>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <prvTaskExitError+0x28>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60bb      	str	r3, [r7, #8]
}
 8004154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004156:	bf00      	nop
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0fc      	beq.n	8004158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	2000000c 	.word	0x2000000c

08004170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <pxCurrentTCBConst2>)
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	f380 8809 	msr	PSP, r0
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	4770      	bx	lr
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst2>:
 8004190:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004198:	4808      	ldr	r0, [pc, #32]	; (80041bc <prvPortStartFirstTask+0x24>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8814 	msr	CONTROL, r0
 80041aa:	b662      	cpsie	i
 80041ac:	b661      	cpsie	f
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	df00      	svc	0
 80041b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ba:	bf00      	nop
 80041bc:	e000ed08 	.word	0xe000ed08

080041c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <xPortStartScheduler+0x120>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a46      	ldr	r2, [pc, #280]	; (80042e4 <xPortStartScheduler+0x124>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10a      	bne.n	80041e6 <xPortStartScheduler+0x26>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	613b      	str	r3, [r7, #16]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <xPortStartScheduler+0x120>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3f      	ldr	r2, [pc, #252]	; (80042e8 <xPortStartScheduler+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10a      	bne.n	8004206 <xPortStartScheduler+0x46>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60fb      	str	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <xPortStartScheduler+0x12c>)
 8004208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <xPortStartScheduler+0x130>)
 800422c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <xPortStartScheduler+0x134>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004234:	e009      	b.n	800424a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <xPortStartScheduler+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <xPortStartScheduler+0x134>)
 800423e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d0ef      	beq.n	8004236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004256:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <xPortStartScheduler+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	d00a      	beq.n	8004278 <xPortStartScheduler+0xb8>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <xPortStartScheduler+0x134>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <xPortStartScheduler+0x134>)
 8004280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <xPortStartScheduler+0x134>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <xPortStartScheduler+0x134>)
 800428c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <xPortStartScheduler+0x138>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <xPortStartScheduler+0x138>)
 800429c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <xPortStartScheduler+0x138>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <xPortStartScheduler+0x138>)
 80042a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042ae:	f000 f8dd 	bl	800446c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <xPortStartScheduler+0x13c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042b8:	f000 f8fc 	bl	80044b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <xPortStartScheduler+0x140>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <xPortStartScheduler+0x140>)
 80042c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042c8:	f7ff ff66 	bl	8004198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042cc:	f7ff f856 	bl	800337c <vTaskSwitchContext>
	prvTaskExitError();
 80042d0:	f7ff ff22 	bl	8004118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	410fc271 	.word	0x410fc271
 80042e8:	410fc270 	.word	0x410fc270
 80042ec:	e000e400 	.word	0xe000e400
 80042f0:	20000d9c 	.word	0x20000d9c
 80042f4:	20000da0 	.word	0x20000da0
 80042f8:	e000ed20 	.word	0xe000ed20
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	e000ef34 	.word	0xe000ef34

08004304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <vPortEnterCritical+0x58>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <vPortEnterCritical+0x58>)
 8004326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <vPortEnterCritical+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10f      	bne.n	8004350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortEnterCritical+0x5c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <vPortEnterCritical+0x4c>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortEnterCritical+0x4a>
	}
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	2000000c 	.word	0x2000000c
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <vPortExitCritical+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vPortExitCritical+0x24>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <vPortExitCritical+0x50>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3b01      	subs	r3, #1
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vPortExitCritical+0x50>)
 8004390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vPortExitCritical+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <vPortExitCritical+0x42>
 800439a:	2300      	movs	r3, #0
 800439c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f383 8811 	msr	BASEPRI, r3
}
 80043a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000000c 	.word	0x2000000c
	...

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7fe ffc4 	bl	800337c <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004442:	f7fe fee1 	bl	8003208 <xTaskIncrementTick>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <xPortSysTickHandler+0x40>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
}
 800445e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortSetupTimerInterrupt+0x34>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <vPortSetupTimerInterrupt+0x38>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <vPortSetupTimerInterrupt+0x3c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <vPortSetupTimerInterrupt+0x40>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <vPortSetupTimerInterrupt+0x44>)
 800448a:	3b01      	subs	r3, #1
 800448c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <vPortSetupTimerInterrupt+0x34>)
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000e010 	.word	0xe000e010
 80044a4:	e000e018 	.word	0xe000e018
 80044a8:	20000000 	.word	0x20000000
 80044ac:	10624dd3 	.word	0x10624dd3
 80044b0:	e000e014 	.word	0xe000e014

080044b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044c4 <vPortEnableVFP+0x10>
 80044b8:	6801      	ldr	r1, [r0, #0]
 80044ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044be:	6001      	str	r1, [r0, #0]
 80044c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044c2:	bf00      	nop
 80044c4:	e000ed88 	.word	0xe000ed88

080044c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ce:	f3ef 8305 	mrs	r3, IPSR
 80044d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d914      	bls.n	8004504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <vPortValidateInterruptPriority+0x70>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <vPortValidateInterruptPriority+0x74>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	7afa      	ldrb	r2, [r7, #11]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20a      	bcs.n	8004504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <vPortValidateInterruptPriority+0x78>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <vPortValidateInterruptPriority+0x7c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d90a      	bls.n	800452a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	603b      	str	r3, [r7, #0]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <vPortValidateInterruptPriority+0x60>
	}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e3f0 	.word	0xe000e3f0
 800453c:	20000d9c 	.word	0x20000d9c
 8004540:	e000ed0c 	.word	0xe000ed0c
 8004544:	20000da0 	.word	0x20000da0

08004548 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d04d      	beq.n	80045f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800455a:	2308      	movs	r3, #8
 800455c:	425b      	negs	r3, r3
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <vPortFree+0xb8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <vPortFree+0x44>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60fb      	str	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <vPortFree+0x62>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60bb      	str	r3, [r7, #8]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <vPortFree+0xb8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01e      	beq.n	80045f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11a      	bne.n	80045f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <vPortFree+0xb8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045d0:	f7fe fd5e 	bl	8003090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <vPortFree+0xbc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <vPortFree+0xbc>)
 80045e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045e2:	6938      	ldr	r0, [r7, #16]
 80045e4:	f000 f812 	bl	800460c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <vPortFree+0xc0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a06      	ldr	r2, [pc, #24]	; (8004608 <vPortFree+0xc0>)
 80045f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045f2:	f7fe fd5b 	bl	80030ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000db8 	.word	0x20000db8
 8004604:	20000db0 	.word	0x20000db0
 8004608:	20000db4 	.word	0x20000db4

0800460c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <prvInsertBlockIntoFreeList+0xac>)
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e002      	b.n	8004620 <prvInsertBlockIntoFreeList+0x14>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d8f7      	bhi.n	800461a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d108      	bne.n	800464e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	441a      	add	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d118      	bne.n	8004694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <prvInsertBlockIntoFreeList+0xb0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d00d      	beq.n	800468a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	e008      	b.n	800469c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <prvInsertBlockIntoFreeList+0xb0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e003      	b.n	800469c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d002      	beq.n	80046aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000da4 	.word	0x20000da4
 80046bc:	20000dac 	.word	0x20000dac

080046c0 <__libc_init_array>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4d0d      	ldr	r5, [pc, #52]	; (80046f8 <__libc_init_array+0x38>)
 80046c4:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <__libc_init_array+0x3c>)
 80046c6:	1b64      	subs	r4, r4, r5
 80046c8:	10a4      	asrs	r4, r4, #2
 80046ca:	2600      	movs	r6, #0
 80046cc:	42a6      	cmp	r6, r4
 80046ce:	d109      	bne.n	80046e4 <__libc_init_array+0x24>
 80046d0:	4d0b      	ldr	r5, [pc, #44]	; (8004700 <__libc_init_array+0x40>)
 80046d2:	4c0c      	ldr	r4, [pc, #48]	; (8004704 <__libc_init_array+0x44>)
 80046d4:	f000 f82e 	bl	8004734 <_init>
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	2600      	movs	r6, #0
 80046de:	42a6      	cmp	r6, r4
 80046e0:	d105      	bne.n	80046ee <__libc_init_array+0x2e>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e8:	4798      	blx	r3
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7ee      	b.n	80046cc <__libc_init_array+0xc>
 80046ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f2:	4798      	blx	r3
 80046f4:	3601      	adds	r6, #1
 80046f6:	e7f2      	b.n	80046de <__libc_init_array+0x1e>
 80046f8:	08004784 	.word	0x08004784
 80046fc:	08004784 	.word	0x08004784
 8004700:	08004784 	.word	0x08004784
 8004704:	08004788 	.word	0x08004788

08004708 <memcpy>:
 8004708:	440a      	add	r2, r1
 800470a:	4291      	cmp	r1, r2
 800470c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	4770      	bx	lr
 8004714:	b510      	push	{r4, lr}
 8004716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471e:	4291      	cmp	r1, r2
 8004720:	d1f9      	bne.n	8004716 <memcpy+0xe>
 8004722:	bd10      	pop	{r4, pc}

08004724 <memset>:
 8004724:	4402      	add	r2, r0
 8004726:	4603      	mov	r3, r0
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <memset+0xa>
 800472c:	4770      	bx	lr
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <memset+0x4>

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
