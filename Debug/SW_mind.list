
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800498c  0800498c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004994  08004994  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e04  20000010  080049ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e14  080049ac  00020e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148f4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003083  00000000  00000000  00034934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000379b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00038a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e93  00000000  00000000  00039a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413c  00000000  00000000  0003d8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36b7  00000000  00000000  000519ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001250b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044cc  00000000  00000000  00125108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004944 	.word	0x08004944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004944 	.word	0x08004944

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a25      	ldr	r2, [pc, #148]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <MX_GPIO_Init+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <MX_GPIO_Init+0xd0>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MX_GPIO_Init+0xd4>)
 80005b0:	f000 fd16 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_GPIO_Init+0xd8>)
 80005cc:	f000 fb74 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_GPIO_Init+0xd4>)
 80005e8:	f000 fb66 	bl	8000cb8 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40020800 	.word	0x40020800

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fa00 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f80e 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ff8a 	bl	8000524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f95e 	bl	80008d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000614:	f000 f87c 	bl	8000710 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000618:	f001 fe62 	bl	80022e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800061c:	f7ff ff7a 	bl	8000514 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000620:	f001 fe82 	bl	8002328 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x24>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f97c 	bl	8004934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <SystemClock_Config+0xd4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a22      	ldr	r2, [pc, #136]	; (8000700 <SystemClock_Config+0xd8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fff6 	bl	80016a8 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c2:	f000 f81f 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc96 	bl	8001014 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ee:	f000 f809 	bl	8000704 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2228      	movs	r2, #40	; 0x28
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f001 fa3f 	bl	8001be4 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f7ff ffca 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000002c 	.word	0x2000002c
 8000778:	40013000 	.word	0x40013000

0800077c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_SPI_MspInit+0x84>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d12b      	bne.n	80007f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_SPI_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007d6:	23e0      	movs	r3, #224	; 0xe0
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f000 fa61 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40013000 	.word	0x40013000
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_MspInit+0x54>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_MspInit+0x54>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 fa08 	bl	8000c66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f90a 	bl	8000aac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000898:	f003 f8e4 	bl	8003a64 <xTaskGetSchedulerState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d001      	beq.n	80008a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008a2:	f003 fec9 	bl	8004638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f001 f9f5 	bl	8001cf6 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f7ff fef7 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000084 	.word	0x20000084
 8000920:	40004400 	.word	0x40004400

08000924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f000 f98d 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009de:	f7ff ff65 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 ff75 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fe0b 	bl	8000600 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f8:	0800499c 	.word	0x0800499c
  ldr r2, =_sbss
 80009fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a00:	20000e14 	.word	0x20000e14

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f90d 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fee6 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f917 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f8ed 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000c8 	.word	0x200000c8

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000c8 	.word	0x200000c8

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff47 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff5c 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffb0 	bl	8000c0c <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e165      	b.n	8000fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8154 	bne.w	8000f9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80ae 	beq.w	8000f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5a      	ldr	r3, [pc, #360]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d025      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01f      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x206>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x202>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae96 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0cc      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001028:	4b68      	ldr	r3, [pc, #416]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d90c      	bls.n	8001050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001036:	4b65      	ldr	r3, [pc, #404]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d001      	beq.n	8001050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0b8      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001080:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800108a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	494d      	ldr	r1, [pc, #308]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d044      	beq.n	8001134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d119      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e07f      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d003      	beq.n	80010d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d107      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e06f      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e067      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f023 0203 	bic.w	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4934      	ldr	r1, [pc, #208]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001104:	f7ff fce6 	bl	8000ad4 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	e00a      	b.n	8001122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fce2 	bl	8000ad4 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f241 3288 	movw	r2, #5000	; 0x1388
 800111a:	4293      	cmp	r3, r2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e04f      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 020c 	and.w	r2, r3, #12
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	429a      	cmp	r2, r3
 8001132:	d1eb      	bne.n	800110c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d20c      	bcs.n	800115c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e032      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4916      	ldr	r1, [pc, #88]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	490e      	ldr	r1, [pc, #56]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800119a:	f000 f855 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	490a      	ldr	r1, [pc, #40]	; (80011d4 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	5ccb      	ldrb	r3, [r1, r3]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1c8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fc46 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00
 80011d0:	40023800 	.word	0x40023800
 80011d4:	08004974 	.word	0x08004974
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000000 	.word	0x20000000

080011f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011fc:	f7ff fff0 	bl	80011e0 <HAL_RCC_GetHCLKFreq>
 8001200:	4602      	mov	r2, r0
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	0a9b      	lsrs	r3, r3, #10
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	4903      	ldr	r1, [pc, #12]	; (800121c <HAL_RCC_GetPCLK1Freq+0x24>)
 800120e:	5ccb      	ldrb	r3, [r1, r3]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	08004984 	.word	0x08004984

08001220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001224:	f7ff ffdc 	bl	80011e0 <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	0b5b      	lsrs	r3, r3, #13
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	4903      	ldr	r1, [pc, #12]	; (8001244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	08004984 	.word	0x08004984

08001248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b0ae      	sub	sp, #184	; 0xb8
 800124e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800126e:	4bcb      	ldr	r3, [pc, #812]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b0c      	cmp	r3, #12
 8001278:	f200 8206 	bhi.w	8001688 <HAL_RCC_GetSysClockFreq+0x440>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012b9 	.word	0x080012b9
 8001288:	08001689 	.word	0x08001689
 800128c:	08001689 	.word	0x08001689
 8001290:	08001689 	.word	0x08001689
 8001294:	080012c1 	.word	0x080012c1
 8001298:	08001689 	.word	0x08001689
 800129c:	08001689 	.word	0x08001689
 80012a0:	08001689 	.word	0x08001689
 80012a4:	080012c9 	.word	0x080012c9
 80012a8:	08001689 	.word	0x08001689
 80012ac:	08001689 	.word	0x08001689
 80012b0:	08001689 	.word	0x08001689
 80012b4:	080014b9 	.word	0x080014b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b8:	4bb9      	ldr	r3, [pc, #740]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80012ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80012be:	e1e7      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4bb8      	ldr	r3, [pc, #736]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012c6:	e1e3      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c8:	4bb4      	ldr	r3, [pc, #720]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d4:	4bb1      	ldr	r3, [pc, #708]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d071      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e0:	4bae      	ldr	r3, [pc, #696]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001306:	4622      	mov	r2, r4
 8001308:	462b      	mov	r3, r5
 800130a:	f04f 0000 	mov.w	r0, #0
 800130e:	f04f 0100 	mov.w	r1, #0
 8001312:	0159      	lsls	r1, r3, #5
 8001314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001318:	0150      	lsls	r0, r2, #5
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4621      	mov	r1, r4
 8001320:	1a51      	subs	r1, r2, r1
 8001322:	6439      	str	r1, [r7, #64]	; 0x40
 8001324:	4629      	mov	r1, r5
 8001326:	eb63 0301 	sbc.w	r3, r3, r1
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001338:	4649      	mov	r1, r9
 800133a:	018b      	lsls	r3, r1, #6
 800133c:	4641      	mov	r1, r8
 800133e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001342:	4641      	mov	r1, r8
 8001344:	018a      	lsls	r2, r1, #6
 8001346:	4641      	mov	r1, r8
 8001348:	1a51      	subs	r1, r2, r1
 800134a:	63b9      	str	r1, [r7, #56]	; 0x38
 800134c:	4649      	mov	r1, r9
 800134e:	eb63 0301 	sbc.w	r3, r3, r1
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001360:	4649      	mov	r1, r9
 8001362:	00cb      	lsls	r3, r1, #3
 8001364:	4641      	mov	r1, r8
 8001366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800136a:	4641      	mov	r1, r8
 800136c:	00ca      	lsls	r2, r1, #3
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	4603      	mov	r3, r0
 8001374:	4622      	mov	r2, r4
 8001376:	189b      	adds	r3, r3, r2
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
 800137a:	462b      	mov	r3, r5
 800137c:	460a      	mov	r2, r1
 800137e:	eb42 0303 	adc.w	r3, r2, r3
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001390:	4629      	mov	r1, r5
 8001392:	024b      	lsls	r3, r1, #9
 8001394:	4621      	mov	r1, r4
 8001396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800139a:	4621      	mov	r1, r4
 800139c:	024a      	lsls	r2, r1, #9
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013a6:	2200      	movs	r2, #0
 80013a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013b4:	f7fe ff2c 	bl	8000210 <__aeabi_uldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4613      	mov	r3, r2
 80013be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013c2:	e067      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	4b75      	ldr	r3, [pc, #468]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	2200      	movs	r2, #0
 80013cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80013d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80013de:	2300      	movs	r3, #0
 80013e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80013e6:	4622      	mov	r2, r4
 80013e8:	462b      	mov	r3, r5
 80013ea:	f04f 0000 	mov.w	r0, #0
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	0159      	lsls	r1, r3, #5
 80013f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f8:	0150      	lsls	r0, r2, #5
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4621      	mov	r1, r4
 8001400:	1a51      	subs	r1, r2, r1
 8001402:	62b9      	str	r1, [r7, #40]	; 0x28
 8001404:	4629      	mov	r1, r5
 8001406:	eb63 0301 	sbc.w	r3, r3, r1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001418:	4649      	mov	r1, r9
 800141a:	018b      	lsls	r3, r1, #6
 800141c:	4641      	mov	r1, r8
 800141e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001422:	4641      	mov	r1, r8
 8001424:	018a      	lsls	r2, r1, #6
 8001426:	4641      	mov	r1, r8
 8001428:	ebb2 0a01 	subs.w	sl, r2, r1
 800142c:	4649      	mov	r1, r9
 800142e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800143e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001446:	4692      	mov	sl, r2
 8001448:	469b      	mov	fp, r3
 800144a:	4623      	mov	r3, r4
 800144c:	eb1a 0303 	adds.w	r3, sl, r3
 8001450:	623b      	str	r3, [r7, #32]
 8001452:	462b      	mov	r3, r5
 8001454:	eb4b 0303 	adc.w	r3, fp, r3
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001466:	4629      	mov	r1, r5
 8001468:	028b      	lsls	r3, r1, #10
 800146a:	4621      	mov	r1, r4
 800146c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001470:	4621      	mov	r1, r4
 8001472:	028a      	lsls	r2, r1, #10
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800147c:	2200      	movs	r2, #0
 800147e:	673b      	str	r3, [r7, #112]	; 0x70
 8001480:	677a      	str	r2, [r7, #116]	; 0x74
 8001482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001486:	f7fe fec3 	bl	8000210 <__aeabi_uldivmod>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4613      	mov	r3, r2
 8001490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80014a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014b6:	e0eb      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d06b      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	2200      	movs	r2, #0
 80014d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80014da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e2:	663b      	str	r3, [r7, #96]	; 0x60
 80014e4:	2300      	movs	r3, #0
 80014e6:	667b      	str	r3, [r7, #100]	; 0x64
 80014e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014ec:	4622      	mov	r2, r4
 80014ee:	462b      	mov	r3, r5
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	f04f 0100 	mov.w	r1, #0
 80014f8:	0159      	lsls	r1, r3, #5
 80014fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014fe:	0150      	lsls	r0, r2, #5
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4621      	mov	r1, r4
 8001506:	1a51      	subs	r1, r2, r1
 8001508:	61b9      	str	r1, [r7, #24]
 800150a:	4629      	mov	r1, r5
 800150c:	eb63 0301 	sbc.w	r3, r3, r1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800151e:	4659      	mov	r1, fp
 8001520:	018b      	lsls	r3, r1, #6
 8001522:	4651      	mov	r1, sl
 8001524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001528:	4651      	mov	r1, sl
 800152a:	018a      	lsls	r2, r1, #6
 800152c:	4651      	mov	r1, sl
 800152e:	ebb2 0801 	subs.w	r8, r2, r1
 8001532:	4659      	mov	r1, fp
 8001534:	eb63 0901 	sbc.w	r9, r3, r1
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800154c:	4690      	mov	r8, r2
 800154e:	4699      	mov	r9, r3
 8001550:	4623      	mov	r3, r4
 8001552:	eb18 0303 	adds.w	r3, r8, r3
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	462b      	mov	r3, r5
 800155a:	eb49 0303 	adc.w	r3, r9, r3
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800156c:	4629      	mov	r1, r5
 800156e:	024b      	lsls	r3, r1, #9
 8001570:	4621      	mov	r1, r4
 8001572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001576:	4621      	mov	r1, r4
 8001578:	024a      	lsls	r2, r1, #9
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001582:	2200      	movs	r2, #0
 8001584:	65bb      	str	r3, [r7, #88]	; 0x58
 8001586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800158c:	f7fe fe40 	bl	8000210 <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800159a:	e065      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x420>
 800159c:	40023800 	.word	0x40023800
 80015a0:	00f42400 	.word	0x00f42400
 80015a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a8:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	2200      	movs	r2, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	4611      	mov	r1, r2
 80015b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015b8:	653b      	str	r3, [r7, #80]	; 0x50
 80015ba:	2300      	movs	r3, #0
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
 80015be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015c2:	4642      	mov	r2, r8
 80015c4:	464b      	mov	r3, r9
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	0159      	lsls	r1, r3, #5
 80015d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d4:	0150      	lsls	r0, r2, #5
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4641      	mov	r1, r8
 80015dc:	1a51      	subs	r1, r2, r1
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	4649      	mov	r1, r9
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015f4:	4659      	mov	r1, fp
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	4651      	mov	r1, sl
 80015fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fe:	4651      	mov	r1, sl
 8001600:	018a      	lsls	r2, r1, #6
 8001602:	4651      	mov	r1, sl
 8001604:	1a54      	subs	r4, r2, r1
 8001606:	4659      	mov	r1, fp
 8001608:	eb63 0501 	sbc.w	r5, r3, r1
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	00eb      	lsls	r3, r5, #3
 8001616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161a:	00e2      	lsls	r2, r4, #3
 800161c:	4614      	mov	r4, r2
 800161e:	461d      	mov	r5, r3
 8001620:	4643      	mov	r3, r8
 8001622:	18e3      	adds	r3, r4, r3
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	464b      	mov	r3, r9
 8001628:	eb45 0303 	adc.w	r3, r5, r3
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800163a:	4629      	mov	r1, r5
 800163c:	028b      	lsls	r3, r1, #10
 800163e:	4621      	mov	r1, r4
 8001640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001644:	4621      	mov	r1, r4
 8001646:	028a      	lsls	r2, r1, #10
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001650:	2200      	movs	r2, #0
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
 8001654:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800165a:	f7fe fdd9 	bl	8000210 <__aeabi_uldivmod>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4613      	mov	r3, r2
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0f1b      	lsrs	r3, r3, #28
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800167a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001686:	e003      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800168e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001694:	4618      	mov	r0, r3
 8001696:	37b8      	adds	r7, #184	; 0xb8
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400

080016a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e28d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8083 	beq.w	80017ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016c8:	4b94      	ldr	r3, [pc, #592]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d019      	beq.n	8001708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d4:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x124>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e25a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x90>
 800172a:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7b      	ldr	r2, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xcc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xb4>
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a75      	ldr	r2, [pc, #468]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a72      	ldr	r2, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xcc>
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6b      	ldr	r2, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff f9aa 	bl	8000ad4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff f9a6 	bl	8000ad4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e21f      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xdc>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f996 	bl	8000ad4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff f992 	bl	8000ad4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e20b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x104>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06f      	beq.n	80018ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d017      	beq.n	8001816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x186>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1d3      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4937      	ldr	r1, [pc, #220]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x278>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f93f 	bl	8000ad4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff f93b 	bl	8000ad4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1b4      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4925      	ldr	r1, [pc, #148]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_OscConfig+0x278>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff f91e 	bl	8000ad4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f91a 	bl	8000ad4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e193      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d036      	beq.n	8001934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff f8fe 	bl	8000ad4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff f8fa 	bl	8000ad4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e173      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x234>
 80018fa:	e01b      	b.n	8001934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x27c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff f8e7 	bl	8000ad4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	e00e      	b.n	8001928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff f8e3 	bl	8000ad4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d907      	bls.n	8001928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e15c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
 800191c:	40023800 	.word	0x40023800
 8001920:	42470000 	.word	0x42470000
 8001924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ea      	bne.n	800190a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8097 	beq.w	8001a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a7e      	ldr	r2, [pc, #504]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff f8a3 	bl	8000ad4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff f89f 	bl	8000ad4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e118      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x31e>
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x358>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x340>
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0x358>
 80019e8:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a59      	ldr	r2, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	4b57      	ldr	r3, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	f023 0304 	bic.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d015      	beq.n	8001a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f864 	bl	8000ad4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f860 	bl	8000ad4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0d7      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0ee      	beq.n	8001a10 <HAL_RCC_OscConfig+0x368>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f84e 	bl	8000ad4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f84a 	bl	8000ad4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0c1      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ee      	bne.n	8001a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ad 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d060      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d145      	bne.n	8001b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f81e 	bl	8000ad4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f81a 	bl	8000ad4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e093      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	019b      	lsls	r3, r3, #6
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	071b      	lsls	r3, r3, #28
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7fe ffef 	bl	8000ad4 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7fe ffeb 	bl	8000ad4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e064      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x452>
 8001b18:	e05c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7fe ffd8 	bl	8000ad4 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe ffd4 	bl	8000ad4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x480>
 8001b46:	e045      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e040      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x538>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d030      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d129      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d122      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d119      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d10f      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07b      	b.n	8001cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c06:	d009      	beq.n	8001c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fda0 	bl	800077c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	ea42 0103 	orr.w	r1, r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0104 	and.w	r1, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0210 	and.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e03f      	b.n	8001d88 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe fe01 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2224      	movs	r2, #36	; 0x24
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f828 	bl	8001d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d94:	b0c0      	sub	sp, #256	; 0x100
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dac:	68d9      	ldr	r1, [r3, #12]
 8001dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	ea40 0301 	orr.w	r3, r0, r1
 8001db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001de8:	f021 010c 	bic.w	r1, r1, #12
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001df6:	430b      	orrs	r3, r1
 8001df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0a:	6999      	ldr	r1, [r3, #24]
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	ea40 0301 	orr.w	r3, r0, r1
 8001e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b8f      	ldr	r3, [pc, #572]	; (800205c <UART_SetConfig+0x2cc>)
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d005      	beq.n	8001e30 <UART_SetConfig+0xa0>
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b8d      	ldr	r3, [pc, #564]	; (8002060 <UART_SetConfig+0x2d0>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d104      	bne.n	8001e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e30:	f7ff f9f6 	bl	8001220 <HAL_RCC_GetPCLK2Freq>
 8001e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e38:	e003      	b.n	8001e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e3a:	f7ff f9dd 	bl	80011f8 <HAL_RCC_GetPCLK1Freq>
 8001e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4c:	f040 810c 	bne.w	8002068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e62:	4622      	mov	r2, r4
 8001e64:	462b      	mov	r3, r5
 8001e66:	1891      	adds	r1, r2, r2
 8001e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e6a:	415b      	adcs	r3, r3
 8001e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e72:	4621      	mov	r1, r4
 8001e74:	eb12 0801 	adds.w	r8, r2, r1
 8001e78:	4629      	mov	r1, r5
 8001e7a:	eb43 0901 	adc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	eb49 0303 	adc.w	r3, r9, r3
 8001ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	18db      	adds	r3, r3, r3
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	eb42 0303 	adc.w	r3, r2, r3
 8001eca:	657b      	str	r3, [r7, #84]	; 0x54
 8001ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ed4:	f7fe f99c 	bl	8000210 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <UART_SetConfig+0x2d4>)
 8001ede:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	011c      	lsls	r4, r3, #4
 8001ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	1891      	adds	r1, r2, r2
 8001efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f00:	415b      	adcs	r3, r3
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f08:	4641      	mov	r1, r8
 8001f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f0e:	4649      	mov	r1, r9
 8001f10:	eb43 0b01 	adc.w	fp, r3, r1
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f28:	4692      	mov	sl, r2
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8001f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f36:	464b      	mov	r3, r9
 8001f38:	eb4b 0303 	adc.w	r3, fp, r3
 8001f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f54:	460b      	mov	r3, r1
 8001f56:	18db      	adds	r3, r3, r3
 8001f58:	643b      	str	r3, [r7, #64]	; 0x40
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	eb42 0303 	adc.w	r3, r2, r3
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f6a:	f7fe f951 	bl	8000210 <__aeabi_uldivmod>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <UART_SetConfig+0x2d4>)
 8001f76:	fba3 2301 	umull	r2, r3, r3, r1
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2264      	movs	r2, #100	; 0x64
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	1acb      	subs	r3, r1, r3
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <UART_SetConfig+0x2d4>)
 8001f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f98:	441c      	add	r4, r3
 8001f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001fac:	4642      	mov	r2, r8
 8001fae:	464b      	mov	r3, r9
 8001fb0:	1891      	adds	r1, r2, r2
 8001fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb4:	415b      	adcs	r3, r3
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	1851      	adds	r1, r2, r1
 8001fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	414b      	adcs	r3, r1
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	00cb      	lsls	r3, r1, #3
 8001fd8:	4651      	mov	r1, sl
 8001fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fde:	4651      	mov	r1, sl
 8001fe0:	00ca      	lsls	r2, r1, #3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4642      	mov	r2, r8
 8001fea:	189b      	adds	r3, r3, r2
 8001fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	460a      	mov	r2, r1
 8001ff4:	eb42 0303 	adc.w	r3, r2, r3
 8001ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800200c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002010:	460b      	mov	r3, r1
 8002012:	18db      	adds	r3, r3, r3
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
 8002016:	4613      	mov	r3, r2
 8002018:	eb42 0303 	adc.w	r3, r2, r3
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002026:	f7fe f8f3 	bl	8000210 <__aeabi_uldivmod>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <UART_SetConfig+0x2d4>)
 8002030:	fba3 1302 	umull	r1, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2164      	movs	r1, #100	; 0x64
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	3332      	adds	r3, #50	; 0x32
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <UART_SetConfig+0x2d4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 0207 	and.w	r2, r3, #7
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4422      	add	r2, r4
 8002056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002058:	e105      	b.n	8002266 <UART_SetConfig+0x4d6>
 800205a:	bf00      	nop
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206c:	2200      	movs	r2, #0
 800206e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800207a:	4642      	mov	r2, r8
 800207c:	464b      	mov	r3, r9
 800207e:	1891      	adds	r1, r2, r2
 8002080:	6239      	str	r1, [r7, #32]
 8002082:	415b      	adcs	r3, r3
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800208a:	4641      	mov	r1, r8
 800208c:	1854      	adds	r4, r2, r1
 800208e:	4649      	mov	r1, r9
 8002090:	eb43 0501 	adc.w	r5, r3, r1
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	00eb      	lsls	r3, r5, #3
 800209e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a2:	00e2      	lsls	r2, r4, #3
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	4643      	mov	r3, r8
 80020aa:	18e3      	adds	r3, r4, r3
 80020ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020b0:	464b      	mov	r3, r9
 80020b2:	eb45 0303 	adc.w	r3, r5, r3
 80020b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020d6:	4629      	mov	r1, r5
 80020d8:	008b      	lsls	r3, r1, #2
 80020da:	4621      	mov	r1, r4
 80020dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020e0:	4621      	mov	r1, r4
 80020e2:	008a      	lsls	r2, r1, #2
 80020e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020e8:	f7fe f892 	bl	8000210 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4b60      	ldr	r3, [pc, #384]	; (8002274 <UART_SetConfig+0x4e4>)
 80020f2:	fba3 2302 	umull	r2, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	011c      	lsls	r4, r3, #4
 80020fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800210c:	4642      	mov	r2, r8
 800210e:	464b      	mov	r3, r9
 8002110:	1891      	adds	r1, r2, r2
 8002112:	61b9      	str	r1, [r7, #24]
 8002114:	415b      	adcs	r3, r3
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211c:	4641      	mov	r1, r8
 800211e:	1851      	adds	r1, r2, r1
 8002120:	6139      	str	r1, [r7, #16]
 8002122:	4649      	mov	r1, r9
 8002124:	414b      	adcs	r3, r1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002134:	4659      	mov	r1, fp
 8002136:	00cb      	lsls	r3, r1, #3
 8002138:	4651      	mov	r1, sl
 800213a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213e:	4651      	mov	r1, sl
 8002140:	00ca      	lsls	r2, r1, #3
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	4603      	mov	r3, r0
 8002148:	4642      	mov	r2, r8
 800214a:	189b      	adds	r3, r3, r2
 800214c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002150:	464b      	mov	r3, r9
 8002152:	460a      	mov	r2, r1
 8002154:	eb42 0303 	adc.w	r3, r2, r3
 8002158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	67bb      	str	r3, [r7, #120]	; 0x78
 8002166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002174:	4649      	mov	r1, r9
 8002176:	008b      	lsls	r3, r1, #2
 8002178:	4641      	mov	r1, r8
 800217a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800217e:	4641      	mov	r1, r8
 8002180:	008a      	lsls	r2, r1, #2
 8002182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002186:	f7fe f843 	bl	8000210 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <UART_SetConfig+0x4e4>)
 8002190:	fba3 1302 	umull	r1, r3, r3, r2
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	2164      	movs	r1, #100	; 0x64
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	3332      	adds	r3, #50	; 0x32
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <UART_SetConfig+0x4e4>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ae:	441c      	add	r4, r3
 80021b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b4:	2200      	movs	r2, #0
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
 80021b8:	677a      	str	r2, [r7, #116]	; 0x74
 80021ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80021be:	4642      	mov	r2, r8
 80021c0:	464b      	mov	r3, r9
 80021c2:	1891      	adds	r1, r2, r2
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	415b      	adcs	r3, r3
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ce:	4641      	mov	r1, r8
 80021d0:	1851      	adds	r1, r2, r1
 80021d2:	6039      	str	r1, [r7, #0]
 80021d4:	4649      	mov	r1, r9
 80021d6:	414b      	adcs	r3, r1
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021e6:	4659      	mov	r1, fp
 80021e8:	00cb      	lsls	r3, r1, #3
 80021ea:	4651      	mov	r1, sl
 80021ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f0:	4651      	mov	r1, sl
 80021f2:	00ca      	lsls	r2, r1, #3
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	4642      	mov	r2, r8
 80021fc:	189b      	adds	r3, r3, r2
 80021fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002200:	464b      	mov	r3, r9
 8002202:	460a      	mov	r2, r1
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	663b      	str	r3, [r7, #96]	; 0x60
 8002214:	667a      	str	r2, [r7, #100]	; 0x64
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002222:	4649      	mov	r1, r9
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	4641      	mov	r1, r8
 8002228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800222c:	4641      	mov	r1, r8
 800222e:	008a      	lsls	r2, r1, #2
 8002230:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002234:	f7fd ffec 	bl	8000210 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <UART_SetConfig+0x4e4>)
 800223e:	fba3 1302 	umull	r1, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2164      	movs	r1, #100	; 0x64
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a08      	ldr	r2, [pc, #32]	; (8002274 <UART_SetConfig+0x4e4>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4422      	add	r2, r4
 8002264:	609a      	str	r2, [r3, #8]
}
 8002266:	bf00      	nop
 8002268:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800226c:	46bd      	mov	sp, r7
 800226e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002272:	bf00      	nop
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <__NVIC_SetPriority>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80022d0:	2100      	movs	r1, #0
 80022d2:	f06f 0004 	mvn.w	r0, #4
 80022d6:	f7ff ffcf 	bl	8002278 <__NVIC_SetPriority>
#endif
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e6:	f3ef 8305 	mrs	r3, IPSR
 80022ea:	603b      	str	r3, [r7, #0]
  return(result);
 80022ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022f2:	f06f 0305 	mvn.w	r3, #5
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	e00c      	b.n	8002314 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <osKernelInitialize+0x44>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <osKernelInitialize+0x44>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	e002      	b.n	8002314 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200000cc 	.word	0x200000cc

08002328 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800232e:	f3ef 8305 	mrs	r3, IPSR
 8002332:	603b      	str	r3, [r7, #0]
  return(result);
 8002334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <osKernelStart+0x1a>
    stat = osErrorISR;
 800233a:	f06f 0305 	mvn.w	r3, #5
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	e010      	b.n	8002364 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <osKernelStart+0x48>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d109      	bne.n	800235e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800234a:	f7ff ffbf 	bl	80022cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <osKernelStart+0x48>)
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002354:	f000 ff3e 	bl	80031d4 <vTaskStartScheduler>
      stat = osOK;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	e002      	b.n	8002364 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200000cc 	.word	0x200000cc

08002374 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002384:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <vApplicationGetIdleTaskMemory+0x30>)
 800238a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200000d0 	.word	0x200000d0
 80023a4:	2000012c 	.word	0x2000012c

080023a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80023b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <vApplicationGetTimerTaskMemory+0x30>)
 80023be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	2000032c 	.word	0x2000032c
 80023d8:	20000388 	.word	0x20000388

080023dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0208 	add.w	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f103 0208 	add.w	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0208 	add.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d103      	bne.n	800249e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e00c      	b.n	80024b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3308      	adds	r3, #8
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e002      	b.n	80024ac <vListInsert+0x2e>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d2f6      	bcs.n	80024a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6892      	ldr	r2, [r2, #8]
 8002506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6852      	ldr	r2, [r2, #4]
 8002510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	d103      	bne.n	8002524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1e5a      	subs	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800256e:	f001 ffd1 	bl	8004514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	441a      	add	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	3b01      	subs	r3, #1
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	441a      	add	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d114      	bne.n	80025ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01a      	beq.n	8002602 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3310      	adds	r3, #16
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f889 	bl	80036e8 <xTaskRemoveFromEventList>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <xQueueGenericReset+0xcc>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	e009      	b.n	8002602 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3310      	adds	r3, #16
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fef2 	bl	80023dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3324      	adds	r3, #36	; 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff feed 	bl	80023dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002602:	f001 ffb7 	bl	8004574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <xQueueGenericCreateStatic+0x52>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <xQueueGenericCreateStatic+0x56>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueGenericCreateStatic+0x58>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	623b      	str	r3, [r7, #32]
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <xQueueGenericCreateStatic+0x7e>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <xQueueGenericCreateStatic+0x82>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <xQueueGenericCreateStatic+0x84>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	61fb      	str	r3, [r7, #28]
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026b2:	2350      	movs	r3, #80	; 0x50
 80026b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b50      	cmp	r3, #80	; 0x50
 80026ba:	d00a      	beq.n	80026d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	61bb      	str	r3, [r7, #24]
}
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f805 	bl	8002704 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3730      	adds	r7, #48	; 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e002      	b.n	8002726 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002732:	2101      	movs	r1, #1
 8002734:	69b8      	ldr	r0, [r7, #24]
 8002736:	f7ff ff05 	bl	8002544 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericSend+0x32>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <xQueueGenericSend+0x40>
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueGenericSend+0x44>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <xQueueGenericSend+0x46>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <xQueueGenericSend+0x60>
	__asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <xQueueGenericSend+0x6e>
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <xQueueGenericSend+0x72>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericSend+0x74>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericSend+0x8e>
	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
}
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027da:	f001 f943 	bl	8003a64 <xTaskGetSchedulerState>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <xQueueGenericSend+0x9e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <xQueueGenericSend+0xa2>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueGenericSend+0xa4>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueGenericSend+0xbe>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61fb      	str	r3, [r7, #28]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800280a:	f001 fe83 	bl	8004514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <xQueueGenericSend+0xd4>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d129      	bne.n	8002874 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f000 fa0b 	bl	8002c40 <prvCopyDataToQueue>
 800282a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	3324      	adds	r3, #36	; 0x24
 8002838:	4618      	mov	r0, r3
 800283a:	f000 ff55 	bl	80036e8 <xTaskRemoveFromEventList>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002844:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <xQueueGenericSend+0x1f8>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	e00a      	b.n	800286c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <xQueueGenericSend+0x1f8>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800286c:	f001 fe82 	bl	8004574 <vPortExitCritical>
				return pdPASS;
 8002870:	2301      	movs	r3, #1
 8002872:	e063      	b.n	800293c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800287a:	f001 fe7b 	bl	8004574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800287e:	2300      	movs	r3, #0
 8002880:	e05c      	b.n	800293c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4618      	mov	r0, r3
 800288e:	f000 ff8f 	bl	80037b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002892:	2301      	movs	r3, #1
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002896:	f001 fe6d 	bl	8004574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800289a:	f000 fd01 	bl	80032a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800289e:	f001 fe39 	bl	8004514 <vPortEnterCritical>
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <xQueueGenericSend+0x16c>
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d103      	bne.n	80028ce <xQueueGenericSend+0x182>
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ce:	f001 fe51 	bl	8004574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028d2:	1d3a      	adds	r2, r7, #4
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 ff7e 	bl	80037dc <xTaskCheckForTimeOut>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d124      	bne.n	8002930 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e8:	f000 faa2 	bl	8002e30 <prvIsQueueFull>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d018      	beq.n	8002924 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	3310      	adds	r3, #16
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fea4 	bl	8003648 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002902:	f000 fa2d 	bl	8002d60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002906:	f000 fcd9 	bl	80032bc <xTaskResumeAll>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f af7c 	bne.w	800280a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <xQueueGenericSend+0x1f8>)
 8002914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	e772      	b.n	800280a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002926:	f000 fa1b 	bl	8002d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800292a:	f000 fcc7 	bl	80032bc <xTaskResumeAll>
 800292e:	e76c      	b.n	800280a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002932:	f000 fa15 	bl	8002d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002936:	f000 fcc1 	bl	80032bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800293a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800293c:	4618      	mov	r0, r3
 800293e:	3738      	adds	r7, #56	; 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b090      	sub	sp, #64	; 0x40
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <xQueueGenericSendFromISR+0x3c>
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <xQueueGenericSendFromISR+0x40>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <xQueueGenericSendFromISR+0x42>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029a0:	bf00      	nop
 80029a2:	e7fe      	b.n	80029a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d103      	bne.n	80029b2 <xQueueGenericSendFromISR+0x6a>
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <xQueueGenericSendFromISR+0x6e>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <xQueueGenericSendFromISR+0x70>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	623b      	str	r3, [r7, #32]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029d2:	f001 fe81 	bl	80046d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029d6:	f3ef 8211 	mrs	r2, BASEPRI
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	61fa      	str	r2, [r7, #28]
 80029ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <xQueueGenericSendFromISR+0xbc>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d12f      	bne.n	8002a64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a1a:	f000 f911 	bl	8002c40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d112      	bne.n	8002a4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe57 	bl	80036e8 <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e007      	b.n	8002a5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	b25a      	sxtb	r2, r3
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002a62:	e001      	b.n	8002a68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3740      	adds	r7, #64	; 0x40
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <xQueueReceive+0x30>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	623b      	str	r3, [r7, #32]
}
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <xQueueReceive+0x3e>
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueReceive+0x42>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueReceive+0x44>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueReceive+0x5e>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61fb      	str	r3, [r7, #28]
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ade:	f000 ffc1 	bl	8003a64 <xTaskGetSchedulerState>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <xQueueReceive+0x6e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <xQueueReceive+0x72>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueReceive+0x74>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xQueueReceive+0x8e>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	61bb      	str	r3, [r7, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b0e:	f001 fd01 	bl	8004514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01f      	beq.n	8002b5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b22:	f000 f8f7 	bl	8002d14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00f      	beq.n	8002b56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	3310      	adds	r3, #16
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fdd4 	bl	80036e8 <xTaskRemoveFromEventList>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <xQueueReceive+0x1bc>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b56:	f001 fd0d 	bl	8004574 <vPortExitCritical>
				return pdPASS;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e069      	b.n	8002c32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b64:	f001 fd06 	bl	8004574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e062      	b.n	8002c32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fe1a 	bl	80037b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b80:	f001 fcf8 	bl	8004574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b84:	f000 fb8c 	bl	80032a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b88:	f001 fcc4 	bl	8004514 <vPortEnterCritical>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d103      	bne.n	8002ba2 <xQueueReceive+0x122>
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d103      	bne.n	8002bb8 <xQueueReceive+0x138>
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb8:	f001 fcdc 	bl	8004574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bbc:	1d3a      	adds	r2, r7, #4
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fe09 	bl	80037dc <xTaskCheckForTimeOut>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d123      	bne.n	8002c18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd2:	f000 f917 	bl	8002e04 <prvIsQueueEmpty>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d017      	beq.n	8002c0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	3324      	adds	r3, #36	; 0x24
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fd2f 	bl	8003648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bec:	f000 f8b8 	bl	8002d60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bf0:	f000 fb64 	bl	80032bc <xTaskResumeAll>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d189      	bne.n	8002b0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <xQueueReceive+0x1bc>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	e780      	b.n	8002b0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0e:	f000 f8a7 	bl	8002d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c12:	f000 fb53 	bl	80032bc <xTaskResumeAll>
 8002c16:	e77a      	b.n	8002b0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1a:	f000 f8a1 	bl	8002d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1e:	f000 fb4d 	bl	80032bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c24:	f000 f8ee 	bl	8002e04 <prvIsQueueEmpty>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f43f af6f 	beq.w	8002b0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3730      	adds	r7, #48	; 0x30
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d14d      	bne.n	8002d02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 ff18 	bl	8003aa0 <xTaskPriorityDisinherit>
 8002c70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e043      	b.n	8002d02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d119      	bne.n	8002cb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6858      	ldr	r0, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	f001 fe44 	bl	8004918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	441a      	add	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d32b      	bcc.n	8002d02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e026      	b.n	8002d02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68d8      	ldr	r0, [r3, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	f001 fe2a 	bl	8004918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	425b      	negs	r3, r3
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	425b      	negs	r3, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d105      	bne.n	8002d02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	441a      	add	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d303      	bcc.n	8002d48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68d9      	ldr	r1, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	461a      	mov	r2, r3
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	f001 fde0 	bl	8004918 <memcpy>
	}
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d68:	f001 fbd4 	bl	8004514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d74:	e011      	b.n	8002d9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fcb0 	bl	80036e8 <xTaskRemoveFromEventList>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d8e:	f000 fd87 	bl	80038a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dce9      	bgt.n	8002d76 <prvUnlockQueue+0x16>
 8002da2:	e000      	b.n	8002da6 <prvUnlockQueue+0x46>
					break;
 8002da4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dae:	f001 fbe1 	bl	8004574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002db2:	f001 fbaf 	bl	8004514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dbe:	e011      	b.n	8002de4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3310      	adds	r3, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fc8b 	bl	80036e8 <xTaskRemoveFromEventList>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dd8:	f000 fd62 	bl	80038a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dce9      	bgt.n	8002dc0 <prvUnlockQueue+0x60>
 8002dec:	e000      	b.n	8002df0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002df8:	f001 fbbc 	bl	8004574 <vPortExitCritical>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e0c:	f001 fb82 	bl	8004514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e001      	b.n	8002e22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e22:	f001 fba7 	bl	8004574 <vPortExitCritical>

	return xReturn;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e38:	f001 fb6c 	bl	8004514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d102      	bne.n	8002e4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e001      	b.n	8002e52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e52:	f001 fb8f 	bl	8004574 <vPortExitCritical>

	return xReturn;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e014      	b.n	8002e9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <vQueueAddToRegistry+0x50>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <vQueueAddToRegistry+0x50>)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <vQueueAddToRegistry+0x50>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e92:	e006      	b.n	8002ea2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d9e7      	bls.n	8002e70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000788 	.word	0x20000788

08002eb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ec4:	f001 fb26 	bl	8004514 <vPortEnterCritical>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ece:	b25b      	sxtb	r3, r3
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d103      	bne.n	8002ede <vQueueWaitForMessageRestricted+0x2a>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d103      	bne.n	8002ef4 <vQueueWaitForMessageRestricted+0x40>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef4:	f001 fb3e 	bl	8004574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fbc1 	bl	8003690 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7ff ff26 	bl	8002d60 <prvUnlockQueue>
	}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	623b      	str	r3, [r7, #32]
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	61fb      	str	r3, [r7, #28]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f62:	235c      	movs	r3, #92	; 0x5c
 8002f64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b5c      	cmp	r3, #92	; 0x5c
 8002f6a:	d00a      	beq.n	8002f82 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61bb      	str	r3, [r7, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01e      	beq.n	8002fc8 <xTaskCreateStatic+0xac>
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f80b 	bl	8002fd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc2:	f000 f897 	bl	80030f4 <prvAddNewTaskToReadyList>
 8002fc6:	e001      	b.n	8002fcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fcc:	697b      	ldr	r3, [r7, #20]
	}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3728      	adds	r7, #40	; 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	461a      	mov	r2, r3
 8002fee:	21a5      	movs	r1, #165	; 0xa5
 8002ff0:	f001 fca0 	bl	8004934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ffe:	3b01      	subs	r3, #1
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f023 0307 	bic.w	r3, r3, #7
 800300c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	617b      	str	r3, [r7, #20]
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01f      	beq.n	8003074 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e012      	b.n	8003060 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	7819      	ldrb	r1, [r3, #0]
 8003042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	3334      	adds	r3, #52	; 0x34
 800304a:	460a      	mov	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3301      	adds	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b0f      	cmp	r3, #15
 8003064:	d9e9      	bls.n	800303a <prvInitialiseNewTask+0x64>
 8003066:	e000      	b.n	800306a <prvInitialiseNewTask+0x94>
			{
				break;
 8003068:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003072:	e003      	b.n	800307c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2b37      	cmp	r3, #55	; 0x37
 8003080:	d901      	bls.n	8003086 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003082:	2337      	movs	r3, #55	; 0x37
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003090:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2200      	movs	r2, #0
 8003096:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	3304      	adds	r3, #4
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f9bd 	bl	800241c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	3318      	adds	r3, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f9b8 	bl	800241c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	2200      	movs	r2, #0
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	69b8      	ldr	r0, [r7, #24]
 80030d6:	f001 f8f3 	bl	80042c0 <pxPortInitialiseStack>
 80030da:	4602      	mov	r2, r0
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030ec:	bf00      	nop
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030fc:	f001 fa0a 	bl	8004514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <prvAddNewTaskToReadyList+0xc4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <prvAddNewTaskToReadyList+0xc4>)
 8003108:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800310a:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <prvAddNewTaskToReadyList+0xc8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003112:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <prvAddNewTaskToReadyList+0xc8>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <prvAddNewTaskToReadyList+0xc4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d110      	bne.n	8003142 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003120:	f000 fbe2 	bl	80038e8 <prvInitialiseTaskLists>
 8003124:	e00d      	b.n	8003142 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <prvAddNewTaskToReadyList+0xcc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <prvAddNewTaskToReadyList+0xc8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	429a      	cmp	r2, r3
 800313a:	d802      	bhi.n	8003142 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <prvAddNewTaskToReadyList+0xc8>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <prvAddNewTaskToReadyList+0xd0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <prvAddNewTaskToReadyList+0xd0>)
 800314a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <prvAddNewTaskToReadyList+0xd0>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <prvAddNewTaskToReadyList+0xd4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d903      	bls.n	8003168 <prvAddNewTaskToReadyList+0x74>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <prvAddNewTaskToReadyList+0xd4>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <prvAddNewTaskToReadyList+0xd8>)
 8003176:	441a      	add	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff f959 	bl	8002436 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003184:	f001 f9f6 	bl	8004574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <prvAddNewTaskToReadyList+0xcc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <prvAddNewTaskToReadyList+0xc8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	429a      	cmp	r2, r3
 800319c:	d207      	bcs.n	80031ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvAddNewTaskToReadyList+0xdc>)
 80031a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000c9c 	.word	0x20000c9c
 80031bc:	200007c8 	.word	0x200007c8
 80031c0:	20000ca8 	.word	0x20000ca8
 80031c4:	20000cb8 	.word	0x20000cb8
 80031c8:	20000ca4 	.word	0x20000ca4
 80031cc:	200007cc 	.word	0x200007cc
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031e2:	463a      	mov	r2, r7
 80031e4:	1d39      	adds	r1, r7, #4
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f8c2 	bl	8002374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	9202      	str	r2, [sp, #8]
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	460a      	mov	r2, r1
 8003202:	4921      	ldr	r1, [pc, #132]	; (8003288 <vTaskStartScheduler+0xb4>)
 8003204:	4821      	ldr	r0, [pc, #132]	; (800328c <vTaskStartScheduler+0xb8>)
 8003206:	f7ff fe89 	bl	8002f1c <xTaskCreateStatic>
 800320a:	4603      	mov	r3, r0
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <vTaskStartScheduler+0xbc>)
 800320e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <vTaskStartScheduler+0xbc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e001      	b.n	8003222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003228:	f000 fcfc 	bl	8003c24 <xTimerCreateTimerTask>
 800322c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d116      	bne.n	8003262 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	613b      	str	r3, [r7, #16]
}
 8003246:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <vTaskStartScheduler+0xc0>)
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <vTaskStartScheduler+0xc4>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <vTaskStartScheduler+0xc8>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800325c:	f001 f8b8 	bl	80043d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003260:	e00e      	b.n	8003280 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d10a      	bne.n	8003280 <vTaskStartScheduler+0xac>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60fb      	str	r3, [r7, #12]
}
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vTaskStartScheduler+0xaa>
}
 8003280:	bf00      	nop
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0800495c 	.word	0x0800495c
 800328c:	080038b9 	.word	0x080038b9
 8003290:	20000cc0 	.word	0x20000cc0
 8003294:	20000cbc 	.word	0x20000cbc
 8003298:	20000ca8 	.word	0x20000ca8
 800329c:	20000ca0 	.word	0x20000ca0

080032a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <vTaskSuspendAll+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a03      	ldr	r2, [pc, #12]	; (80032b8 <vTaskSuspendAll+0x18>)
 80032ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	20000cc4 	.word	0x20000cc4

080032bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ca:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <xTaskResumeAll+0x118>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	603b      	str	r3, [r7, #0]
}
 80032e4:	bf00      	nop
 80032e6:	e7fe      	b.n	80032e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032e8:	f001 f914 	bl	8004514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <xTaskResumeAll+0x118>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <xTaskResumeAll+0x118>)
 80032f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <xTaskResumeAll+0x118>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d162      	bne.n	80033c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <xTaskResumeAll+0x11c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d05e      	beq.n	80033c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003306:	e02f      	b.n	8003368 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003308:	4b34      	ldr	r3, [pc, #208]	; (80033dc <xTaskResumeAll+0x120>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3318      	adds	r3, #24
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f8eb 	bl	80024f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f8e6 	bl	80024f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <xTaskResumeAll+0x124>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d903      	bls.n	8003338 <xTaskResumeAll+0x7c>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <xTaskResumeAll+0x124>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <xTaskResumeAll+0x128>)
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7ff f871 	bl	8002436 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <xTaskResumeAll+0x12c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <xTaskResumeAll+0x130>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <xTaskResumeAll+0x120>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1cb      	bne.n	8003308 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003376:	f000 fb55 	bl	8003a24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <xTaskResumeAll+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003386:	f000 f847 	bl	8003418 <xTaskIncrementTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <xTaskResumeAll+0x130>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3b01      	subs	r3, #1
 800339a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f1      	bne.n	8003386 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <xTaskResumeAll+0x134>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <xTaskResumeAll+0x130>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <xTaskResumeAll+0x138>)
 80033b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033c4:	f001 f8d6 	bl	8004574 <vPortExitCritical>

	return xAlreadyYielded;
 80033c8:	68bb      	ldr	r3, [r7, #8]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000cc4 	.word	0x20000cc4
 80033d8:	20000c9c 	.word	0x20000c9c
 80033dc:	20000c5c 	.word	0x20000c5c
 80033e0:	20000ca4 	.word	0x20000ca4
 80033e4:	200007cc 	.word	0x200007cc
 80033e8:	200007c8 	.word	0x200007c8
 80033ec:	20000cb0 	.word	0x20000cb0
 80033f0:	20000cac 	.word	0x20000cac
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <xTaskGetTickCount+0x1c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000ca0 	.word	0x20000ca0

08003418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <xTaskIncrementTick+0x148>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 808f 	bne.w	800354a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800342c:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <xTaskIncrementTick+0x14c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003434:	4a4b      	ldr	r2, [pc, #300]	; (8003564 <xTaskIncrementTick+0x14c>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d120      	bne.n	8003482 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003440:	4b49      	ldr	r3, [pc, #292]	; (8003568 <xTaskIncrementTick+0x150>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <xTaskIncrementTick+0x48>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	603b      	str	r3, [r7, #0]
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <xTaskIncrementTick+0x46>
 8003460:	4b41      	ldr	r3, [pc, #260]	; (8003568 <xTaskIncrementTick+0x150>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <xTaskIncrementTick+0x154>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <xTaskIncrementTick+0x150>)
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4a3f      	ldr	r2, [pc, #252]	; (800356c <xTaskIncrementTick+0x154>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <xTaskIncrementTick+0x158>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <xTaskIncrementTick+0x158>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	f000 fad1 	bl	8003a24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003482:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <xTaskIncrementTick+0x15c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d349      	bcc.n	8003520 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	4b36      	ldr	r3, [pc, #216]	; (8003568 <xTaskIncrementTick+0x150>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <xTaskIncrementTick+0x15c>)
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	601a      	str	r2, [r3, #0]
					break;
 800349e:	e03f      	b.n	8003520 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <xTaskIncrementTick+0x150>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d203      	bcs.n	80034c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034b8:	4a2e      	ldr	r2, [pc, #184]	; (8003574 <xTaskIncrementTick+0x15c>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034be:	e02f      	b.n	8003520 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f813 	bl	80024f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3318      	adds	r3, #24
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f80a 	bl	80024f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <xTaskIncrementTick+0x160>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d903      	bls.n	80034f0 <xTaskIncrementTick+0xd8>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <xTaskIncrementTick+0x160>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <xTaskIncrementTick+0x164>)
 80034fe:	441a      	add	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7fe ff95 	bl	8002436 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <xTaskIncrementTick+0x168>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d3b8      	bcc.n	800348c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800351e:	e7b5      	b.n	800348c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <xTaskIncrementTick+0x168>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4915      	ldr	r1, [pc, #84]	; (800357c <xTaskIncrementTick+0x164>)
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d901      	bls.n	800353c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <xTaskIncrementTick+0x16c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	e004      	b.n	8003554 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <xTaskIncrementTick+0x170>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <xTaskIncrementTick+0x170>)
 8003552:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003554:	697b      	ldr	r3, [r7, #20]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000cc4 	.word	0x20000cc4
 8003564:	20000ca0 	.word	0x20000ca0
 8003568:	20000c54 	.word	0x20000c54
 800356c:	20000c58 	.word	0x20000c58
 8003570:	20000cb4 	.word	0x20000cb4
 8003574:	20000cbc 	.word	0x20000cbc
 8003578:	20000ca4 	.word	0x20000ca4
 800357c:	200007cc 	.word	0x200007cc
 8003580:	200007c8 	.word	0x200007c8
 8003584:	20000cb0 	.word	0x20000cb0
 8003588:	20000cac 	.word	0x20000cac

0800358c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <vTaskSwitchContext+0xa8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <vTaskSwitchContext+0xac>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035a0:	e041      	b.n	8003626 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <vTaskSwitchContext+0xac>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <vTaskSwitchContext+0xb0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e010      	b.n	80035d2 <vTaskSwitchContext+0x46>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <vTaskSwitchContext+0x40>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	607b      	str	r3, [r7, #4]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <vTaskSwitchContext+0x3e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <vTaskSwitchContext+0xb4>)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0e4      	beq.n	80035b0 <vTaskSwitchContext+0x24>
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <vTaskSwitchContext+0xb4>)
 80035f2:	4413      	add	r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3308      	adds	r3, #8
 8003608:	429a      	cmp	r2, r3
 800360a:	d104      	bne.n	8003616 <vTaskSwitchContext+0x8a>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <vTaskSwitchContext+0xb8>)
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4a06      	ldr	r2, [pc, #24]	; (800363c <vTaskSwitchContext+0xb0>)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6013      	str	r3, [r2, #0]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000cc4 	.word	0x20000cc4
 8003638:	20000cb0 	.word	0x20000cb0
 800363c:	20000ca4 	.word	0x20000ca4
 8003640:	200007cc 	.word	0x200007cc
 8003644:	200007c8 	.word	0x200007c8

08003648 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <vTaskPlaceOnEventList+0x44>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3318      	adds	r3, #24
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe ff01 	bl	800247e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800367c:	2101      	movs	r1, #1
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f000 fa7c 	bl	8003b7c <prvAddCurrentTaskToDelayedList>
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200007c8 	.word	0x200007c8

08003690 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	617b      	str	r3, [r7, #20]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3318      	adds	r3, #24
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fe feb8 	bl	8002436 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	68b8      	ldr	r0, [r7, #8]
 80036d6:	f000 fa51 	bl	8003b7c <prvAddCurrentTaskToDelayedList>
	}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200007c8 	.word	0x200007c8

080036e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60fb      	str	r3, [r7, #12]
}
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3318      	adds	r3, #24
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fee9 	bl	80024f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <xTaskRemoveFromEventList+0xb0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11d      	bne.n	8003762 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fee0 	bl	80024f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <xTaskRemoveFromEventList+0xb4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d903      	bls.n	8003744 <xTaskRemoveFromEventList+0x5c>
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	4a16      	ldr	r2, [pc, #88]	; (800379c <xTaskRemoveFromEventList+0xb4>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <xTaskRemoveFromEventList+0xb8>)
 8003752:	441a      	add	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe fe6b 	bl	8002436 <vListInsertEnd>
 8003760:	e005      	b.n	800376e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3318      	adds	r3, #24
 8003766:	4619      	mov	r1, r3
 8003768:	480e      	ldr	r0, [pc, #56]	; (80037a4 <xTaskRemoveFromEventList+0xbc>)
 800376a:	f7fe fe64 	bl	8002436 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <xTaskRemoveFromEventList+0xc0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	429a      	cmp	r2, r3
 800377a:	d905      	bls.n	8003788 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <xTaskRemoveFromEventList+0xc4>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e001      	b.n	800378c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800378c:	697b      	ldr	r3, [r7, #20]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000cc4 	.word	0x20000cc4
 800379c:	20000ca4 	.word	0x20000ca4
 80037a0:	200007cc 	.word	0x200007cc
 80037a4:	20000c5c 	.word	0x20000c5c
 80037a8:	200007c8 	.word	0x200007c8
 80037ac:	20000cb0 	.word	0x20000cb0

080037b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <vTaskInternalSetTimeOutState+0x24>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <vTaskInternalSetTimeOutState+0x28>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20000cb4 	.word	0x20000cb4
 80037d8:	20000ca0 	.word	0x20000ca0

080037dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	613b      	str	r3, [r7, #16]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800381e:	f000 fe79 	bl	8004514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <xTaskCheckForTimeOut+0xbc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d102      	bne.n	8003842 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e023      	b.n	800388a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <xTaskCheckForTimeOut+0xc0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d007      	beq.n	800385e <xTaskCheckForTimeOut+0x82>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e015      	b.n	800388a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d20b      	bcs.n	8003880 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff9b 	bl	80037b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	e004      	b.n	800388a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800388a:	f000 fe73 	bl	8004574 <vPortExitCritical>

	return xReturn;
 800388e:	69fb      	ldr	r3, [r7, #28]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000ca0 	.word	0x20000ca0
 800389c:	20000cb4 	.word	0x20000cb4

080038a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <vTaskMissedYield+0x14>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000cb0 	.word	0x20000cb0

080038b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038c0:	f000 f852 	bl	8003968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <prvIdleTask+0x28>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d9f9      	bls.n	80038c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <prvIdleTask+0x2c>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038dc:	e7f0      	b.n	80038c0 <prvIdleTask+0x8>
 80038de:	bf00      	nop
 80038e0:	200007cc 	.word	0x200007cc
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e00c      	b.n	800390e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <prvInitialiseTaskLists+0x60>)
 8003900:	4413      	add	r3, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fd6a 	bl	80023dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b37      	cmp	r3, #55	; 0x37
 8003912:	d9ef      	bls.n	80038f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <prvInitialiseTaskLists+0x64>)
 8003916:	f7fe fd61 	bl	80023dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800391a:	480d      	ldr	r0, [pc, #52]	; (8003950 <prvInitialiseTaskLists+0x68>)
 800391c:	f7fe fd5e 	bl	80023dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <prvInitialiseTaskLists+0x6c>)
 8003922:	f7fe fd5b 	bl	80023dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003926:	480c      	ldr	r0, [pc, #48]	; (8003958 <prvInitialiseTaskLists+0x70>)
 8003928:	f7fe fd58 	bl	80023dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800392c:	480b      	ldr	r0, [pc, #44]	; (800395c <prvInitialiseTaskLists+0x74>)
 800392e:	f7fe fd55 	bl	80023dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvInitialiseTaskLists+0x78>)
 8003934:	4a05      	ldr	r2, [pc, #20]	; (800394c <prvInitialiseTaskLists+0x64>)
 8003936:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvInitialiseTaskLists+0x7c>)
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <prvInitialiseTaskLists+0x68>)
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200007cc 	.word	0x200007cc
 800394c:	20000c2c 	.word	0x20000c2c
 8003950:	20000c40 	.word	0x20000c40
 8003954:	20000c5c 	.word	0x20000c5c
 8003958:	20000c70 	.word	0x20000c70
 800395c:	20000c88 	.word	0x20000c88
 8003960:	20000c54 	.word	0x20000c54
 8003964:	20000c58 	.word	0x20000c58

08003968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396e:	e019      	b.n	80039a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003970:	f000 fdd0 	bl	8004514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <prvCheckTasksWaitingTermination+0x50>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fdb5 	bl	80024f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <prvCheckTasksWaitingTermination+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <prvCheckTasksWaitingTermination+0x54>)
 800398e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003998:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800399a:	f000 fdeb 	bl	8004574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f810 	bl	80039c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e1      	bne.n	8003970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000c70 	.word	0x20000c70
 80039bc:	20000c9c 	.word	0x20000c9c
 80039c0:	20000c84 	.word	0x20000c84

080039c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 febc 	bl	8004758 <vPortFree>
				vPortFree( pxTCB );
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 feb9 	bl	8004758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039e6:	e018      	b.n	8003a1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d103      	bne.n	80039fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 feb0 	bl	8004758 <vPortFree>
	}
 80039f8:	e00f      	b.n	8003a1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d00a      	beq.n	8003a1a <prvDeleteTCB+0x56>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	60fb      	str	r3, [r7, #12]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <prvDeleteTCB+0x54>
	}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <prvResetNextTaskUnblockTime+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <prvResetNextTaskUnblockTime+0x3c>)
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a3c:	e008      	b.n	8003a50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <prvResetNextTaskUnblockTime+0x38>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <prvResetNextTaskUnblockTime+0x3c>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	20000c54 	.word	0x20000c54
 8003a60:	20000cbc 	.word	0x20000cbc

08003a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <xTaskGetSchedulerState+0x34>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a72:	2301      	movs	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	e008      	b.n	8003a8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <xTaskGetSchedulerState+0x38>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a80:	2302      	movs	r3, #2
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e001      	b.n	8003a8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a8a:	687b      	ldr	r3, [r7, #4]
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000ca8 	.word	0x20000ca8
 8003a9c:	20000cc4 	.word	0x20000cc4

08003aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d056      	beq.n	8003b64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <xTaskPriorityDisinherit+0xd0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d00a      	beq.n	8003ad6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60bb      	str	r3, [r7, #8]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d02c      	beq.n	8003b64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d128      	bne.n	8003b64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fcea 	bl	80024f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <xTaskPriorityDisinherit+0xd4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <xTaskPriorityDisinherit+0xa4>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <xTaskPriorityDisinherit+0xd4>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <xTaskPriorityDisinherit+0xd8>)
 8003b52:	441a      	add	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7fe fc6b 	bl	8002436 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b64:	697b      	ldr	r3, [r7, #20]
	}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200007c8 	.word	0x200007c8
 8003b74:	20000ca4 	.word	0x20000ca4
 8003b78:	200007cc 	.word	0x200007cc

08003b7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <prvAddCurrentTaskToDelayedList+0x90>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fcac 	bl	80024f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d10a      	bne.n	8003bb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4819      	ldr	r0, [pc, #100]	; (8003c14 <prvAddCurrentTaskToDelayedList+0x98>)
 8003bb0:	f7fe fc41 	bl	8002436 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bb4:	e026      	b.n	8003c04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d209      	bcs.n	8003be2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7fe fc4f 	bl	800247e <vListInsert>
}
 8003be0:	e010      	b.n	8003c04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7fe fc45 	bl	800247e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d202      	bcs.n	8003c04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000ca0 	.word	0x20000ca0
 8003c10:	200007c8 	.word	0x200007c8
 8003c14:	20000c88 	.word	0x20000c88
 8003c18:	20000c58 	.word	0x20000c58
 8003c1c:	20000c54 	.word	0x20000c54
 8003c20:	20000cbc 	.word	0x20000cbc

08003c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c2e:	f000 fb07 	bl	8004240 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <xTimerCreateTimerTask+0x80>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d021      	beq.n	8003c7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c42:	1d3a      	adds	r2, r7, #4
 8003c44:	f107 0108 	add.w	r1, r7, #8
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fbab 	bl	80023a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	9202      	str	r2, [sp, #8]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	460a      	mov	r2, r1
 8003c64:	4910      	ldr	r1, [pc, #64]	; (8003ca8 <xTimerCreateTimerTask+0x84>)
 8003c66:	4811      	ldr	r0, [pc, #68]	; (8003cac <xTimerCreateTimerTask+0x88>)
 8003c68:	f7ff f958 	bl	8002f1c <xTaskCreateStatic>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <xTimerCreateTimerTask+0x8c>)
 8003c70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <xTimerCreateTimerTask+0x8c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	613b      	str	r3, [r7, #16]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c9a:	697b      	ldr	r3, [r7, #20]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000cf8 	.word	0x20000cf8
 8003ca8:	08004964 	.word	0x08004964
 8003cac:	08003de9 	.word	0x08003de9
 8003cb0:	20000cfc 	.word	0x20000cfc

08003cb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	623b      	str	r3, [r7, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <xTimerGenericCommand+0x98>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02a      	beq.n	8003d40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	dc18      	bgt.n	8003d2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cfc:	f7ff feb2 	bl	8003a64 <xTaskGetSchedulerState>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d109      	bne.n	8003d1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <xTimerGenericCommand+0x98>)
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	f107 0110 	add.w	r1, r7, #16
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d12:	f7fe fd1b 	bl	800274c <xQueueGenericSend>
 8003d16:	6278      	str	r0, [r7, #36]	; 0x24
 8003d18:	e012      	b.n	8003d40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <xTimerGenericCommand+0x98>)
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f107 0110 	add.w	r1, r7, #16
 8003d22:	2300      	movs	r3, #0
 8003d24:	2200      	movs	r2, #0
 8003d26:	f7fe fd11 	bl	800274c <xQueueGenericSend>
 8003d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d2c:	e008      	b.n	8003d40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <xTimerGenericCommand+0x98>)
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f107 0110 	add.w	r1, r7, #16
 8003d36:	2300      	movs	r3, #0
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	f7fe fe05 	bl	8002948 <xQueueGenericSendFromISR>
 8003d3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3728      	adds	r7, #40	; 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000cf8 	.word	0x20000cf8

08003d50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <prvProcessExpiredTimer+0x94>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fbc1 	bl	80024f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	18d1      	adds	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6978      	ldr	r0, [r7, #20]
 8003d8a:	f000 f8d1 	bl	8003f30 <prvInsertTimerInActiveList>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01f      	beq.n	8003dd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff ff88 	bl	8003cb4 <xTimerGenericCommand>
 8003da4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d113      	bne.n	8003dd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	6978      	ldr	r0, [r7, #20]
 8003dda:	4798      	blx	r3
}
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000cf0 	.word	0x20000cf0

08003de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003df0:	f107 0308 	add.w	r3, r7, #8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f857 	bl	8003ea8 <prvGetNextExpireTime>
 8003dfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f803 	bl	8003e0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e06:	f000 f8d5 	bl	8003fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e0a:	e7f1      	b.n	8003df0 <prvTimerTask+0x8>

08003e0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e16:	f7ff fa43 	bl	80032a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f866 	bl	8003ef0 <prvSampleTimeNow>
 8003e24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d130      	bne.n	8003e8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <prvProcessTimerOrBlockTask+0x3c>
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d806      	bhi.n	8003e48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e3a:	f7ff fa3f 	bl	80032bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e3e:	68f9      	ldr	r1, [r7, #12]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff85 	bl	8003d50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e46:	e024      	b.n	8003e92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <prvProcessTimerOrBlockTask+0x90>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <prvProcessTimerOrBlockTask+0x50>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <prvProcessTimerOrBlockTask+0x52>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <prvProcessTimerOrBlockTask+0x94>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7ff f821 	bl	8002eb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e72:	f7ff fa23 	bl	80032bc <xTaskResumeAll>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <prvProcessTimerOrBlockTask+0x98>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
}
 8003e8c:	e001      	b.n	8003e92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e8e:	f7ff fa15 	bl	80032bc <xTaskResumeAll>
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000cf4 	.word	0x20000cf4
 8003ea0:	20000cf8 	.word	0x20000cf8
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <prvGetNextExpireTime+0x44>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <prvGetNextExpireTime+0x16>
 8003eba:	2201      	movs	r2, #1
 8003ebc:	e000      	b.n	8003ec0 <prvGetNextExpireTime+0x18>
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ecc:	4b07      	ldr	r3, [pc, #28]	; (8003eec <prvGetNextExpireTime+0x44>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e001      	b.n	8003edc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000cf0 	.word	0x20000cf0

08003ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ef8:	f7ff fa7e 	bl	80033f8 <xTaskGetTickCount>
 8003efc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <prvSampleTimeNow+0x3c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d205      	bcs.n	8003f14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f08:	f000 f936 	bl	8004178 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <prvSampleTimeNow+0x3c>)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f20:	68fb      	ldr	r3, [r7, #12]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000d00 	.word	0x20000d00

08003f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d812      	bhi.n	8003f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e01b      	b.n	8003fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <prvInsertTimerInActiveList+0x7c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7fe fa82 	bl	800247e <vListInsert>
 8003f7a:	e012      	b.n	8003fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d206      	bcs.n	8003f92 <prvInsertTimerInActiveList+0x62>
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e007      	b.n	8003fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <prvInsertTimerInActiveList+0x80>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fa6e 	bl	800247e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fa2:	697b      	ldr	r3, [r7, #20]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000cf4 	.word	0x20000cf4
 8003fb0:	20000cf0 	.word	0x20000cf0

08003fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fba:	e0ca      	b.n	8004152 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da18      	bge.n	8003ff4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61fb      	str	r3, [r7, #28]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	6850      	ldr	r0, [r2, #4]
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f2c0 80aa 	blt.w	8004150 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fa6f 	bl	80024f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004012:	463b      	mov	r3, r7
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff6b 	bl	8003ef0 <prvSampleTimeNow>
 800401a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b09      	cmp	r3, #9
 8004020:	f200 8097 	bhi.w	8004152 <prvProcessReceivedCommands+0x19e>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <prvProcessReceivedCommands+0x78>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004055 	.word	0x08004055
 8004030:	08004055 	.word	0x08004055
 8004034:	08004055 	.word	0x08004055
 8004038:	080040c9 	.word	0x080040c9
 800403c:	080040dd 	.word	0x080040dd
 8004040:	08004127 	.word	0x08004127
 8004044:	08004055 	.word	0x08004055
 8004048:	08004055 	.word	0x08004055
 800404c:	080040c9 	.word	0x080040c9
 8004050:	080040dd 	.word	0x080040dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	18d1      	adds	r1, r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004074:	f7ff ff5c 	bl	8003f30 <prvInsertTimerInActiveList>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d069      	beq.n	8004152 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004084:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05e      	beq.n	8004152 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	441a      	add	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a6:	f7ff fe05 	bl	8003cb4 <xTimerGenericCommand>
 80040aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d14f      	bne.n	8004152 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	61bb      	str	r3, [r7, #24]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80040da:	e03a      	b.n	8004152 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	617b      	str	r3, [r7, #20]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	18d1      	adds	r1, r2, r3
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004120:	f7ff ff06 	bl	8003f30 <prvInsertTimerInActiveList>
					break;
 8004124:	e015      	b.n	8004152 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004136:	f000 fb0f 	bl	8004758 <vPortFree>
 800413a:	e00a      	b.n	8004152 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800414e:	e000      	b.n	8004152 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <prvProcessReceivedCommands+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1d39      	adds	r1, r7, #4
 8004158:	2200      	movs	r2, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fc90 	bl	8002a80 <xQueueReceive>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f47f af2a 	bne.w	8003fbc <prvProcessReceivedCommands+0x8>
	}
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3730      	adds	r7, #48	; 0x30
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000cf8 	.word	0x20000cf8

08004178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800417e:	e048      	b.n	8004212 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <prvSwitchTimerLists+0xc0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <prvSwitchTimerLists+0xc0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe f9a9 	bl	80024f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02e      	beq.n	8004212 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d90e      	bls.n	80041e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <prvSwitchTimerLists+0xc0>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fe f94e 	bl	800247e <vListInsert>
 80041e2:	e016      	b.n	8004212 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2300      	movs	r3, #0
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	2100      	movs	r1, #0
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fd60 	bl	8003cb4 <xTimerGenericCommand>
 80041f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	603b      	str	r3, [r7, #0]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <prvSwitchTimerLists+0xc0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1b1      	bne.n	8004180 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <prvSwitchTimerLists+0xc0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <prvSwitchTimerLists+0xc4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a04      	ldr	r2, [pc, #16]	; (8004238 <prvSwitchTimerLists+0xc0>)
 8004228:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800422a:	4a04      	ldr	r2, [pc, #16]	; (800423c <prvSwitchTimerLists+0xc4>)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000cf0 	.word	0x20000cf0
 800423c:	20000cf4 	.word	0x20000cf4

08004240 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004246:	f000 f965 	bl	8004514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <prvCheckForValidListAndQueue+0x60>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d120      	bne.n	8004294 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004252:	4814      	ldr	r0, [pc, #80]	; (80042a4 <prvCheckForValidListAndQueue+0x64>)
 8004254:	f7fe f8c2 	bl	80023dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004258:	4813      	ldr	r0, [pc, #76]	; (80042a8 <prvCheckForValidListAndQueue+0x68>)
 800425a:	f7fe f8bf 	bl	80023dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <prvCheckForValidListAndQueue+0x6c>)
 8004260:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <prvCheckForValidListAndQueue+0x64>)
 8004262:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <prvCheckForValidListAndQueue+0x70>)
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <prvCheckForValidListAndQueue+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800426a:	2300      	movs	r3, #0
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <prvCheckForValidListAndQueue+0x74>)
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <prvCheckForValidListAndQueue+0x78>)
 8004272:	2110      	movs	r1, #16
 8004274:	200a      	movs	r0, #10
 8004276:	f7fe f9cd 	bl	8002614 <xQueueGenericCreateStatic>
 800427a:	4603      	mov	r3, r0
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <prvCheckForValidListAndQueue+0x60>)
 800427e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <prvCheckForValidListAndQueue+0x60>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <prvCheckForValidListAndQueue+0x60>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	490b      	ldr	r1, [pc, #44]	; (80042bc <prvCheckForValidListAndQueue+0x7c>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fde6 	bl	8002e60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004294:	f000 f96e 	bl	8004574 <vPortExitCritical>
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000cf8 	.word	0x20000cf8
 80042a4:	20000cc8 	.word	0x20000cc8
 80042a8:	20000cdc 	.word	0x20000cdc
 80042ac:	20000cf0 	.word	0x20000cf0
 80042b0:	20000cf4 	.word	0x20000cf4
 80042b4:	20000da4 	.word	0x20000da4
 80042b8:	20000d04 	.word	0x20000d04
 80042bc:	0800496c 	.word	0x0800496c

080042c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b04      	subs	r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b04      	subs	r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b04      	subs	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <pxPortInitialiseStack+0x64>)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b14      	subs	r3, #20
 80042fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b04      	subs	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f06f 0202 	mvn.w	r2, #2
 800430e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b20      	subs	r3, #32
 8004314:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	08004329 	.word	0x08004329

08004328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <prvTaskExitError+0x54>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d00a      	beq.n	8004352 <prvTaskExitError+0x2a>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <prvTaskExitError+0x28>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60bb      	str	r3, [r7, #8]
}
 8004364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004366:	bf00      	nop
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0fc      	beq.n	8004368 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	2000000c 	.word	0x2000000c

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ca:	bf00      	nop
 80043cc:	e000ed08 	.word	0xe000ed08

080043d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043d6:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <xPortStartScheduler+0x120>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a46      	ldr	r2, [pc, #280]	; (80044f4 <xPortStartScheduler+0x124>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10a      	bne.n	80043f6 <xPortStartScheduler+0x26>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <xPortStartScheduler+0x120>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <xPortStartScheduler+0x128>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10a      	bne.n	8004416 <xPortStartScheduler+0x46>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <xPortStartScheduler+0x12c>)
 8004418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b31      	ldr	r3, [pc, #196]	; (8004500 <xPortStartScheduler+0x130>)
 800443c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xPortStartScheduler+0x134>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004444:	e009      	b.n	800445a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004446:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <xPortStartScheduler+0x134>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3b01      	subs	r3, #1
 800444c:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <xPortStartScheduler+0x134>)
 800444e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d0ef      	beq.n	8004446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <xPortStartScheduler+0x134>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1c3 0307 	rsb	r3, r3, #7
 800446e:	2b04      	cmp	r3, #4
 8004470:	d00a      	beq.n	8004488 <xPortStartScheduler+0xb8>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60bb      	str	r3, [r7, #8]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <xPortStartScheduler+0x134>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <xPortStartScheduler+0x134>)
 8004490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <xPortStartScheduler+0x134>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449a:	4a1a      	ldr	r2, [pc, #104]	; (8004504 <xPortStartScheduler+0x134>)
 800449c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <xPortStartScheduler+0x138>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <xPortStartScheduler+0x138>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <xPortStartScheduler+0x138>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a14      	ldr	r2, [pc, #80]	; (8004508 <xPortStartScheduler+0x138>)
 80044b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044be:	f000 f8dd 	bl	800467c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <xPortStartScheduler+0x13c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044c8:	f000 f8fc 	bl	80046c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <xPortStartScheduler+0x140>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <xPortStartScheduler+0x140>)
 80044d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044d8:	f7ff ff66 	bl	80043a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044dc:	f7ff f856 	bl	800358c <vTaskSwitchContext>
	prvTaskExitError();
 80044e0:	f7ff ff22 	bl	8004328 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	e000ed00 	.word	0xe000ed00
 80044f4:	410fc271 	.word	0x410fc271
 80044f8:	410fc270 	.word	0x410fc270
 80044fc:	e000e400 	.word	0xe000e400
 8004500:	20000df4 	.word	0x20000df4
 8004504:	20000df8 	.word	0x20000df8
 8004508:	e000ed20 	.word	0xe000ed20
 800450c:	2000000c 	.word	0x2000000c
 8004510:	e000ef34 	.word	0xe000ef34

08004514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	607b      	str	r3, [r7, #4]
}
 800452c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <vPortEnterCritical+0x58>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <vPortEnterCritical+0x58>)
 8004536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <vPortEnterCritical+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10f      	bne.n	8004560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vPortEnterCritical+0x5c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <vPortEnterCritical+0x4c>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <vPortEnterCritical+0x4a>
	}
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	2000000c 	.word	0x2000000c
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <vPortExitCritical+0x50>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <vPortExitCritical+0x24>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	607b      	str	r3, [r7, #4]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <vPortExitCritical+0x50>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3b01      	subs	r3, #1
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <vPortExitCritical+0x50>)
 80045a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <vPortExitCritical+0x50>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <vPortExitCritical+0x42>
 80045aa:	2300      	movs	r3, #0
 80045ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f383 8811 	msr	BASEPRI, r3
}
 80045b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000000c 	.word	0x2000000c
	...

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f01e 0f10 	tst.w	lr, #16
 80045e0:	bf08      	it	eq
 80045e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045f4:	f380 8811 	msr	BASEPRI, r0
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f7fe ffc4 	bl	800358c <vTaskSwitchContext>
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f380 8811 	msr	BASEPRI, r0
 800460c:	bc09      	pop	{r0, r3}
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	6808      	ldr	r0, [r1, #0]
 8004612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004616:	f01e 0f10 	tst.w	lr, #16
 800461a:	bf08      	it	eq
 800461c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004620:	f380 8809 	msr	PSP, r0
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst>:
 8004630:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
}
 8004650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004652:	f7fe fee1 	bl	8003418 <xTaskIncrementTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <xPortSysTickHandler+0x40>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f383 8811 	msr	BASEPRI, r3
}
 800466e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortSetupTimerInterrupt+0x34>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <vPortSetupTimerInterrupt+0x38>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <vPortSetupTimerInterrupt+0x3c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <vPortSetupTimerInterrupt+0x40>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <vPortSetupTimerInterrupt+0x44>)
 800469a:	3b01      	subs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <vPortSetupTimerInterrupt+0x34>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010
 80046b4:	e000e018 	.word	0xe000e018
 80046b8:	20000000 	.word	0x20000000
 80046bc:	10624dd3 	.word	0x10624dd3
 80046c0:	e000e014 	.word	0xe000e014

080046c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046d4 <vPortEnableVFP+0x10>
 80046c8:	6801      	ldr	r1, [r0, #0]
 80046ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ce:	6001      	str	r1, [r0, #0]
 80046d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046d2:	bf00      	nop
 80046d4:	e000ed88 	.word	0xe000ed88

080046d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046de:	f3ef 8305 	mrs	r3, IPSR
 80046e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	d914      	bls.n	8004714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <vPortValidateInterruptPriority+0x70>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <vPortValidateInterruptPriority+0x74>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	7afa      	ldrb	r2, [r7, #11]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d20a      	bcs.n	8004714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <vPortValidateInterruptPriority+0x78>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800471c:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <vPortValidateInterruptPriority+0x7c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d90a      	bls.n	800473a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	603b      	str	r3, [r7, #0]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <vPortValidateInterruptPriority+0x60>
	}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000e3f0 	.word	0xe000e3f0
 800474c:	20000df4 	.word	0x20000df4
 8004750:	e000ed0c 	.word	0xe000ed0c
 8004754:	20000df8 	.word	0x20000df8

08004758 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04d      	beq.n	8004806 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800476a:	2308      	movs	r3, #8
 800476c:	425b      	negs	r3, r3
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4413      	add	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <vPortFree+0xb8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <vPortFree+0x44>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60fb      	str	r3, [r7, #12]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <vPortFree+0x62>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60bb      	str	r3, [r7, #8]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <vPortFree+0xb8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01e      	beq.n	8004806 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11a      	bne.n	8004806 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <vPortFree+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	43db      	mvns	r3, r3
 80047da:	401a      	ands	r2, r3
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047e0:	f7fe fd5e 	bl	80032a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vPortFree+0xbc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <vPortFree+0xbc>)
 80047f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047f2:	6938      	ldr	r0, [r7, #16]
 80047f4:	f000 f812 	bl	800481c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <vPortFree+0xc0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a06      	ldr	r2, [pc, #24]	; (8004818 <vPortFree+0xc0>)
 8004800:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004802:	f7fe fd5b 	bl	80032bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000e10 	.word	0x20000e10
 8004814:	20000e08 	.word	0x20000e08
 8004818:	20000e0c 	.word	0x20000e0c

0800481c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <prvInsertBlockIntoFreeList+0xac>)
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e002      	b.n	8004830 <prvInsertBlockIntoFreeList+0x14>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d8f7      	bhi.n	800482a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	4413      	add	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d108      	bne.n	800485e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d118      	bne.n	80048a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <prvInsertBlockIntoFreeList+0xb0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d00d      	beq.n	800489a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e008      	b.n	80048ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <prvInsertBlockIntoFreeList+0xb0>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e003      	b.n	80048ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d002      	beq.n	80048ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000dfc 	.word	0x20000dfc
 80048cc:	20000e04 	.word	0x20000e04

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4d0d      	ldr	r5, [pc, #52]	; (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d6:	1b64      	subs	r4, r4, r5
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2600      	movs	r6, #0
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4d0b      	ldr	r5, [pc, #44]	; (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	; (8004914 <__libc_init_array+0x44>)
 80048e4:	f000 f82e 	bl	8004944 <_init>
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2600      	movs	r6, #0
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08004994 	.word	0x08004994
 800490c:	08004994 	.word	0x08004994
 8004910:	08004994 	.word	0x08004994
 8004914:	08004998 	.word	0x08004998

08004918 <memcpy>:
 8004918:	440a      	add	r2, r1
 800491a:	4291      	cmp	r1, r2
 800491c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004920:	d100      	bne.n	8004924 <memcpy+0xc>
 8004922:	4770      	bx	lr
 8004924:	b510      	push	{r4, lr}
 8004926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800492a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492e:	4291      	cmp	r1, r2
 8004930:	d1f9      	bne.n	8004926 <memcpy+0xe>
 8004932:	bd10      	pop	{r4, pc}

08004934 <memset>:
 8004934:	4402      	add	r2, r0
 8004936:	4603      	mov	r3, r0
 8004938:	4293      	cmp	r3, r2
 800493a:	d100      	bne.n	800493e <memset+0xa>
 800493c:	4770      	bx	lr
 800493e:	f803 1b01 	strb.w	r1, [r3], #1
 8004942:	e7f9      	b.n	8004938 <memset+0x4>

08004944 <_init>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

08004950 <_fini>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr
