
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  20000078  08008070  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b80  08008070  00024b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001804d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a75  00000000  00000000  000380f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003bb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024edd  00000000  00000000  0003df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179c0  00000000  00000000  00062e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0625  00000000  00000000  0007a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ae22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  0015ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c28 	.word	0x08007c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007c28 	.word	0x08007c28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SPI_Send>:
};

const uint8_t sep[8]={0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00};

void SPI_Send(struct Conf C,uint8_t address, uint8_t D)
{
 80005b4:	b084      	sub	sp, #16
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	f107 0c08 	add.w	ip, r7, #8
 80005be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_SPI_Transmit(&C.hspi, &address, 1, 100);
 80005c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	f107 0008 	add.w	r0, r7, #8
 80005ce:	f003 f984 	bl	80038da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&C.hspi, &D, 1, 100); //  write data
 80005d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	f107 0008 	add.w	r0, r7, #8
 80005de:	f003 f97c 	bl	80038da <HAL_SPI_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ea:	b004      	add	sp, #16
 80005ec:	4770      	bx	lr

080005ee <Disp_Init>:

void Disp_Init(struct Conf C,uint8_t brightness)
{ 	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80005ee:	b084      	sub	sp, #16
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af16      	add	r7, sp, #88	; 0x58
 80005f6:	f107 0c08 	add.w	ip, r7, #8
 80005fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80005fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000600:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000604:	2200      	movs	r2, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fadc 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0c, 0x00);       //  power down =0，normal mode = 1
 800060c:	2300      	movs	r3, #0
 800060e:	9315      	str	r3, [sp, #84]	; 0x54
 8000610:	230c      	movs	r3, #12
 8000612:	9314      	str	r3, [sp, #80]	; 0x50
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2250      	movs	r2, #80	; 0x50
 800061c:	4619      	mov	r1, r3
 800061e:	f006 fe7f 	bl	8007320 <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ffc4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800062c:	2300      	movs	r3, #0
 800062e:	9315      	str	r3, [sp, #84]	; 0x54
 8000630:	230c      	movs	r3, #12
 8000632:	9314      	str	r3, [sp, #80]	; 0x50
 8000634:	4668      	mov	r0, sp
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2250      	movs	r2, #80	; 0x50
 800063c:	4619      	mov	r1, r3
 800063e:	f006 fe6f 	bl	8007320 <memcpy>
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	f7ff ffb4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800064c:	2300      	movs	r3, #0
 800064e:	9315      	str	r3, [sp, #84]	; 0x54
 8000650:	230c      	movs	r3, #12
 8000652:	9314      	str	r3, [sp, #80]	; 0x50
 8000654:	4668      	mov	r0, sp
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2250      	movs	r2, #80	; 0x50
 800065c:	4619      	mov	r1, r3
 800065e:	f006 fe5f 	bl	8007320 <memcpy>
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000668:	f7ff ffa4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800066c:	2300      	movs	r3, #0
 800066e:	9315      	str	r3, [sp, #84]	; 0x54
 8000670:	230c      	movs	r3, #12
 8000672:	9314      	str	r3, [sp, #80]	; 0x50
 8000674:	4668      	mov	r0, sp
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2250      	movs	r2, #80	; 0x50
 800067c:	4619      	mov	r1, r3
 800067e:	f006 fe4f 	bl	8007320 <memcpy>
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000688:	f7ff ff94 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 800068c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800068e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000692:	2201      	movs	r2, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa95 	bl	8002bc4 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 800069a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800069c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80006a0:	2200      	movs	r2, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa8e 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006a8:	2300      	movs	r3, #0
 80006aa:	9315      	str	r3, [sp, #84]	; 0x54
 80006ac:	230f      	movs	r3, #15
 80006ae:	9314      	str	r3, [sp, #80]	; 0x50
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2250      	movs	r2, #80	; 0x50
 80006b8:	4619      	mov	r1, r3
 80006ba:	f006 fe31 	bl	8007320 <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c4:	f7ff ff76 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006c8:	2300      	movs	r3, #0
 80006ca:	9315      	str	r3, [sp, #84]	; 0x54
 80006cc:	230f      	movs	r3, #15
 80006ce:	9314      	str	r3, [sp, #80]	; 0x50
 80006d0:	4668      	mov	r0, sp
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2250      	movs	r2, #80	; 0x50
 80006d8:	4619      	mov	r1, r3
 80006da:	f006 fe21 	bl	8007320 <memcpy>
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e4:	f7ff ff66 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006e8:	2300      	movs	r3, #0
 80006ea:	9315      	str	r3, [sp, #84]	; 0x54
 80006ec:	230f      	movs	r3, #15
 80006ee:	9314      	str	r3, [sp, #80]	; 0x50
 80006f0:	4668      	mov	r0, sp
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	4619      	mov	r1, r3
 80006fa:	f006 fe11 	bl	8007320 <memcpy>
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000704:	f7ff ff56 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 8000708:	2300      	movs	r3, #0
 800070a:	9315      	str	r3, [sp, #84]	; 0x54
 800070c:	230f      	movs	r3, #15
 800070e:	9314      	str	r3, [sp, #80]	; 0x50
 8000710:	4668      	mov	r0, sp
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2250      	movs	r2, #80	; 0x50
 8000718:	4619      	mov	r1, r3
 800071a:	f006 fe01 	bl	8007320 <memcpy>
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000724:	f7ff ff46 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800072a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fa47 	bl	8002bc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000738:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fa40 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000744:	2300      	movs	r3, #0
 8000746:	9315      	str	r3, [sp, #84]	; 0x54
 8000748:	2309      	movs	r3, #9
 800074a:	9314      	str	r3, [sp, #80]	; 0x50
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0318 	add.w	r3, r7, #24
 8000752:	2250      	movs	r2, #80	; 0x50
 8000754:	4619      	mov	r1, r3
 8000756:	f006 fde3 	bl	8007320 <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000760:	f7ff ff28 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000764:	2300      	movs	r3, #0
 8000766:	9315      	str	r3, [sp, #84]	; 0x54
 8000768:	2309      	movs	r3, #9
 800076a:	9314      	str	r3, [sp, #80]	; 0x50
 800076c:	4668      	mov	r0, sp
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2250      	movs	r2, #80	; 0x50
 8000774:	4619      	mov	r1, r3
 8000776:	f006 fdd3 	bl	8007320 <memcpy>
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000780:	f7ff ff18 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000784:	2300      	movs	r3, #0
 8000786:	9315      	str	r3, [sp, #84]	; 0x54
 8000788:	2309      	movs	r3, #9
 800078a:	9314      	str	r3, [sp, #80]	; 0x50
 800078c:	4668      	mov	r0, sp
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2250      	movs	r2, #80	; 0x50
 8000794:	4619      	mov	r1, r3
 8000796:	f006 fdc3 	bl	8007320 <memcpy>
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	f7ff ff08 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 80007a4:	2300      	movs	r3, #0
 80007a6:	9315      	str	r3, [sp, #84]	; 0x54
 80007a8:	2309      	movs	r3, #9
 80007aa:	9314      	str	r3, [sp, #80]	; 0x50
 80007ac:	4668      	mov	r0, sp
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2250      	movs	r2, #80	; 0x50
 80007b4:	4619      	mov	r1, r3
 80007b6:	f006 fdb3 	bl	8007320 <memcpy>
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	f7ff fef8 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 80007c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007c6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80007ca:	2201      	movs	r2, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f9f9 	bl	8002bc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80007d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80007d8:	2200      	movs	r2, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 f9f2 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 80007e0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80007e4:	9315      	str	r3, [sp, #84]	; 0x54
 80007e6:	230a      	movs	r3, #10
 80007e8:	9314      	str	r3, [sp, #80]	; 0x50
 80007ea:	4668      	mov	r0, sp
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	2250      	movs	r2, #80	; 0x50
 80007f2:	4619      	mov	r1, r3
 80007f4:	f006 fd94 	bl	8007320 <memcpy>
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fe:	f7ff fed9 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000802:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000806:	9315      	str	r3, [sp, #84]	; 0x54
 8000808:	230a      	movs	r3, #10
 800080a:	9314      	str	r3, [sp, #80]	; 0x50
 800080c:	4668      	mov	r0, sp
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2250      	movs	r2, #80	; 0x50
 8000814:	4619      	mov	r1, r3
 8000816:	f006 fd83 	bl	8007320 <memcpy>
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000820:	f7ff fec8 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000824:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000828:	9315      	str	r3, [sp, #84]	; 0x54
 800082a:	230a      	movs	r3, #10
 800082c:	9314      	str	r3, [sp, #80]	; 0x50
 800082e:	4668      	mov	r0, sp
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2250      	movs	r2, #80	; 0x50
 8000836:	4619      	mov	r1, r3
 8000838:	f006 fd72 	bl	8007320 <memcpy>
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000842:	f7ff feb7 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000846:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800084a:	9315      	str	r3, [sp, #84]	; 0x54
 800084c:	230a      	movs	r3, #10
 800084e:	9314      	str	r3, [sp, #80]	; 0x50
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2250      	movs	r2, #80	; 0x50
 8000858:	4619      	mov	r1, r3
 800085a:	f006 fd61 	bl	8007320 <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	f7ff fea6 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800086a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800086e:	2201      	movs	r2, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f002 f9a7 	bl	8002bc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000878:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800087c:	2200      	movs	r2, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 f9a0 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 8000884:	2307      	movs	r3, #7
 8000886:	9315      	str	r3, [sp, #84]	; 0x54
 8000888:	230b      	movs	r3, #11
 800088a:	9314      	str	r3, [sp, #80]	; 0x50
 800088c:	4668      	mov	r0, sp
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2250      	movs	r2, #80	; 0x50
 8000894:	4619      	mov	r1, r3
 8000896:	f006 fd43 	bl	8007320 <memcpy>
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a0:	f7ff fe88 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008a4:	2307      	movs	r3, #7
 80008a6:	9315      	str	r3, [sp, #84]	; 0x54
 80008a8:	230b      	movs	r3, #11
 80008aa:	9314      	str	r3, [sp, #80]	; 0x50
 80008ac:	4668      	mov	r0, sp
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2250      	movs	r2, #80	; 0x50
 80008b4:	4619      	mov	r1, r3
 80008b6:	f006 fd33 	bl	8007320 <memcpy>
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c0:	f7ff fe78 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008c4:	2307      	movs	r3, #7
 80008c6:	9315      	str	r3, [sp, #84]	; 0x54
 80008c8:	230b      	movs	r3, #11
 80008ca:	9314      	str	r3, [sp, #80]	; 0x50
 80008cc:	4668      	mov	r0, sp
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2250      	movs	r2, #80	; 0x50
 80008d4:	4619      	mov	r1, r3
 80008d6:	f006 fd23 	bl	8007320 <memcpy>
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e0:	f7ff fe68 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008e4:	2307      	movs	r3, #7
 80008e6:	9315      	str	r3, [sp, #84]	; 0x54
 80008e8:	230b      	movs	r3, #11
 80008ea:	9314      	str	r3, [sp, #80]	; 0x50
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2250      	movs	r2, #80	; 0x50
 80008f4:	4619      	mov	r1, r3
 80008f6:	f006 fd13 	bl	8007320 <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	f7ff fe58 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000906:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f002 f959 	bl	8002bc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000914:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 f952 	bl	8002bc4 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000920:	2301      	movs	r3, #1
 8000922:	9315      	str	r3, [sp, #84]	; 0x54
 8000924:	230c      	movs	r3, #12
 8000926:	9314      	str	r3, [sp, #80]	; 0x50
 8000928:	4668      	mov	r0, sp
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	2250      	movs	r2, #80	; 0x50
 8000930:	4619      	mov	r1, r3
 8000932:	f006 fcf5 	bl	8007320 <memcpy>
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093c:	f7ff fe3a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000940:	2301      	movs	r3, #1
 8000942:	9315      	str	r3, [sp, #84]	; 0x54
 8000944:	230c      	movs	r3, #12
 8000946:	9314      	str	r3, [sp, #80]	; 0x50
 8000948:	4668      	mov	r0, sp
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	2250      	movs	r2, #80	; 0x50
 8000950:	4619      	mov	r1, r3
 8000952:	f006 fce5 	bl	8007320 <memcpy>
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	f7ff fe2a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000960:	2301      	movs	r3, #1
 8000962:	9315      	str	r3, [sp, #84]	; 0x54
 8000964:	230c      	movs	r3, #12
 8000966:	9314      	str	r3, [sp, #80]	; 0x50
 8000968:	4668      	mov	r0, sp
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2250      	movs	r2, #80	; 0x50
 8000970:	4619      	mov	r1, r3
 8000972:	f006 fcd5 	bl	8007320 <memcpy>
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097c:	f7ff fe1a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000980:	2301      	movs	r3, #1
 8000982:	9315      	str	r3, [sp, #84]	; 0x54
 8000984:	230c      	movs	r3, #12
 8000986:	9314      	str	r3, [sp, #80]	; 0x50
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2250      	movs	r2, #80	; 0x50
 8000990:	4619      	mov	r1, r3
 8000992:	f006 fcc5 	bl	8007320 <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099c:	f7ff fe0a 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 80009a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009a2:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80009a6:	2201      	movs	r2, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f90b 	bl	8002bc4 <HAL_GPIO_WritePin>


}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b6:	b004      	add	sp, #16
 80009b8:	4770      	bx	lr

080009ba <Disp_Write>:

void Disp_Write(struct Conf C,uint8_t address, uint8_t *D) /**Write  col on all display*/
{
 80009ba:	b084      	sub	sp, #16
 80009bc:	b580      	push	{r7, lr}
 80009be:	b098      	sub	sp, #96	; 0x60
 80009c0:	af16      	add	r7, sp, #88	; 0x58
 80009c2:	f107 0c10 	add.w	ip, r7, #16
 80009c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80009ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009cc:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 80009d0:	2200      	movs	r2, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f8f6 	bl	8002bc4 <HAL_GPIO_WritePin>
	for (uint8_t j=0;j<4;j++)
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	e016      	b.n	8000a0c <Disp_Write+0x52>
	{
		SPI_Send(C,address,D[j]);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	9315      	str	r3, [sp, #84]	; 0x54
 80009e8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80009ec:	9314      	str	r3, [sp, #80]	; 0x50
 80009ee:	4668      	mov	r0, sp
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	2250      	movs	r2, #80	; 0x50
 80009f6:	4619      	mov	r1, r3
 80009f8:	f006 fc92 	bl	8007320 <memcpy>
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a02:	f7ff fdd7 	bl	80005b4 <SPI_Send>
	for (uint8_t j=0;j<4;j++)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d9e5      	bls.n	80009de <Disp_Write+0x24>
	}
HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);  // pull the CS HIGH
 8000a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a14:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 f8d2 	bl	8002bc4 <HAL_GPIO_WritePin>

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a2a:	b004      	add	sp, #16
 8000a2c:	4770      	bx	lr

08000a2e <Disp_Clear>:

void Disp_Clear(struct Conf C)	/**Clear  Displays*/
{
 8000a2e:	b084      	sub	sp, #16
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b098      	sub	sp, #96	; 0x60
 8000a34:	af16      	add	r7, sp, #88	; 0x58
 8000a36:	f107 0c10 	add.w	ip, r7, #16
 8000a3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i=1;i<=8;i++)
 8000a3e:	2301      	movs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e054      	b.n	8000aee <Disp_Clear+0xc0>
			{
			HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a46:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f8b9 	bl	8002bc4 <HAL_GPIO_WritePin>
			SPI_Send(C,i,0x00);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	9215      	str	r2, [sp, #84]	; 0x54
 8000a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8000a5c:	4668      	mov	r0, sp
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2250      	movs	r2, #80	; 0x50
 8000a64:	4619      	mov	r1, r3
 8000a66:	f006 fc5b 	bl	8007320 <memcpy>
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a70:	f7ff fda0 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	9215      	str	r2, [sp, #84]	; 0x54
 8000a7c:	9314      	str	r3, [sp, #80]	; 0x50
 8000a7e:	4668      	mov	r0, sp
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	4619      	mov	r1, r3
 8000a88:	f006 fc4a 	bl	8007320 <memcpy>
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	f7ff fd8f 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	9215      	str	r2, [sp, #84]	; 0x54
 8000a9e:	9314      	str	r3, [sp, #80]	; 0x50
 8000aa0:	4668      	mov	r0, sp
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2250      	movs	r2, #80	; 0x50
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f006 fc39 	bl	8007320 <memcpy>
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab4:	f7ff fd7e 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	9215      	str	r2, [sp, #84]	; 0x54
 8000ac0:	9314      	str	r3, [sp, #80]	; 0x50
 8000ac2:	4668      	mov	r0, sp
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	2250      	movs	r2, #80	; 0x50
 8000aca:	4619      	mov	r1, r3
 8000acc:	f006 fc28 	bl	8007320 <memcpy>
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad6:	f7ff fd6d 	bl	80005b4 <SPI_Send>
			HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000adc:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f86e 	bl	8002bc4 <HAL_GPIO_WritePin>
	for(int i=1;i<=8;i++)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	dda7      	ble.n	8000a44 <Disp_Clear+0x16>
			}

}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <Disp_Write_Word>:

void Disp_Write_Word(struct Conf C,char *D, uint8_t size)
{
 8000b04:	b084      	sub	sp, #16
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b098      	sub	sp, #96	; 0x60
 8000b0a:	af16      	add	r7, sp, #88	; 0x58
 8000b0c:	f107 0c10 	add.w	ip, r7, #16
 8000b10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data[4];
	for (uint8_t i=0;i<8;i++)//przepisanie danych z pamięci na poszczególne wartości liczbowe do wyświetlenia
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	e03c      	b.n	8000b94 <Disp_Write_Word+0x90>
		{
			for (uint8_t j=0;j<4;j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	e021      	b.n	8000b64 <Disp_Write_Word+0x60>
			{
				if(j>size-1) data[j] = (digits[0][i]);
 8000b20:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d808      	bhi.n	8000b3c <Disp_Write_Word+0x38>
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	491f      	ldr	r1, [pc, #124]	; (8000bac <Disp_Write_Word+0xa8>)
 8000b30:	5c8a      	ldrb	r2, [r1, r2]
 8000b32:	3308      	adds	r3, #8
 8000b34:	443b      	add	r3, r7
 8000b36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b3a:	e010      	b.n	8000b5e <Disp_Write_Word+0x5a>
				else data[j] = (digits[D[j]-32][i]);
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f1a3 0120 	sub.w	r1, r3, #32
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	4817      	ldr	r0, [pc, #92]	; (8000bac <Disp_Write_Word+0xa8>)
 8000b4e:	00c9      	lsls	r1, r1, #3
 8000b50:	4401      	add	r1, r0
 8000b52:	440a      	add	r2, r1
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	3308      	adds	r3, #8
 8000b58:	443b      	add	r3, r7
 8000b5a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (uint8_t j=0;j<4;j++)
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	3301      	adds	r3, #1
 8000b62:	71bb      	strb	r3, [r7, #6]
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d9da      	bls.n	8000b20 <Disp_Write_Word+0x1c>
			}

			Disp_Write(C,i+1,data);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	463a      	mov	r2, r7
 8000b72:	9215      	str	r2, [sp, #84]	; 0x54
 8000b74:	9314      	str	r3, [sp, #80]	; 0x50
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	2250      	movs	r2, #80	; 0x50
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f006 fbce 	bl	8007320 <memcpy>
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8a:	f7ff ff16 	bl	80009ba <Disp_Write>
	for (uint8_t i=0;i<8;i++)//przepisanie danych z pamięci na poszczególne wartości liczbowe do wyświetlenia
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	3301      	adds	r3, #1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d9bf      	bls.n	8000b1a <Disp_Write_Word+0x16>
		}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	08007cac 	.word	0x08007cac

08000bb0 <Disp_Write_Word_Shift>:

void Disp_Write_Word_Shift(struct Conf C,char *D,uint8_t size)
{
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb6:	b09d      	sub	sp, #116	; 0x74
 8000bb8:	af16      	add	r7, sp, #88	; 0x58
 8000bba:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8000bbe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000bc2:	466b      	mov	r3, sp
 8000bc4:	461e      	mov	r6, r3
	size +=4;
 8000bc6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000bca:	3304      	adds	r3, #4
 8000bcc:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	uint8_t dataout[4];
	uint16_t datam[size][8];
 8000bd0:	f897 109c 	ldrb.w	r1, [r7, #156]	; 0x9c
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	b2cb      	uxtb	r3, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4698      	mov	r8, r3
 8000be0:	4691      	mov	r9, r2
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000bee:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000bf2:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000bf6:	b2cb      	uxtb	r3, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	01eb      	lsls	r3, r5, #7
 8000c08:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000c0c:	01e2      	lsls	r2, r4, #7
 8000c0e:	460b      	mov	r3, r1
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	3307      	adds	r3, #7
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	ebad 0d03 	sub.w	sp, sp, r3
 8000c1c:	ab16      	add	r3, sp, #88	; 0x58
 8000c1e:	3301      	adds	r3, #1
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
	uint8_t help=0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	753b      	strb	r3, [r7, #20]

	for (uint8_t i=0;i<8;i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	757b      	strb	r3, [r7, #21]
 8000c2e:	e034      	b.n	8000c9a <Disp_Write_Word_Shift+0xea>
			{
				for (uint8_t j=0;j<size;j++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	75bb      	strb	r3, [r7, #22]
 8000c34:	e029      	b.n	8000c8a <Disp_Write_Word_Shift+0xda>
				{
					if(j<4) datam[j][i] = (digits[0][i]);
 8000c36:	7dbb      	ldrb	r3, [r7, #22]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d80c      	bhi.n	8000c56 <Disp_Write_Word_Shift+0xa6>
 8000c3c:	7d7b      	ldrb	r3, [r7, #21]
 8000c3e:	4aa4      	ldr	r2, [pc, #656]	; (8000ed0 <Disp_Write_Word_Shift+0x320>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	7db9      	ldrb	r1, [r7, #22]
 8000c44:	7d7a      	ldrb	r2, [r7, #21]
 8000c46:	b298      	uxth	r0, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	00c9      	lsls	r1, r1, #3
 8000c4c:	440a      	add	r2, r1
 8000c4e:	4601      	mov	r1, r0
 8000c50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000c54:	e016      	b.n	8000c84 <Disp_Write_Word_Shift+0xd4>
					else datam[j][i] = (digits[D[j-4]-32][i]);
 8000c56:	7dbb      	ldrb	r3, [r7, #22]
 8000c58:	3b04      	subs	r3, #4
 8000c5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	f1a3 0220 	sub.w	r2, r3, #32
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	4999      	ldr	r1, [pc, #612]	; (8000ed0 <Disp_Write_Word_Shift+0x320>)
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	440a      	add	r2, r1
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	7db9      	ldrb	r1, [r7, #22]
 8000c74:	7d7a      	ldrb	r2, [r7, #21]
 8000c76:	b298      	uxth	r0, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	00c9      	lsls	r1, r1, #3
 8000c7c:	440a      	add	r2, r1
 8000c7e:	4601      	mov	r1, r0
 8000c80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (uint8_t j=0;j<size;j++)
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	3301      	adds	r3, #1
 8000c88:	75bb      	strb	r3, [r7, #22]
 8000c8a:	7dba      	ldrb	r2, [r7, #22]
 8000c8c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3d0      	bcc.n	8000c36 <Disp_Write_Word_Shift+0x86>
	for (uint8_t i=0;i<8;i++)
 8000c94:	7d7b      	ldrb	r3, [r7, #21]
 8000c96:	3301      	adds	r3, #1
 8000c98:	757b      	strb	r3, [r7, #21]
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d9c7      	bls.n	8000c30 <Disp_Write_Word_Shift+0x80>
				}
			}


	for(uint8_t x=0;x<size;x++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	75fb      	strb	r3, [r7, #23]
 8000ca4:	e106      	b.n	8000eb4 <Disp_Write_Word_Shift+0x304>
	{
		for (uint8_t i=0;i<8;i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	74fb      	strb	r3, [r7, #19]
 8000caa:	e0d5      	b.n	8000e58 <Disp_Write_Word_Shift+0x2a8>
						{

				for (uint8_t j=0;j<8;j++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	74bb      	strb	r3, [r7, #18]
 8000cb0:	e0c8      	b.n	8000e44 <Disp_Write_Word_Shift+0x294>
							{
					for (uint8_t k=0;k<size;k++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	747b      	strb	r3, [r7, #17]
 8000cb6:	e013      	b.n	8000ce0 <Disp_Write_Word_Shift+0x130>
					{
						datam[k][j]=datam[k][j]<<1;
 8000cb8:	7c79      	ldrb	r1, [r7, #17]
 8000cba:	7cba      	ldrb	r2, [r7, #18]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	00c9      	lsls	r1, r1, #3
 8000cc0:	440a      	add	r2, r1
 8000cc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cc6:	7c79      	ldrb	r1, [r7, #17]
 8000cc8:	7cba      	ldrb	r2, [r7, #18]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	00c9      	lsls	r1, r1, #3
 8000cd2:	440a      	add	r2, r1
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					for (uint8_t k=0;k<size;k++)
 8000cda:	7c7b      	ldrb	r3, [r7, #17]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	747b      	strb	r3, [r7, #17]
 8000ce0:	7c7a      	ldrb	r2, [r7, #17]
 8000ce2:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3e6      	bcc.n	8000cb8 <Disp_Write_Word_Shift+0x108>
					}
							if (datam[1][j]>255)
 8000cea:	7cba      	ldrb	r2, [r7, #18]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cf4:	2bff      	cmp	r3, #255	; 0xff
 8000cf6:	d915      	bls.n	8000d24 <Disp_Write_Word_Shift+0x174>
							{
								datam[1][j]=datam[1][j]-256;
 8000cf8:	7cba      	ldrb	r2, [r7, #18]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d02:	7cba      	ldrb	r2, [r7, #18]
 8000d04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
								datam[0][j]++;
 8000d12:	7cbb      	ldrb	r3, [r7, #18]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	b291      	uxth	r1, r2
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							}

							if (datam[2][j]>255)
 8000d24:	7cba      	ldrb	r2, [r7, #18]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3210      	adds	r2, #16
 8000d2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2e:	2bff      	cmp	r3, #255	; 0xff
 8000d30:	d918      	bls.n	8000d64 <Disp_Write_Word_Shift+0x1b4>
							{
								datam[2][j]=datam[2][j]-256;
 8000d32:	7cba      	ldrb	r2, [r7, #18]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3210      	adds	r2, #16
 8000d38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d3c:	7cba      	ldrb	r2, [r7, #18]
 8000d3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d42:	b299      	uxth	r1, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3210      	adds	r2, #16
 8000d48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
								datam[1][j]++;
 8000d4c:	7cbb      	ldrb	r3, [r7, #18]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f103 0108 	add.w	r1, r3, #8
 8000d54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000d58:	3201      	adds	r2, #1
 8000d5a:	b291      	uxth	r1, r2
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	3308      	adds	r3, #8
 8000d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							}

							if (datam[3][j]>255)
 8000d64:	7cba      	ldrb	r2, [r7, #18]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	3218      	adds	r2, #24
 8000d6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d918      	bls.n	8000da4 <Disp_Write_Word_Shift+0x1f4>
							{
								datam[3][j]=datam[3][j]-256;
 8000d72:	7cba      	ldrb	r2, [r7, #18]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	3218      	adds	r2, #24
 8000d78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d7c:	7cba      	ldrb	r2, [r7, #18]
 8000d7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d82:	b299      	uxth	r1, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3218      	adds	r2, #24
 8000d88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
								datam[2][j]++;
 8000d8c:	7cbb      	ldrb	r3, [r7, #18]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f103 0110 	add.w	r1, r3, #16
 8000d94:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000d98:	3201      	adds	r2, #1
 8000d9a:	b291      	uxth	r1, r2
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	3310      	adds	r3, #16
 8000da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							}
							if (datam[4][j]>255)
 8000da4:	7cba      	ldrb	r2, [r7, #18]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3220      	adds	r2, #32
 8000daa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d918      	bls.n	8000de4 <Disp_Write_Word_Shift+0x234>
							{
								datam[4][j]=datam[4][j]-256;
 8000db2:	7cba      	ldrb	r2, [r7, #18]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3220      	adds	r2, #32
 8000db8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dbc:	7cba      	ldrb	r2, [r7, #18]
 8000dbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3220      	adds	r2, #32
 8000dc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
								datam[3][j]++;
 8000dcc:	7cbb      	ldrb	r3, [r7, #18]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f103 0118 	add.w	r1, r3, #24
 8000dd4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000dd8:	3201      	adds	r2, #1
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	3318      	adds	r3, #24
 8000de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							}

							dataout[0]=datam[0][j]& 0xff;
 8000de4:	7cba      	ldrb	r2, [r7, #18]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	713b      	strb	r3, [r7, #4]
							dataout[1]=datam[1][j]& 0xff;
 8000df0:	7cba      	ldrb	r2, [r7, #18]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3208      	adds	r2, #8
 8000df6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	717b      	strb	r3, [r7, #5]
							dataout[2]=datam[2][j]& 0xff;
 8000dfe:	7cba      	ldrb	r2, [r7, #18]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3210      	adds	r2, #16
 8000e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	71bb      	strb	r3, [r7, #6]
							dataout[3]=datam[3][j]& 0xff;
 8000e0c:	7cba      	ldrb	r2, [r7, #18]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3218      	adds	r2, #24
 8000e12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	71fb      	strb	r3, [r7, #7]
							Disp_Write(C,j+1,dataout);
 8000e1a:	7cbb      	ldrb	r3, [r7, #18]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	1d3a      	adds	r2, r7, #4
 8000e22:	9215      	str	r2, [sp, #84]	; 0x54
 8000e24:	9314      	str	r3, [sp, #80]	; 0x50
 8000e26:	4668      	mov	r0, sp
 8000e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e2c:	2250      	movs	r2, #80	; 0x50
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f006 fa76 	bl	8007320 <memcpy>
 8000e34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3a:	f7ff fdbe 	bl	80009ba <Disp_Write>
				for (uint8_t j=0;j<8;j++)
 8000e3e:	7cbb      	ldrb	r3, [r7, #18]
 8000e40:	3301      	adds	r3, #1
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	7cbb      	ldrb	r3, [r7, #18]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	f67f af33 	bls.w	8000cb2 <Disp_Write_Word_Shift+0x102>
							}
		vTaskDelay(100);
 8000e4c:	2064      	movs	r0, #100	; 0x64
 8000e4e:	f004 fc5f 	bl	8005710 <vTaskDelay>
		for (uint8_t i=0;i<8;i++)
 8000e52:	7cfb      	ldrb	r3, [r7, #19]
 8000e54:	3301      	adds	r3, #1
 8000e56:	74fb      	strb	r3, [r7, #19]
 8000e58:	7cfb      	ldrb	r3, [r7, #19]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	f67f af26 	bls.w	8000cac <Disp_Write_Word_Shift+0xfc>
						}
if(5+help<size)
 8000e60:	7d3b      	ldrb	r3, [r7, #20]
 8000e62:	1d5a      	adds	r2, r3, #5
 8000e64:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	da20      	bge.n	8000eae <Disp_Write_Word_Shift+0x2fe>
{	for (uint8_t i=0;i<8;i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	743b      	strb	r3, [r7, #16]
 8000e70:	e017      	b.n	8000ea2 <Disp_Write_Word_Shift+0x2f2>
				{
						datam[4][i] = (digits[D[1+help]-32][i]);
 8000e72:	7d3b      	ldrb	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	461a      	mov	r2, r3
 8000e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f1a3 0220 	sub.w	r2, r3, #32
 8000e84:	7c3b      	ldrb	r3, [r7, #16]
 8000e86:	4912      	ldr	r1, [pc, #72]	; (8000ed0 <Disp_Write_Word_Shift+0x320>)
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	440a      	add	r2, r1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	7c3a      	ldrb	r2, [r7, #16]
 8000e92:	b299      	uxth	r1, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3220      	adds	r2, #32
 8000e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
{	for (uint8_t i=0;i<8;i++)
 8000e9c:	7c3b      	ldrb	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	743b      	strb	r3, [r7, #16]
 8000ea2:	7c3b      	ldrb	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9e4      	bls.n	8000e72 <Disp_Write_Word_Shift+0x2c2>
				}
		help++;
 8000ea8:	7d3b      	ldrb	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	753b      	strb	r3, [r7, #20]
	for(uint8_t x=0;x<size;x++)
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	75fb      	strb	r3, [r7, #23]
 8000eb4:	7dfa      	ldrb	r2, [r7, #23]
 8000eb6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f4ff aef3 	bcc.w	8000ca6 <Disp_Write_Word_Shift+0xf6>
 8000ec0:	46b5      	mov	sp, r6
}

	}


}
 8000ec2:	bf00      	nop
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	08007cac 	.word	0x08007cac

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000ee8:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_ADC1_Init+0xa0>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <MX_ADC1_Init+0xa4>)
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f38:	f001 f860 	bl	8001ffc <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f42:	f000 fe31 	bl	8001ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000f58:	f001 f974 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f62:	f000 fe21 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000094 	.word	0x20000094
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001

08000f7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_ADC_MspInit+0x7c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d127      	bne.n	8000fee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_ADC_MspInit+0x84>)
 8000fea:	f001 fc3f 	bl	800286c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <MX_GPIO_Init+0x108>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a3a      	ldr	r2, [pc, #232]	; (800111c <MX_GPIO_Init+0x108>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_GPIO_Init+0x108>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <MX_GPIO_Init+0x108>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a33      	ldr	r2, [pc, #204]	; (800111c <MX_GPIO_Init+0x108>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_GPIO_Init+0x108>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <MX_GPIO_Init+0x108>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2c      	ldr	r2, [pc, #176]	; (800111c <MX_GPIO_Init+0x108>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_GPIO_Init+0x108>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_GPIO_Init+0x108>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <MX_GPIO_Init+0x108>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_GPIO_Init+0x108>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800109a:	2200      	movs	r2, #0
 800109c:	f24e 0142 	movw	r1, #57410	; 0xe042
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <MX_GPIO_Init+0x10c>)
 80010a2:	f001 fd8f 	bl	8002bc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4819      	ldr	r0, [pc, #100]	; (8001124 <MX_GPIO_Init+0x110>)
 80010be:	f001 fbd5 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80010c2:	f24e 0342 	movw	r3, #57410	; 0xe042
 80010c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_GPIO_Init+0x10c>)
 80010dc:	f001 fbc6 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80010e0:	f241 0304 	movw	r3, #4100	; 0x1004
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <MX_GPIO_Init+0x10c>)
 80010f6:	f001 fbb9 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_GPIO_Init+0x114>)
 8001110:	f001 fbac 	bl	800286c <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020000 	.word	0x40020000

0800112c <scanRows>:

volatile uint8_t wyj = 0b00000001;
volatile uint32_t counter = 0;
volatile uint8_t wej = 0;

uint8_t scanRows(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

	if(wej == 0)
 8001130:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <scanRows+0x174>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11c      	bne.n	8001174 <scanRows+0x48>
	{
	        if(counter == 10000)
 800113a:	4b5a      	ldr	r3, [pc, #360]	; (80012a4 <scanRows+0x178>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001142:	4293      	cmp	r3, r2
 8001144:	d111      	bne.n	800116a <scanRows+0x3e>
	        {
	            counter = 0;
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <scanRows+0x178>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
	            wyj = wyj * 2;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <scanRows+0x17c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <scanRows+0x17c>)
 8001158:	701a      	strb	r2, [r3, #0]
	            if(wyj > 8)
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <scanRows+0x17c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b08      	cmp	r3, #8
 8001162:	d902      	bls.n	800116a <scanRows+0x3e>
	            {
	                wyj = 1;
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <scanRows+0x17c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	            }
	        }
	        counter = counter + 1;
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <scanRows+0x178>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <scanRows+0x178>)
 8001172:	6013      	str	r3, [r2, #0]
	}

	switch(wyj) {
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <scanRows+0x17c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	2b07      	cmp	r3, #7
 800117e:	d873      	bhi.n	8001268 <scanRows+0x13c>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <scanRows+0x5c>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011a9 	.word	0x080011a9
 800118c:	080011d9 	.word	0x080011d9
 8001190:	08001269 	.word	0x08001269
 8001194:	08001209 	.word	0x08001209
 8001198:	08001269 	.word	0x08001269
 800119c:	08001269 	.word	0x08001269
 80011a0:	08001269 	.word	0x08001269
 80011a4:	08001239 	.word	0x08001239
	  case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	483f      	ldr	r0, [pc, #252]	; (80012ac <scanRows+0x180>)
 80011ae:	f001 fd09 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b8:	483c      	ldr	r0, [pc, #240]	; (80012ac <scanRows+0x180>)
 80011ba:	f001 fd03 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c4:	4839      	ldr	r0, [pc, #228]	; (80012ac <scanRows+0x180>)
 80011c6:	f001 fcfd 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	4836      	ldr	r0, [pc, #216]	; (80012ac <scanRows+0x180>)
 80011d2:	f001 fcf7 	bl	8002bc4 <HAL_GPIO_WritePin>
	    break;
 80011d6:	e05e      	b.n	8001296 <scanRows+0x16a>
	  case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2102      	movs	r1, #2
 80011dc:	4833      	ldr	r0, [pc, #204]	; (80012ac <scanRows+0x180>)
 80011de:	f001 fcf1 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e8:	4830      	ldr	r0, [pc, #192]	; (80012ac <scanRows+0x180>)
 80011ea:	f001 fceb 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f4:	482d      	ldr	r0, [pc, #180]	; (80012ac <scanRows+0x180>)
 80011f6:	f001 fce5 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	482a      	ldr	r0, [pc, #168]	; (80012ac <scanRows+0x180>)
 8001202:	f001 fcdf 	bl	8002bc4 <HAL_GPIO_WritePin>
	    break;
 8001206:	e046      	b.n	8001296 <scanRows+0x16a>
	  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	4827      	ldr	r0, [pc, #156]	; (80012ac <scanRows+0x180>)
 800120e:	f001 fcd9 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <scanRows+0x180>)
 800121a:	f001 fcd3 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001224:	4821      	ldr	r0, [pc, #132]	; (80012ac <scanRows+0x180>)
 8001226:	f001 fccd 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <scanRows+0x180>)
 8001232:	f001 fcc7 	bl	8002bc4 <HAL_GPIO_WritePin>
	    break;
 8001236:	e02e      	b.n	8001296 <scanRows+0x16a>
	  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2102      	movs	r1, #2
 800123c:	481b      	ldr	r0, [pc, #108]	; (80012ac <scanRows+0x180>)
 800123e:	f001 fcc1 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <scanRows+0x180>)
 800124a:	f001 fcbb 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	4815      	ldr	r0, [pc, #84]	; (80012ac <scanRows+0x180>)
 8001256:	f001 fcb5 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <scanRows+0x180>)
 8001262:	f001 fcaf 	bl	8002bc4 <HAL_GPIO_WritePin>
	    break;
 8001266:	e016      	b.n	8001296 <scanRows+0x16a>

	  default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2102      	movs	r1, #2
 800126c:	480f      	ldr	r0, [pc, #60]	; (80012ac <scanRows+0x180>)
 800126e:	f001 fca9 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <scanRows+0x180>)
 800127a:	f001 fca3 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <scanRows+0x180>)
 8001286:	f001 fc9d 	bl	8002bc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <scanRows+0x180>)
 8001292:	f001 fc97 	bl	8002bc4 <HAL_GPIO_WritePin>
	}
	return wyj;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <scanRows+0x17c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000e0 	.word	0x200000e0
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	20000000 	.word	0x20000000
 80012ac:	40020400 	.word	0x40020400

080012b0 <readCols>:

uint8_t readCols(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 80012b4:	2104      	movs	r1, #4
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <readCols+0x78>)
 80012b8:	f001 fc6c 	bl	8002b94 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <readCols+0x1c>
		wej = 1;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <readCols+0x7c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
		return 0b0001;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e02a      	b.n	8001322 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 80012cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d0:	4815      	ldr	r0, [pc, #84]	; (8001328 <readCols+0x78>)
 80012d2:	f001 fc5f 	bl	8002b94 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <readCols+0x36>
		wej = 2;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <readCols+0x7c>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
		return 0b0010;
 80012e2:	2302      	movs	r3, #2
 80012e4:	e01d      	b.n	8001322 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <readCols+0x80>)
 80012ec:	f001 fc52 	bl	8002b94 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <readCols+0x50>
		wej = 4;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <readCols+0x7c>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	701a      	strb	r2, [r3, #0]
		return 0b0100;
 80012fc:	2304      	movs	r3, #4
 80012fe:	e010      	b.n	8001322 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 8001300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <readCols+0x80>)
 8001306:	f001 fc45 	bl	8002b94 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <readCols+0x6a>
		wej = 8;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <readCols+0x7c>)
 8001312:	2208      	movs	r2, #8
 8001314:	701a      	strb	r2, [r3, #0]
		return 0b1000;
 8001316:	2308      	movs	r3, #8
 8001318:	e003      	b.n	8001322 <readCols+0x72>
	}
	wej = 0;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <readCols+0x7c>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020400 	.word	0x40020400
 800132c:	200000e0 	.word	0x200000e0
 8001330:	40020000 	.word	0x40020000

08001334 <decode>:

uint8_t decode(){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	scanRows();
 800133a:	f7ff fef7 	bl	800112c <scanRows>
	uint8_t cols = readCols();
 800133e:	f7ff ffb7 	bl	80012b0 <readCols>
 8001342:	4603      	mov	r3, r0
 8001344:	717b      	strb	r3, [r7, #5]
	uint8_t rows = wyj;
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <decode+0xd4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	713b      	strb	r3, [r7, #4]
	uint8_t rejMS = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
	uint8_t rejLS = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	71bb      	strb	r3, [r7, #6]

	if(cols != 0)
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d051      	beq.n	80013fe <decode+0xca>
	{
	        switch(rows){
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	3b01      	subs	r3, #1
 800135e:	2b07      	cmp	r3, #7
 8001360:	d81e      	bhi.n	80013a0 <decode+0x6c>
 8001362:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <decode+0x34>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	08001389 	.word	0x08001389
 800136c:	0800138f 	.word	0x0800138f
 8001370:	080013a1 	.word	0x080013a1
 8001374:	08001395 	.word	0x08001395
 8001378:	080013a1 	.word	0x080013a1
 800137c:	080013a1 	.word	0x080013a1
 8001380:	080013a1 	.word	0x080013a1
 8001384:	0800139b 	.word	0x0800139b
				case 1 :
					rejMS = 0b0000;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
					break;
 800138c:	e00a      	b.n	80013a4 <decode+0x70>
				case 2 :
					rejMS = 0b0100;
 800138e:	2304      	movs	r3, #4
 8001390:	71fb      	strb	r3, [r7, #7]
					break;
 8001392:	e007      	b.n	80013a4 <decode+0x70>
				case 4 :
					rejMS = 0b1000;
 8001394:	2308      	movs	r3, #8
 8001396:	71fb      	strb	r3, [r7, #7]
					break;
 8001398:	e004      	b.n	80013a4 <decode+0x70>
				case 8 :
					rejMS = 0b1100;
 800139a:	230c      	movs	r3, #12
 800139c:	71fb      	strb	r3, [r7, #7]
					break;
 800139e:	e001      	b.n	80013a4 <decode+0x70>
				default: rejMS = 0b00;
 80013a0:	2300      	movs	r3, #0
 80013a2:	71fb      	strb	r3, [r7, #7]
	        }

	        switch(cols){
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d81f      	bhi.n	80013ec <decode+0xb8>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <decode+0x80>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013d5 	.word	0x080013d5
 80013b8:	080013db 	.word	0x080013db
 80013bc:	080013ed 	.word	0x080013ed
 80013c0:	080013e1 	.word	0x080013e1
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	080013ed 	.word	0x080013ed
 80013d0:	080013e7 	.word	0x080013e7
				case 1 :
					rejLS = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71bb      	strb	r3, [r7, #6]
					break;
 80013d8:	e00a      	b.n	80013f0 <decode+0xbc>
				case 2 :
					rejLS = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	71bb      	strb	r3, [r7, #6]
					break;
 80013de:	e007      	b.n	80013f0 <decode+0xbc>
				case 4 :
					rejLS = 0b10;
 80013e0:	2302      	movs	r3, #2
 80013e2:	71bb      	strb	r3, [r7, #6]
					break;
 80013e4:	e004      	b.n	80013f0 <decode+0xbc>
				case 8 :
					rejLS = 0b11;
 80013e6:	2303      	movs	r3, #3
 80013e8:	71bb      	strb	r3, [r7, #6]
					break;
 80013ea:	e001      	b.n	80013f0 <decode+0xbc>
				default: rejLS = 0b00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	71bb      	strb	r3, [r7, #6]
	        }
		return rejMS + rejLS + 1;
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	e000      	b.n	8001400 <decode+0xcc>
	}

	return 0;
 80013fe:	2300      	movs	r3, #0

}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000

0800140c <KeyLOGIC>:
/* USER CODE BEGIN 0 */



void KeyLOGIC( void * pvParameters )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	uint8_t keycode = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
	uint16_t counter = 10000;
 8001418:	f242 7310 	movw	r3, #10000	; 0x2710
 800141c:	82fb      	strh	r3, [r7, #22]
	uint8_t flag = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	757b      	strb	r3, [r7, #21]
	char *code = '0';
 8001422:	2330      	movs	r3, #48	; 0x30
 8001424:	613b      	str	r3, [r7, #16]
	{
		//if( readKeypadSemaphore != NULL )
		//{


					keycode = decode();
 8001426:	f7ff ff85 	bl	8001334 <decode>
 800142a:	4603      	mov	r3, r0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]

					if (keycode > 0 && keycode < 11 && flag != 0)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01d      	beq.n	8001472 <KeyLOGIC+0x66>
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b0a      	cmp	r3, #10
 800143a:	d81a      	bhi.n	8001472 <KeyLOGIC+0x66>
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d017      	beq.n	8001472 <KeyLOGIC+0x66>
					{
						--keycode;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
						if( xSemaphoreTake( readKeypadSemaphore, ( TickType_t ) 10 ) == pdTRUE )
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <KeyLOGIC+0x8c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	210a      	movs	r1, #10
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fd29 	bl	8004ea8 <xQueueSemaphoreTake>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <KeyLOGIC+0x60>
						{
							if(xQueueSendToBack(keypadQueue, (void*)&keycode, (TickType_t)10) == pdPASS)
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <KeyLOGIC+0x90>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	f107 010f 	add.w	r1, r7, #15
 8001464:	2300      	movs	r3, #0
 8001466:	220a      	movs	r2, #10
 8001468:	f003 faa4 	bl	80049b4 <xQueueGenericSend>
								//sprintf(&code, "%01d", keycode);
								//HAL_UART_Transmit(&huart2, &code, 2, 10);
								//xSemaphoreGive( keyPressedSemaphore );
							}
						}
					flag = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	757b      	strb	r3, [r7, #21]
 8001470:	e010      	b.n	8001494 <KeyLOGIC+0x88>
					}
					else if(!keycode && !flag)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1d6      	bne.n	8001426 <KeyLOGIC+0x1a>
 8001478:	7d7b      	ldrb	r3, [r7, #21]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1d3      	bne.n	8001426 <KeyLOGIC+0x1a>
					{
						if(!counter)
 800147e:	8afb      	ldrh	r3, [r7, #22]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d104      	bne.n	800148e <KeyLOGIC+0x82>
						{
							counter = 10000;
 8001484:	f242 7310 	movw	r3, #10000	; 0x2710
 8001488:	82fb      	strh	r3, [r7, #22]
							flag = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	757b      	strb	r3, [r7, #21]
						}
					counter--;
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	3b01      	subs	r3, #1
 8001492:	82fb      	strh	r3, [r7, #22]
	{
 8001494:	e7c7      	b.n	8001426 <KeyLOGIC+0x1a>
 8001496:	bf00      	nop
 8001498:	2000014c 	.word	0x2000014c
 800149c:	20000144 	.word	0x20000144

080014a0 <DispLOGIC>:

}


void DispLOGIC( void * pvParameters )
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b09f      	sub	sp, #124	; 0x7c
 80014a4:	af16      	add	r7, sp, #88	; 0x58
 80014a6:	6078      	str	r0, [r7, #4]
	uint8_t digits[10] = {0};
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	809a      	strh	r2, [r3, #4]
	uint8_t buffer = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	74fb      	strb	r3, [r7, #19]
	char *code =  '0';
 80014ba:	2330      	movs	r3, #48	; 0x30
 80014bc:	60fb      	str	r3, [r7, #12]
	uint8_t counter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	77fb      	strb	r3, [r7, #31]
	uint8_t signs = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	77bb      	strb	r3, [r7, #30]

	while(1)
	{
	   if(dispQueue != NULL)
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <DispLOGIC+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80c2 	beq.w	8001654 <DispLOGIC+0x1b4>
	   {
		  //digits[counter] = 0;
	      if(xQueueReceive(dispQueue, &(buffer), (TickType_t)10) == pdPASS )
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <DispLOGIC+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f107 0113 	add.w	r1, r7, #19
 80014d8:	220a      	movs	r2, #10
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fc04 	bl	8004ce8 <xQueueReceive>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	f040 80b6 	bne.w	8001654 <DispLOGIC+0x1b4>
	      {
	    	  	switch(buffer)
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	2b6c      	cmp	r3, #108	; 0x6c
 80014ec:	d002      	beq.n	80014f4 <DispLOGIC+0x54>
 80014ee:	2b77      	cmp	r3, #119	; 0x77
 80014f0:	d034      	beq.n	800155c <DispLOGIC+0xbc>
 80014f2:	e066      	b.n	80015c2 <DispLOGIC+0x122>
	    	  	{

	    	  	case 108:
	    	  		Disp_Clear(Conf1);
 80014f4:	4c5a      	ldr	r4, [pc, #360]	; (8001660 <DispLOGIC+0x1c0>)
 80014f6:	4668      	mov	r0, sp
 80014f8:	f104 0310 	add.w	r3, r4, #16
 80014fc:	2250      	movs	r2, #80	; 0x50
 80014fe:	4619      	mov	r1, r3
 8001500:	f005 ff0e 	bl	8007320 <memcpy>
 8001504:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001508:	f7ff fa91 	bl	8000a2e <Disp_Clear>
	    	  		Disp_Write_Word(Conf1, "LOSS", 4);
 800150c:	4c54      	ldr	r4, [pc, #336]	; (8001660 <DispLOGIC+0x1c0>)
 800150e:	2304      	movs	r3, #4
 8001510:	9315      	str	r3, [sp, #84]	; 0x54
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <DispLOGIC+0x1c4>)
 8001514:	9314      	str	r3, [sp, #80]	; 0x50
 8001516:	4668      	mov	r0, sp
 8001518:	f104 0310 	add.w	r3, r4, #16
 800151c:	2250      	movs	r2, #80	; 0x50
 800151e:	4619      	mov	r1, r3
 8001520:	f005 fefe 	bl	8007320 <memcpy>
 8001524:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001528:	f7ff faec 	bl	8000b04 <Disp_Write_Word>
	    	  		vTaskDelay(500);
 800152c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001530:	f004 f8ee 	bl	8005710 <vTaskDelay>
	    	  		Disp_Write_Word(Conf1, "    ", 4);
 8001534:	4c4a      	ldr	r4, [pc, #296]	; (8001660 <DispLOGIC+0x1c0>)
 8001536:	2304      	movs	r3, #4
 8001538:	9315      	str	r3, [sp, #84]	; 0x54
 800153a:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <DispLOGIC+0x1c8>)
 800153c:	9314      	str	r3, [sp, #80]	; 0x50
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	2250      	movs	r2, #80	; 0x50
 8001546:	4619      	mov	r1, r3
 8001548:	f005 feea 	bl	8007320 <memcpy>
 800154c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001550:	f7ff fad8 	bl	8000b04 <Disp_Write_Word>
	    	  		vTaskDelay(250);
 8001554:	20fa      	movs	r0, #250	; 0xfa
 8001556:	f004 f8db 	bl	8005710 <vTaskDelay>
	    	  		break;
 800155a:	e07e      	b.n	800165a <DispLOGIC+0x1ba>
	    	  	case 119:
	    	  		Disp_Clear(Conf1);
 800155c:	4c40      	ldr	r4, [pc, #256]	; (8001660 <DispLOGIC+0x1c0>)
 800155e:	4668      	mov	r0, sp
 8001560:	f104 0310 	add.w	r3, r4, #16
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	4619      	mov	r1, r3
 8001568:	f005 feda 	bl	8007320 <memcpy>
 800156c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001570:	f7ff fa5d 	bl	8000a2e <Disp_Clear>
	    	  		Disp_Write_Word(Conf1, "WIN", 3);
 8001574:	4c3a      	ldr	r4, [pc, #232]	; (8001660 <DispLOGIC+0x1c0>)
 8001576:	2303      	movs	r3, #3
 8001578:	9315      	str	r3, [sp, #84]	; 0x54
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <DispLOGIC+0x1cc>)
 800157c:	9314      	str	r3, [sp, #80]	; 0x50
 800157e:	4668      	mov	r0, sp
 8001580:	f104 0310 	add.w	r3, r4, #16
 8001584:	2250      	movs	r2, #80	; 0x50
 8001586:	4619      	mov	r1, r3
 8001588:	f005 feca 	bl	8007320 <memcpy>
 800158c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001590:	f7ff fab8 	bl	8000b04 <Disp_Write_Word>
	    	  		vTaskDelay(250);
 8001594:	20fa      	movs	r0, #250	; 0xfa
 8001596:	f004 f8bb 	bl	8005710 <vTaskDelay>
	    	  		Disp_Write_Word(Conf1, "    ", 4);
 800159a:	4c31      	ldr	r4, [pc, #196]	; (8001660 <DispLOGIC+0x1c0>)
 800159c:	2304      	movs	r3, #4
 800159e:	9315      	str	r3, [sp, #84]	; 0x54
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <DispLOGIC+0x1c8>)
 80015a2:	9314      	str	r3, [sp, #80]	; 0x50
 80015a4:	4668      	mov	r0, sp
 80015a6:	f104 0310 	add.w	r3, r4, #16
 80015aa:	2250      	movs	r2, #80	; 0x50
 80015ac:	4619      	mov	r1, r3
 80015ae:	f005 feb7 	bl	8007320 <memcpy>
 80015b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b6:	f7ff faa5 	bl	8000b04 <Disp_Write_Word>
	    	  		vTaskDelay(250);
 80015ba:	20fa      	movs	r0, #250	; 0xfa
 80015bc:	f004 f8a8 	bl	8005710 <vTaskDelay>
	    	  		break;
 80015c0:	e04b      	b.n	800165a <DispLOGIC+0x1ba>
	    	  	default:
		    	  	digits[counter] = buffer;
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
 80015c4:	7cfa      	ldrb	r2, [r7, #19]
 80015c6:	3320      	adds	r3, #32
 80015c8:	443b      	add	r3, r7
 80015ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
					sprintf(&code, "%1d%1d%1d%1d", digits[counter], digits[counter-1], digits[counter-2], digits[counter-3]);
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	3320      	adds	r3, #32
 80015d2:	443b      	add	r3, r7
 80015d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015d8:	4619      	mov	r1, r3
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	3b01      	subs	r3, #1
 80015de:	3320      	adds	r3, #32
 80015e0:	443b      	add	r3, r7
 80015e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015e6:	461c      	mov	r4, r3
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	3b02      	subs	r3, #2
 80015ec:	3320      	adds	r3, #32
 80015ee:	443b      	add	r3, r7
 80015f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015f4:	461a      	mov	r2, r3
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	3320      	adds	r3, #32
 80015fc:	443b      	add	r3, r7
 80015fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001602:	f107 000c 	add.w	r0, r7, #12
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	9200      	str	r2, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	460a      	mov	r2, r1
 800160e:	4918      	ldr	r1, [pc, #96]	; (8001670 <DispLOGIC+0x1d0>)
 8001610:	f005 fe9c 	bl	800734c <siprintf>
					//HAL_UART_Transmit(&huart2, &code, 4, 10);
					Disp_Write_Word(Conf1, &code, counter+1);
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	3301      	adds	r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4c11      	ldr	r4, [pc, #68]	; (8001660 <DispLOGIC+0x1c0>)
 800161c:	9315      	str	r3, [sp, #84]	; 0x54
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	9314      	str	r3, [sp, #80]	; 0x50
 8001624:	4668      	mov	r0, sp
 8001626:	f104 0310 	add.w	r3, r4, #16
 800162a:	2250      	movs	r2, #80	; 0x50
 800162c:	4619      	mov	r1, r3
 800162e:	f005 fe77 	bl	8007320 <memcpy>
 8001632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001636:	f7ff fa65 	bl	8000b04 <Disp_Write_Word>
					//Disp_Write_Word_Shift(Conf1, "12345", 5);
					//code = ' ';
					counter++;
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	3301      	adds	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
					if(counter > signs)
 8001640:	7ffa      	ldrb	r2, [r7, #31]
 8001642:	7fbb      	ldrb	r3, [r7, #30]
 8001644:	429a      	cmp	r2, r3
 8001646:	d907      	bls.n	8001658 <DispLOGIC+0x1b8>
					{
						signs++;
 8001648:	7fbb      	ldrb	r3, [r7, #30]
 800164a:	3301      	adds	r3, #1
 800164c:	77bb      	strb	r3, [r7, #30]
						counter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	77fb      	strb	r3, [r7, #31]
					}

					break;
 8001652:	e001      	b.n	8001658 <DispLOGIC+0x1b8>

	    	  	}
	      }
 8001654:	bf00      	nop
 8001656:	e736      	b.n	80014c6 <DispLOGIC+0x26>
					break;
 8001658:	bf00      	nop
	   if(dispQueue != NULL)
 800165a:	e734      	b.n	80014c6 <DispLOGIC+0x26>
 800165c:	20000148 	.word	0x20000148
 8001660:	200000e4 	.word	0x200000e4
 8001664:	08007c40 	.word	0x08007c40
 8001668:	08007c48 	.word	0x08007c48
 800166c:	08007c50 	.word	0x08007c50
 8001670:	08007c54 	.word	0x08007c54

08001674 <generateRandArray>:
	   }
	}
}

int * generateRandArray()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	char *code = '0';
 800167a:	2330      	movs	r3, #48	; 0x30
 800167c:	603b      	str	r3, [r7, #0]
	static int tab[10];
	//HAL_UART_Transmit(&huart2, "generate", 8, 10);
	for(uint8_t i=0; i<=10 ;i++){
 800167e:	2300      	movs	r3, #0
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e01a      	b.n	80016ba <generateRandArray+0x46>
		HAL_ADC_Start(&hadc1);
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <generateRandArray+0x58>)
 8001686:	f000 fcfd 	bl	8002084 <HAL_ADC_Start>
		vTaskDelay(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f004 f840 	bl	8005710 <vTaskDelay>
		tab[i] = HAL_ADC_GetValue(&hadc1)%10;
 8001690:	480e      	ldr	r0, [pc, #56]	; (80016cc <generateRandArray+0x58>)
 8001692:	f000 fdc9 	bl	8002228 <HAL_ADC_GetValue>
 8001696:	4601      	mov	r1, r0
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <generateRandArray+0x5c>)
 800169a:	fba3 2301 	umull	r2, r3, r3, r1
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	1aca      	subs	r2, r1, r3
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <generateRandArray+0x60>)
 80016b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i=0; i<=10 ;i++){
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3301      	adds	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b0a      	cmp	r3, #10
 80016be:	d9e1      	bls.n	8001684 <generateRandArray+0x10>
		//sprintf(&code, "%d", tab[i]);
		//HAL_UART_Transmit(&huart2, &code, 1, 10);
	}
	//Disp_Write_Word_Shift(Conf1, &code, 10);
	return tab;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <generateRandArray+0x60>)
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000094 	.word	0x20000094
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	20000154 	.word	0x20000154

080016d8 <mainLOGIC>:


void mainLOGIC( void * pvParameters )
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b0a5      	sub	sp, #148	; 0x94
 80016dc:	af16      	add	r7, sp, #88	; 0x58
 80016de:	6078      	str	r0, [r7, #4]

	uint8_t buffer = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t check = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	char *code = '0';
 80016ec:	2330      	movs	r3, #48	; 0x30
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
	char codeToUser[10] = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	809a      	strh	r2, [r3, #4]
	uint8_t step = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t stage = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t progres = 4; // 0 - lose/ 1 - game in progress/ 2 - win/ 4 - diff select
 800170a:	2304      	movs	r3, #4
 800170c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t diff = 5;
 8001710:	2305      	movs	r3, #5
 8001712:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t randomlyGeneratedArray[10];
	int *pointerTorandomlyGeneratedArray;
	pointerTorandomlyGeneratedArray = generateRandArray();
 8001716:	f7ff ffad 	bl	8001674 <generateRandArray>
 800171a:	62f8      	str	r0, [r7, #44]	; 0x2c
	//HAL_UART_Transmit(&huart2, "copied", 6, 10);
	for (uint8_t i = 0; i <= 10; i++ ) {
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001722:	e011      	b.n	8001748 <mainLOGIC+0x70>
		randomlyGeneratedArray[i] = *(pointerTorandomlyGeneratedArray+i);
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172c:	4413      	add	r3, r2
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	3338      	adds	r3, #56	; 0x38
 8001738:	443b      	add	r3, r7
 800173a:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (uint8_t i = 0; i <= 10; i++ ) {
 800173e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001742:	3301      	adds	r3, #1
 8001744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800174c:	2b0a      	cmp	r3, #10
 800174e:	d9e9      	bls.n	8001724 <mainLOGIC+0x4c>
	//Disp_Write_Word_Shift(Conf1, &codeToUser, 1);

	while(1)
	{

		if(keypadQueue != NULL) //&& keyPressedSemaphore != NULL)
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <mainLOGIC+0x260>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80b6 	beq.w	80018c6 <mainLOGIC+0x1ee>
		{

		  if(xQueueReceive(keypadQueue, &(buffer), (TickType_t)10) == pdPASS )
 800175a:	4b77      	ldr	r3, [pc, #476]	; (8001938 <mainLOGIC+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8001762:	220a      	movs	r2, #10
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fabf 	bl	8004ce8 <xQueueReceive>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	f040 80aa 	bne.w	80018c6 <mainLOGIC+0x1ee>
		  {
				//HAL_UART_Transmit(&huart2, "Received", 8, 10);
				//sprintf(&code, "%1d", buffer);
				//HAL_UART_Transmit(&huart2, &code, 1, 10);
				//code = ' ';
				if(progres == 4) {
 8001772:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001776:	2b04      	cmp	r3, #4
 8001778:	d128      	bne.n	80017cc <mainLOGIC+0xf4>
					diff = buffer + 1;
 800177a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800177e:	3301      	adds	r3, #1
 8001780:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					progres = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					xSemaphoreGive( readKeypadSemaphore );
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <mainLOGIC+0x264>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	f003 f90e 	bl	80049b4 <xQueueGenericSend>
					sprintf(&codeToUser, "%1d", randomlyGeneratedArray[0]);
 8001798:	7b3b      	ldrb	r3, [r7, #12]
 800179a:	461a      	mov	r2, r3
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4967      	ldr	r1, [pc, #412]	; (8001940 <mainLOGIC+0x268>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fdd2 	bl	800734c <siprintf>
					Disp_Write_Word_Shift(Conf1, &codeToUser, 1);
 80017a8:	4c66      	ldr	r4, [pc, #408]	; (8001944 <mainLOGIC+0x26c>)
 80017aa:	2301      	movs	r3, #1
 80017ac:	9315      	str	r3, [sp, #84]	; 0x54
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	9314      	str	r3, [sp, #80]	; 0x50
 80017b4:	4668      	mov	r0, sp
 80017b6:	f104 0310 	add.w	r3, r4, #16
 80017ba:	2250      	movs	r2, #80	; 0x50
 80017bc:	4619      	mov	r1, r3
 80017be:	f005 fdaf 	bl	8007320 <memcpy>
 80017c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017c6:	f7ff f9f3 	bl	8000bb0 <Disp_Write_Word_Shift>
 80017ca:	e07c      	b.n	80018c6 <mainLOGIC+0x1ee>
				}
				else if(progres == 1 && (buffer == randomlyGeneratedArray[stage]) && (step <= diff-1))
 80017cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d169      	bne.n	80018a8 <mainLOGIC+0x1d0>
 80017d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80017d8:	3338      	adds	r3, #56	; 0x38
 80017da:	443b      	add	r3, r7
 80017dc:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80017e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d15f      	bne.n	80018a8 <mainLOGIC+0x1d0>
 80017e8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80017ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d959      	bls.n	80018a8 <mainLOGIC+0x1d0>
				{
					if(xQueueSendToBack(dispQueue, (void*)&buffer, (TickType_t)10) == pdPASS)
 80017f4:	4b54      	ldr	r3, [pc, #336]	; (8001948 <mainLOGIC+0x270>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 80017fc:	2300      	movs	r3, #0
 80017fe:	220a      	movs	r2, #10
 8001800:	f003 f8d8 	bl	80049b4 <xQueueGenericSend>
 8001804:	4603      	mov	r3, r0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d15c      	bne.n	80018c4 <mainLOGIC+0x1ec>
					{
						//sprintf(&code, "%01d", keycode);
						//HAL_UART_Transmit(&huart2, "Sent", 4, 10);
						//sprintf(&code, "%1d", buffer);
						//HAL_UART_Transmit(&huart2, &code, 1, 10);
						stage++;
 800180a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800180e:	3301      	adds	r3, #1
 8001810:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						xSemaphoreGive( readKeypadSemaphore );
 8001814:	4b49      	ldr	r3, [pc, #292]	; (800193c <mainLOGIC+0x264>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	f003 f8c9 	bl	80049b4 <xQueueGenericSend>
						if(stage == step+1)
 8001822:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800182a:	3301      	adds	r3, #1
 800182c:	429a      	cmp	r2, r3
 800182e:	d149      	bne.n	80018c4 <mainLOGIC+0x1ec>
						{
							step++;
 8001830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001834:	3301      	adds	r3, #1
 8001836:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							if(step <= diff-1){
 800183a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800183e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001842:	429a      	cmp	r2, r3
 8001844:	d93e      	bls.n	80018c4 <mainLOGIC+0x1ec>
								vTaskDelay(500);
 8001846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184a:	f003 ff61 	bl	8005710 <vTaskDelay>
								sprintf(&code, "%d", randomlyGeneratedArray[step]);
 800184e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001852:	3338      	adds	r3, #56	; 0x38
 8001854:	443b      	add	r3, r7
 8001856:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800185a:	461a      	mov	r2, r3
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <mainLOGIC+0x274>)
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fd72 	bl	800734c <siprintf>
								strcat(&codeToUser, &code);
 8001868:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fd8a 	bl	800738c <strcat>
								Disp_Write_Word_Shift(Conf1, &codeToUser, step+1);
 8001878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800187c:	3301      	adds	r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4c30      	ldr	r4, [pc, #192]	; (8001944 <mainLOGIC+0x26c>)
 8001882:	9315      	str	r3, [sp, #84]	; 0x54
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	9314      	str	r3, [sp, #80]	; 0x50
 800188a:	4668      	mov	r0, sp
 800188c:	f104 0310 	add.w	r3, r4, #16
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	4619      	mov	r1, r3
 8001894:	f005 fd44 	bl	8007320 <memcpy>
 8001898:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800189c:	f7ff f988 	bl	8000bb0 <Disp_Write_Word_Shift>
								stage = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					if(xQueueSendToBack(dispQueue, (void*)&buffer, (TickType_t)10) == pdPASS)
 80018a6:	e00d      	b.n	80018c4 <mainLOGIC+0x1ec>
							}
						}
					}
				}
				else if(step >= diff) progres = 2;
 80018a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80018ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d303      	bcc.n	80018bc <mainLOGIC+0x1e4>
 80018b4:	2302      	movs	r3, #2
 80018b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80018ba:	e004      	b.n	80018c6 <mainLOGIC+0x1ee>
				else progres = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80018c2:	e000      	b.n	80018c6 <mainLOGIC+0x1ee>
					if(xQueueSendToBack(dispQueue, (void*)&buffer, (TickType_t)10) == pdPASS)
 80018c4:	bf00      	nop
		  }
	   }
		if(step >= diff) progres = 2;
 80018c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80018ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d302      	bcc.n	80018d8 <mainLOGIC+0x200>
 80018d2:	2302      	movs	r3, #2
 80018d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		//else if(step < diff) progres = 0;
		if(progres == 2)
 80018d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d112      	bne.n	8001906 <mainLOGIC+0x22e>
		{
			if(xQueueSendToBack(dispQueue, (void*)"w", (TickType_t)10) == pdPASS)
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <mainLOGIC+0x270>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	220a      	movs	r2, #10
 80018e8:	4919      	ldr	r1, [pc, #100]	; (8001950 <mainLOGIC+0x278>)
 80018ea:	f003 f863 	bl	80049b4 <xQueueGenericSend>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f47f af2d 	bne.w	8001750 <mainLOGIC+0x78>
			{
				//HAL_UART_Transmit(&huart2, "Sent", 4, 10);
				//HAL_UART_Transmit(&huart2, "WIN", 3, 10);
				xSemaphoreGive( readKeypadSemaphore );
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <mainLOGIC+0x264>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	f003 f858 	bl	80049b4 <xQueueGenericSend>
 8001904:	e724      	b.n	8001750 <mainLOGIC+0x78>
			}
		}
		else if(progres == 0)
 8001906:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800190a:	2b00      	cmp	r3, #0
 800190c:	f47f af20 	bne.w	8001750 <mainLOGIC+0x78>
		{
			if(xQueueSendToBack(dispQueue, (void*)"l", (TickType_t)10) == pdPASS)
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <mainLOGIC+0x270>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	220a      	movs	r2, #10
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <mainLOGIC+0x27c>)
 800191a:	f003 f84b 	bl	80049b4 <xQueueGenericSend>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	f47f af15 	bne.w	8001750 <mainLOGIC+0x78>
			{
				//HAL_UART_Transmit(&huart2, "Sent", 4, 10);
				//HAL_UART_Transmit(&huart2, "LOSS", 4, 10);
				xSemaphoreGive( readKeypadSemaphore );
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <mainLOGIC+0x264>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	f003 f840 	bl	80049b4 <xQueueGenericSend>
		if(keypadQueue != NULL) //&& keyPressedSemaphore != NULL)
 8001934:	e70c      	b.n	8001750 <mainLOGIC+0x78>
 8001936:	bf00      	nop
 8001938:	20000144 	.word	0x20000144
 800193c:	2000014c 	.word	0x2000014c
 8001940:	08007c64 	.word	0x08007c64
 8001944:	200000e4 	.word	0x200000e4
 8001948:	20000148 	.word	0x20000148
 800194c:	08007c68 	.word	0x08007c68
 8001950:	08007c6c 	.word	0x08007c6c
 8001954:	08007c70 	.word	0x08007c70

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b097      	sub	sp, #92	; 0x5c
 800195c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f000 fadb 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f000 f8b3 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f7ff fb55 	bl	8001014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800196a:	f000 fa39 	bl	8001de0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800196e:	f000 f921 	bl	8001bb4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001972:	f7ff faaf 	bl	8000ed4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Conf1.GPIO_Pin=GPIO_PIN_6;
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <main+0x138>)
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  Conf1.GPIOx=GPIOB;
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <main+0x138>)
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <main+0x13c>)
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
  Conf1.hspi=hspi1;
 8001984:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <main+0x138>)
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <main+0x140>)
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	2358      	movs	r3, #88	; 0x58
 800198e:	461a      	mov	r2, r3
 8001990:	f005 fcc6 	bl	8007320 <memcpy>
  Disp_Init(Conf1, 0x01);
 8001994:	4c3e      	ldr	r4, [pc, #248]	; (8001a90 <main+0x138>)
 8001996:	2301      	movs	r3, #1
 8001998:	9314      	str	r3, [sp, #80]	; 0x50
 800199a:	4668      	mov	r0, sp
 800199c:	f104 0310 	add.w	r3, r4, #16
 80019a0:	2250      	movs	r2, #80	; 0x50
 80019a2:	4619      	mov	r1, r3
 80019a4:	f005 fcbc 	bl	8007320 <memcpy>
 80019a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ac:	f7fe fe1f 	bl	80005ee <Disp_Init>

  xTaskCreate(
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2301      	movs	r3, #1
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019be:	4937      	ldr	r1, [pc, #220]	; (8001a9c <main+0x144>)
 80019c0:	4837      	ldr	r0, [pc, #220]	; (8001aa0 <main+0x148>)
 80019c2:	f003 fd60 	bl	8005486 <xTaskCreate>
                      1000,      /* Stack size in words, not bytes. */
                      NULL,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
                      NULL );      /* Used to pass out the created task's handle. */

  xTaskCreate(
 80019c6:	2300      	movs	r3, #0
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	2301      	movs	r3, #1
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d4:	4933      	ldr	r1, [pc, #204]	; (8001aa4 <main+0x14c>)
 80019d6:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <main+0x150>)
 80019d8:	f003 fd55 	bl	8005486 <xTaskCreate>
                      1000,      /* Stack size in words, not bytes. */
                      NULL,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
                      NULL );      /* Used to pass out the created task's handle. */

  xTaskCreate(
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2301      	movs	r3, #1
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ea:	4930      	ldr	r1, [pc, #192]	; (8001aac <main+0x154>)
 80019ec:	4830      	ldr	r0, [pc, #192]	; (8001ab0 <main+0x158>)
 80019ee:	f003 fd4a 	bl	8005486 <xTaskCreate>
                      NULL );      /* Used to pass out the created task's handle. */




  keypadQueue = xQueueCreate( 10, sizeof(uint8_t));
 80019f2:	2200      	movs	r2, #0
 80019f4:	2101      	movs	r1, #1
 80019f6:	200a      	movs	r0, #10
 80019f8:	f002 ff7e 	bl	80048f8 <xQueueGenericCreate>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <main+0x15c>)
 8001a00:	6013      	str	r3, [r2, #0]
  if(keypadQueue == 0) HAL_UART_Transmit(&huart2, "Err_queue", 9, 10);
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <main+0x15c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <main+0xbe>
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	492a      	ldr	r1, [pc, #168]	; (8001ab8 <main+0x160>)
 8001a10:	482a      	ldr	r0, [pc, #168]	; (8001abc <main+0x164>)
 8001a12:	f002 f9b6 	bl	8003d82 <HAL_UART_Transmit>
  dispQueue = xQueueCreate( 10, sizeof(uint8_t));
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f002 ff6c 	bl	80048f8 <xQueueGenericCreate>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <main+0x168>)
 8001a24:	6013      	str	r3, [r2, #0]
  if(dispQueue == 0) HAL_UART_Transmit(&huart2, "Err_queue", 9, 10);
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <main+0x168>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <main+0xe2>
 8001a2e:	230a      	movs	r3, #10
 8001a30:	2209      	movs	r2, #9
 8001a32:	4921      	ldr	r1, [pc, #132]	; (8001ab8 <main+0x160>)
 8001a34:	4821      	ldr	r0, [pc, #132]	; (8001abc <main+0x164>)
 8001a36:	f002 f9a4 	bl	8003d82 <HAL_UART_Transmit>

  readKeypadSemaphore = xSemaphoreCreateBinary();
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f002 ff5a 	bl	80048f8 <xQueueGenericCreate>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <main+0x16c>)
 8001a48:	6013      	str	r3, [r2, #0]
  keyPressedSemaphore = xSemaphoreCreateBinary();
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f002 ff52 	bl	80048f8 <xQueueGenericCreate>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <main+0x170>)
 8001a58:	6013      	str	r3, [r2, #0]

  xSemaphoreGive( readKeypadSemaphore );
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <main+0x16c>)
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	f002 ffa6 	bl	80049b4 <xQueueGenericSend>

  Disp_Clear(Conf1);
 8001a68:	4c09      	ldr	r4, [pc, #36]	; (8001a90 <main+0x138>)
 8001a6a:	4668      	mov	r0, sp
 8001a6c:	f104 0310 	add.w	r3, r4, #16
 8001a70:	2250      	movs	r2, #80	; 0x50
 8001a72:	4619      	mov	r1, r3
 8001a74:	f005 fc54 	bl	8007320 <memcpy>
 8001a78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a7c:	f7fe ffd7 	bl	8000a2e <Disp_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a80:	f002 fd28 	bl	80044d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a84:	f7ff fabe 	bl	8001004 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a88:	f002 fd48 	bl	800451c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <main+0x134>
 8001a8e:	bf00      	nop
 8001a90:	200000e4 	.word	0x200000e4
 8001a94:	40020400 	.word	0x40020400
 8001a98:	2000017c 	.word	0x2000017c
 8001a9c:	08007c74 	.word	0x08007c74
 8001aa0:	080016d9 	.word	0x080016d9
 8001aa4:	08007c7c 	.word	0x08007c7c
 8001aa8:	0800140d 	.word	0x0800140d
 8001aac:	08007c80 	.word	0x08007c80
 8001ab0:	080014a1 	.word	0x080014a1
 8001ab4:	20000144 	.word	0x20000144
 8001ab8:	08007c88 	.word	0x08007c88
 8001abc:	200001d8 	.word	0x200001d8
 8001ac0:	20000148 	.word	0x20000148
 8001ac4:	2000014c 	.word	0x2000014c
 8001ac8:	20000150 	.word	0x20000150

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b094      	sub	sp, #80	; 0x50
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fc2e 	bl	800733c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <SystemClock_Config+0xd4>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <SystemClock_Config+0xd4>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <SystemClock_Config+0xd4>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <SystemClock_Config+0xd8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <SystemClock_Config+0xd8>)
 8001b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <SystemClock_Config+0xd8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b34:	2310      	movs	r3, #16
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b40:	2310      	movs	r3, #16
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fb96 	bl	800328c <HAL_RCC_OscConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b66:	f000 f81f 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f836 	bl	8002bf8 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b92:	f000 f809 	bl	8001ba8 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3750      	adds	r7, #80	; 0x50
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <MX_SPI1_Init+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be8:	2228      	movs	r2, #40	; 0x28
 8001bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c00:	220a      	movs	r2, #10
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c06:	f001 fddf 	bl	80037c8 <HAL_SPI_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c10:	f7ff ffca 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000017c 	.word	0x2000017c
 8001c1c:	40013000 	.word	0x40013000

08001c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <HAL_SPI_MspInit+0x84>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12b      	bne.n	8001c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c7a:	23e0      	movs	r3, #224	; 0xe0
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_SPI_MspInit+0x8c>)
 8001c96:	f000 fde9 	bl	800286c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40013000 	.word	0x40013000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_MspInit+0x54>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_MspInit+0x54>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x54>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_MspInit+0x54>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_MspInit+0x54>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_MspInit+0x54>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	f06f 0001 	mvn.w	r0, #1
 8001cf6:	f000 fd90 	bl	800281a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f940 	bl	8001fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d3c:	f004 f964 	bl	8006008 <xTaskGetSchedulerState>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d46:	f005 f847 	bl	8006dd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f005 faa4 	bl	80072cc <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20020000 	.word	0x20020000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200001d4 	.word	0x200001d4
 8001db8:	20004b80 	.word	0x20004b80

08001dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <MX_USART2_UART_Init+0x50>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e18:	f001 ff66 	bl	8003ce8 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e22:	f7ff fec1 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001d8 	.word	0x200001d8
 8001e30:	40004400 	.word	0x40004400

08001e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_UART_MspInit+0x84>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_UART_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <HAL_UART_MspInit+0x8c>)
 8001eaa:	f000 fcdf 	bl	800286c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40004400 	.word	0x40004400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eca:	490e      	ldr	r1, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee0:	4c0b      	ldr	r4, [pc, #44]	; (8001f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eee:	f7ff ff65 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f005 f9f1 	bl	80072d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff fd2f 	bl	8001958 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f08:	08007ff8 	.word	0x08007ff8
  ldr r2, =_sbss
 8001f0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f10:	20004b80 	.word	0x20004b80

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 fc5f 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff feb0 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fc69 	bl	8002852 <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 fc3f 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	2000021c 	.word	0x2000021c

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000021c 	.word	0x2000021c

08001ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e033      	b.n	800207a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ffae 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa2a 	bl	80024a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
 800206a:	e001      	b.n	8002070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_Start+0x1a>
 800209a:	2302      	movs	r3, #2
 800209c:	e0b2      	b.n	8002204 <HAL_ADC_Start+0x180>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d018      	beq.n	80020e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_ADC_Start+0x18c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_ADC_Start+0x190>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0c9a      	lsrs	r2, r3, #18
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d17a      	bne.n	80021ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	d106      	bne.n	8002142 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f023 0206 	bic.w	r2, r3, #6
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
 8002140:	e002      	b.n	8002148 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_ADC_Start+0x194>)
 8002152:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800215c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12a      	bne.n	80021c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2b      	ldr	r2, [pc, #172]	; (800221c <HAL_ADC_Start+0x198>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d015      	beq.n	80021a0 <HAL_ADC_Start+0x11c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_ADC_Start+0x19c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d105      	bne.n	800218a <HAL_ADC_Start+0x106>
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_ADC_Start+0x194>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_ADC_Start+0x1a0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d136      	bne.n	8002202 <HAL_ADC_Start+0x17e>
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_ADC_Start+0x194>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d130      	bne.n	8002202 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d129      	bne.n	8002202 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	e020      	b.n	8002202 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_ADC_Start+0x198>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d11b      	bne.n	8002202 <HAL_ADC_Start+0x17e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d114      	bne.n	8002202 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e00b      	b.n	8002202 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20000004 	.word	0x20000004
 8002214:	431bde83 	.word	0x431bde83
 8002218:	40012300 	.word	0x40012300
 800221c:	40012000 	.word	0x40012000
 8002220:	40012100 	.word	0x40012100
 8002224:	40012200 	.word	0x40012200

08002228 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e113      	b.n	8002488 <HAL_ADC_ConfigChannel+0x244>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b09      	cmp	r3, #9
 800226e:	d925      	bls.n	80022bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	3b1e      	subs	r3, #30
 8002286:	2207      	movs	r2, #7
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4403      	add	r3, r0
 80022ae:	3b1e      	subs	r3, #30
 80022b0:	409a      	lsls	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e022      	b.n	8002302 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	2207      	movs	r2, #7
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	409a      	lsls	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d824      	bhi.n	8002354 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b05      	subs	r3, #5
 800231c:	221f      	movs	r2, #31
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b05      	subs	r3, #5
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34
 8002352:	e04c      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d824      	bhi.n	80023a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b23      	subs	r3, #35	; 0x23
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43da      	mvns	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	400a      	ands	r2, r1
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b23      	subs	r3, #35	; 0x23
 8002398:	fa00 f203 	lsl.w	r2, r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
 80023a4:	e023      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b41      	subs	r3, #65	; 0x41
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	400a      	ands	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b41      	subs	r3, #65	; 0x41
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_ADC_ConfigChannel+0x250>)
 80023f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_ADC_ConfigChannel+0x254>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10f      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1d8>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d10b      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_ADC_ConfigChannel+0x254>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d12b      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_ADC_ConfigChannel+0x258>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x1f4>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b11      	cmp	r3, #17
 8002436:	d122      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_ADC_ConfigChannel+0x258>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_ADC_ConfigChannel+0x25c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_ADC_ConfigChannel+0x260>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9a      	lsrs	r2, r3, #18
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	10000012 	.word	0x10000012
 80024a0:	20000004 	.word	0x20000004
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b0:	4b79      	ldr	r3, [pc, #484]	; (8002698 <ADC_Init+0x1f0>)
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	4a58      	ldr	r2, [pc, #352]	; (800269c <ADC_Init+0x1f4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e00f      	b.n	80025a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	005a      	lsls	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	035a      	lsls	r2, r3, #13
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e007      	b.n	800261c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	3b01      	subs	r3, #1
 8002638:	051a      	lsls	r2, r3, #20
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	029a      	lsls	r2, r3, #10
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40012300 	.word	0x40012300
 800269c:	0f000001 	.word	0x0f000001

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff47 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff5c 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffb0 	bl	80027c0 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e165      	b.n	8002b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 8154 	bne.w	8002b4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d005      	beq.n	80028be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d017      	beq.n	800295c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d123      	bne.n	80029b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	08da      	lsrs	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3208      	adds	r2, #8
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80ae 	beq.w	8002b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_GPIO_Init+0x300>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_GPIO_Init+0x300>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <HAL_GPIO_Init+0x300>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0e:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_GPIO_Init+0x308>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d025      	beq.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01f      	beq.n	8002a82 <HAL_GPIO_Init+0x216>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0x212>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4c      	ldr	r2, [pc, #304]	; (8002b80 <HAL_GPIO_Init+0x314>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0x20e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_GPIO_Init+0x318>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00d      	beq.n	8002a76 <HAL_GPIO_Init+0x20a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_GPIO_Init+0x31c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <HAL_GPIO_Init+0x320>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_GPIO_Init+0x202>
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae96 	bls.w	8002888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e001      	b.n	8002bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0cc      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d90c      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d044      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d119      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e067      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7ff f97c 	bl	8001fe4 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7ff f978 	bl	8001fe4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e04f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d20c      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7e:	f000 f855 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	490a      	ldr	r1, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f8dc 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08007f9c 	.word	0x08007f9c
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08007fac 	.word	0x08007fac

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff ffdc 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08007fac 	.word	0x08007fac

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b0ae      	sub	sp, #184	; 0xb8
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e52:	4bcb      	ldr	r3, [pc, #812]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	f200 8206 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x440>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	0800326d 	.word	0x0800326d
 8002e70:	0800326d 	.word	0x0800326d
 8002e74:	0800326d 	.word	0x0800326d
 8002e78:	08002ea5 	.word	0x08002ea5
 8002e7c:	0800326d 	.word	0x0800326d
 8002e80:	0800326d 	.word	0x0800326d
 8002e84:	0800326d 	.word	0x0800326d
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	0800326d 	.word	0x0800326d
 8002e90:	0800326d 	.word	0x0800326d
 8002e94:	0800326d 	.word	0x0800326d
 8002e98:	0800309d 	.word	0x0800309d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4bb9      	ldr	r3, [pc, #740]	; (8003184 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ea2:	e1e7      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea4:	4bb8      	ldr	r3, [pc, #736]	; (8003188 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eaa:	e1e3      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eac:	4bb4      	ldr	r3, [pc, #720]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb8:	4bb1      	ldr	r3, [pc, #708]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d071      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec4:	4bae      	ldr	r3, [pc, #696]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	6439      	str	r1, [r7, #64]	; 0x40
 8002f08:	4629      	mov	r1, r5
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	4641      	mov	r1, r8
 8002f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f26:	4641      	mov	r1, r8
 8002f28:	018a      	lsls	r2, r1, #6
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	1a51      	subs	r1, r2, r1
 8002f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f30:	4649      	mov	r1, r9
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f44:	4649      	mov	r1, r9
 8002f46:	00cb      	lsls	r3, r1, #3
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4e:	4641      	mov	r1, r8
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	4622      	mov	r2, r4
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	462b      	mov	r3, r5
 8002f60:	460a      	mov	r2, r1
 8002f62:	eb42 0303 	adc.w	r3, r2, r3
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f74:	4629      	mov	r1, r5
 8002f76:	024b      	lsls	r3, r1, #9
 8002f78:	4621      	mov	r1, r4
 8002f7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f7e:	4621      	mov	r1, r4
 8002f80:	024a      	lsls	r2, r1, #9
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f98:	f7fd f98a 	bl	80002b0 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa6:	e067      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fca:	4622      	mov	r2, r4
 8002fcc:	462b      	mov	r3, r5
 8002fce:	f04f 0000 	mov.w	r0, #0
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	0159      	lsls	r1, r3, #5
 8002fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fdc:	0150      	lsls	r0, r2, #5
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	1a51      	subs	r1, r2, r1
 8002fe6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fe8:	4629      	mov	r1, r5
 8002fea:	eb63 0301 	sbc.w	r3, r3, r1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	018b      	lsls	r3, r1, #6
 8003000:	4641      	mov	r1, r8
 8003002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003006:	4641      	mov	r1, r8
 8003008:	018a      	lsls	r2, r1, #6
 800300a:	4641      	mov	r1, r8
 800300c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003010:	4649      	mov	r1, r9
 8003012:	eb63 0b01 	sbc.w	fp, r3, r1
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003022:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800302a:	4692      	mov	sl, r2
 800302c:	469b      	mov	fp, r3
 800302e:	4623      	mov	r3, r4
 8003030:	eb1a 0303 	adds.w	r3, sl, r3
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	462b      	mov	r3, r5
 8003038:	eb4b 0303 	adc.w	r3, fp, r3
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800304a:	4629      	mov	r1, r5
 800304c:	028b      	lsls	r3, r1, #10
 800304e:	4621      	mov	r1, r4
 8003050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003054:	4621      	mov	r1, r4
 8003056:	028a      	lsls	r2, r1, #10
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	2200      	movs	r2, #0
 8003062:	673b      	str	r3, [r7, #112]	; 0x70
 8003064:	677a      	str	r2, [r7, #116]	; 0x74
 8003066:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800306a:	f7fd f921 	bl	80002b0 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003078:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800308a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800308e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309a:	e0eb      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d06b      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_RCC_GetSysClockFreq+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	2200      	movs	r2, #0
 80030bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
 80030c8:	2300      	movs	r3, #0
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
 80030cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030d0:	4622      	mov	r2, r4
 80030d2:	462b      	mov	r3, r5
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	0159      	lsls	r1, r3, #5
 80030de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e2:	0150      	lsls	r0, r2, #5
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4621      	mov	r1, r4
 80030ea:	1a51      	subs	r1, r2, r1
 80030ec:	61b9      	str	r1, [r7, #24]
 80030ee:	4629      	mov	r1, r5
 80030f0:	eb63 0301 	sbc.w	r3, r3, r1
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003102:	4659      	mov	r1, fp
 8003104:	018b      	lsls	r3, r1, #6
 8003106:	4651      	mov	r1, sl
 8003108:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310c:	4651      	mov	r1, sl
 800310e:	018a      	lsls	r2, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ebb2 0801 	subs.w	r8, r2, r1
 8003116:	4659      	mov	r1, fp
 8003118:	eb63 0901 	sbc.w	r9, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003128:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003130:	4690      	mov	r8, r2
 8003132:	4699      	mov	r9, r3
 8003134:	4623      	mov	r3, r4
 8003136:	eb18 0303 	adds.w	r3, r8, r3
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	462b      	mov	r3, r5
 800313e:	eb49 0303 	adc.w	r3, r9, r3
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003150:	4629      	mov	r1, r5
 8003152:	024b      	lsls	r3, r1, #9
 8003154:	4621      	mov	r1, r4
 8003156:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315a:	4621      	mov	r1, r4
 800315c:	024a      	lsls	r2, r1, #9
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003166:	2200      	movs	r2, #0
 8003168:	65bb      	str	r3, [r7, #88]	; 0x58
 800316a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800316c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003170:	f7fd f89e 	bl	80002b0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800317e:	e065      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x420>
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400
 8003188:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318c:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_GetSysClockFreq+0x458>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	2200      	movs	r2, #0
 8003194:	4618      	mov	r0, r3
 8003196:	4611      	mov	r1, r2
 8003198:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800319c:	653b      	str	r3, [r7, #80]	; 0x50
 800319e:	2300      	movs	r3, #0
 80031a0:	657b      	str	r3, [r7, #84]	; 0x54
 80031a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031a6:	4642      	mov	r2, r8
 80031a8:	464b      	mov	r3, r9
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4641      	mov	r1, r8
 80031c0:	1a51      	subs	r1, r2, r1
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	4649      	mov	r1, r9
 80031c6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031d8:	4659      	mov	r1, fp
 80031da:	018b      	lsls	r3, r1, #6
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e2:	4651      	mov	r1, sl
 80031e4:	018a      	lsls	r2, r1, #6
 80031e6:	4651      	mov	r1, sl
 80031e8:	1a54      	subs	r4, r2, r1
 80031ea:	4659      	mov	r1, fp
 80031ec:	eb63 0501 	sbc.w	r5, r3, r1
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003234:	2200      	movs	r2, #0
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
 8003238:	64fa      	str	r2, [r7, #76]	; 0x4c
 800323a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800323e:	f7fd f837 	bl	80002b0 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4613      	mov	r3, r2
 8003248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_RCC_GetSysClockFreq+0x458>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800325a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800325e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800326a:	e003      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_GetSysClockFreq+0x45c>)
 800326e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003272:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003278:	4618      	mov	r0, r3
 800327a:	37b8      	adds	r7, #184	; 0xb8
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400

0800328c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e28d      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8083 	beq.w	80033b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ac:	4b94      	ldr	r3, [pc, #592]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d019      	beq.n	80032ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b8:	4b91      	ldr	r3, [pc, #580]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c4:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d0:	d00c      	beq.n	80032ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b8b      	ldr	r3, [pc, #556]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d112      	bne.n	8003304 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	d10b      	bne.n	8003304 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b84      	ldr	r3, [pc, #528]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d05b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x124>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d157      	bne.n	80033b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e25a      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d106      	bne.n	800331c <HAL_RCC_OscConfig+0x90>
 800330e:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7b      	ldr	r2, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xcc>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xb4>
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a72      	ldr	r2, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xcc>
 8003340:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6e      	ldr	r2, [pc, #440]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fe40 	bl	8001fe4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fe3c 	bl	8001fe4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e21f      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b61      	ldr	r3, [pc, #388]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xdc>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe fe2c 	bl	8001fe4 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fe28 	bl	8001fe4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e20b      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x104>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06f      	beq.n	800349e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033be:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d017      	beq.n	80033fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ca:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x186>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1d3      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x278>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fdd5 	bl	8001fe4 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fdd1 	bl	8001fe4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1b4      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x278>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fdb4 	bl	8001fe4 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe fdb0 	bl	8001fe4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e193      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fd94 	bl	8001fe4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe fd90 	bl	8001fe4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e173      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x234>
 80034de:	e01b      	b.n	8003518 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe fd7d 	bl	8001fe4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	e00e      	b.n	800350c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe fd79 	bl	8001fe4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d907      	bls.n	800350c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e15c      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
 8003500:	40023800 	.word	0x40023800
 8003504:	42470000 	.word	0x42470000
 8003508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ea      	bne.n	80034ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCC_OscConfig+0x4b0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x4b0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x4b0>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe fd39 	bl	8001fe4 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fe fd35 	bl	8001fe4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e118      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x4b0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x31e>
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e01c      	b.n	80035e4 <HAL_RCC_OscConfig+0x358>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x340>
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a60      	ldr	r2, [pc, #384]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a5d      	ldr	r2, [pc, #372]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x358>
 80035cc:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a59      	ldr	r2, [pc, #356]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a56      	ldr	r2, [pc, #344]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fcfa 	bl	8001fe4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe fcf6 	bl	8001fe4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0d7      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RCC_OscConfig+0x368>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fce4 	bl	8001fe4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fce0 	bl	8001fe4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0c1      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	4b40      	ldr	r3, [pc, #256]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ee      	bne.n	8003620 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80ad 	beq.w	80037b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d060      	beq.n	800372c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d145      	bne.n	80036fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x4b4>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fcb4 	bl	8001fe4 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fcb0 	bl	8001fe4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e093      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	071b      	lsls	r3, r3, #28
 80036ca:	491b      	ldr	r1, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_RCC_OscConfig+0x4b4>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fc85 	bl	8001fe4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fc81 	bl	8001fe4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e064      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x452>
 80036fc:	e05c      	b.n	80037b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_OscConfig+0x4b4>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe fc6e 	bl	8001fe4 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fe fc6a 	bl	8001fe4 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04d      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x480>
 800372a:	e045      	b.n	80037b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e040      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
 8003738:	40023800 	.word	0x40023800
 800373c:	40007000 	.word	0x40007000
 8003740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_RCC_OscConfig+0x538>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d030      	beq.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d129      	bne.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d122      	bne.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	4293      	cmp	r3, r2
 800377e:	d119      	bne.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d10f      	bne.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07b      	b.n	80038d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ea:	d009      	beq.n	8003800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
 80037f2:	e005      	b.n	8003800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fa00 	bl	8001c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	f003 0104 	and.w	r1, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0210 	and.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b088      	sub	sp, #32
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_SPI_Transmit+0x22>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e126      	b.n	8003b4a <HAL_SPI_Transmit+0x270>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003904:	f7fe fb6e 	bl	8001fe4 <HAL_GetTick>
 8003908:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800391e:	e10b      	b.n	8003b38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SPI_Transmit+0x52>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003930:	e102      	b.n	8003b38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2203      	movs	r2, #3
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	d10f      	bne.n	800399a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003998:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d007      	beq.n	80039b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c0:	d14b      	bne.n	8003a5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Transmit+0xf6>
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d13e      	bne.n	8003a4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	881a      	ldrh	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f4:	e02b      	b.n	8003a4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d112      	bne.n	8003a2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a28:	e011      	b.n	8003a4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a2a:	f7fe fadb 	bl	8001fe4 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d803      	bhi.n	8003a42 <HAL_SPI_Transmit+0x168>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d102      	bne.n	8003a48 <HAL_SPI_Transmit+0x16e>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a4c:	e074      	b.n	8003b38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ce      	bne.n	80039f6 <HAL_SPI_Transmit+0x11c>
 8003a58:	e04c      	b.n	8003af4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Transmit+0x18e>
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d140      	bne.n	8003aea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a8e:	e02c      	b.n	8003aea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d113      	bne.n	8003ac6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	7812      	ldrb	r2, [r2, #0]
 8003aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac4:	e011      	b.n	8003aea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac6:	f7fe fa8d 	bl	8001fe4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d803      	bhi.n	8003ade <HAL_SPI_Transmit+0x204>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d102      	bne.n	8003ae4 <HAL_SPI_Transmit+0x20a>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ae8:	e026      	b.n	8003b38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1cd      	bne.n	8003a90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8b3 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e000      	b.n	8003b38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b64:	f7fe fa3e 	bl	8001fe4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b74:	f7fe fa36 	bl	8001fe4 <HAL_GetTick>
 8003b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	0d1b      	lsrs	r3, r3, #20
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8a:	e054      	b.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d050      	beq.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b94:	f7fe fa26 	bl	8001fe4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d902      	bls.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d13d      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc2:	d111      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bcc:	d004      	beq.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d107      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf0:	d10f      	bne.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e017      	b.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d19b      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000004 	.word	0x20000004

08003c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <SPI_EndRxTxTransaction+0x7c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <SPI_EndRxTxTransaction+0x80>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8e:	d112      	bne.n	8003cb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff ff5a 	bl	8003b54 <SPI_WaitFlagStateUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e00f      	b.n	8003cd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d0f2      	beq.n	8003cb6 <SPI_EndRxTxTransaction+0x52>
 8003cd0:	e000      	b.n	8003cd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cd2:	bf00      	nop
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	165e9f81 	.word	0x165e9f81

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe f890 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f929 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d17c      	bne.n	8003e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x3e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fe f905 	bl	8001fe4 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e14:	e02a      	b.n	8003e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f840 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cf      	bne.n	8003e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f810 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b090      	sub	sp, #64	; 0x40
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e050      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d04c      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	f7fe f88d 	bl	8001fe4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d241      	bcs.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e00f      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d09f      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3740      	adds	r7, #64	; 0x40
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	; 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	; (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	; (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe feee 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7fe fed5 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	; 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c8:	f7fc f8f2 	bl	80002b0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415e:	f7fc f8a7 	bl	80002b0 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	; 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	; 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800421a:	f7fc f849 	bl	80002b0 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e105      	b.n	800445a <UART_SetConfig+0x4d6>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042dc:	f7fb ffe8 	bl	80002b0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	; (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	; 0x78
 800435a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800437a:	f7fb ff99 	bl	80002b0 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b39      	ldr	r3, [pc, #228]	; (8004468 <UART_SetConfig+0x4e4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <UART_SetConfig+0x4e4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	441c      	add	r4, r3
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	673b      	str	r3, [r7, #112]	; 0x70
 80043ac:	677a      	str	r2, [r7, #116]	; 0x74
 80043ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c2:	4641      	mov	r1, r8
 80043c4:	1851      	adds	r1, r2, r1
 80043c6:	6039      	str	r1, [r7, #0]
 80043c8:	4649      	mov	r1, r9
 80043ca:	414b      	adcs	r3, r1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043da:	4659      	mov	r1, fp
 80043dc:	00cb      	lsls	r3, r1, #3
 80043de:	4651      	mov	r1, sl
 80043e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e4:	4651      	mov	r1, sl
 80043e6:	00ca      	lsls	r2, r1, #3
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	4603      	mov	r3, r0
 80043ee:	4642      	mov	r2, r8
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
 8004408:	667a      	str	r2, [r7, #100]	; 0x64
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004416:	4649      	mov	r1, r9
 8004418:	008b      	lsls	r3, r1, #2
 800441a:	4641      	mov	r1, r8
 800441c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004420:	4641      	mov	r1, r8
 8004422:	008a      	lsls	r2, r1, #2
 8004424:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004428:	f7fb ff42 	bl	80002b0 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x4e4>)
 8004432:	fba3 1302 	umull	r1, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2164      	movs	r1, #100	; 0x64
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x4e4>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4422      	add	r2, r4
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <__NVIC_SetPriority>:
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	2b00      	cmp	r3, #0
 800447e:	db0a      	blt.n	8004496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	490c      	ldr	r1, [pc, #48]	; (80044b8 <__NVIC_SetPriority+0x4c>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	0112      	lsls	r2, r2, #4
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	440b      	add	r3, r1
 8004490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004494:	e00a      	b.n	80044ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4908      	ldr	r1, [pc, #32]	; (80044bc <__NVIC_SetPriority+0x50>)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	3b04      	subs	r3, #4
 80044a4:	0112      	lsls	r2, r2, #4
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	440b      	add	r3, r1
 80044aa:	761a      	strb	r2, [r3, #24]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000e100 	.word	0xe000e100
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044c4:	2100      	movs	r1, #0
 80044c6:	f06f 0004 	mvn.w	r0, #4
 80044ca:	f7ff ffcf 	bl	800446c <__NVIC_SetPriority>
#endif
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044da:	f3ef 8305 	mrs	r3, IPSR
 80044de:	603b      	str	r3, [r7, #0]
  return(result);
 80044e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044e6:	f06f 0305 	mvn.w	r3, #5
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	e00c      	b.n	8004508 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <osKernelInitialize+0x44>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <osKernelInitialize+0x44>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e002      	b.n	8004508 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004508:	687b      	ldr	r3, [r7, #4]
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000220 	.word	0x20000220

0800451c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004522:	f3ef 8305 	mrs	r3, IPSR
 8004526:	603b      	str	r3, [r7, #0]
  return(result);
 8004528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <osKernelStart+0x1a>
    stat = osErrorISR;
 800452e:	f06f 0305 	mvn.w	r3, #5
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e010      	b.n	8004558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <osKernelStart+0x48>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d109      	bne.n	8004552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800453e:	f7ff ffbf 	bl	80044c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <osKernelStart+0x48>)
 8004544:	2202      	movs	r2, #2
 8004546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004548:	f001 f916 	bl	8005778 <vTaskStartScheduler>
      stat = osOK;
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e002      	b.n	8004558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004558:	687b      	ldr	r3, [r7, #4]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000220 	.word	0x20000220

08004568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a07      	ldr	r2, [pc, #28]	; (8004594 <vApplicationGetIdleTaskMemory+0x2c>)
 8004578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a06      	ldr	r2, [pc, #24]	; (8004598 <vApplicationGetIdleTaskMemory+0x30>)
 800457e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000224 	.word	0x20000224
 8004598:	20000280 	.word	0x20000280

0800459c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80045ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4a06      	ldr	r2, [pc, #24]	; (80045cc <vApplicationGetTimerTaskMemory+0x30>)
 80045b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20000480 	.word	0x20000480
 80045cc:	200004dc 	.word	0x200004dc

080045d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f103 0208 	add.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0208 	add.w	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f103 0208 	add.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d103      	bne.n	8004692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e00c      	b.n	80046ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3308      	adds	r3, #8
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e002      	b.n	80046a0 <vListInsert+0x2e>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d2f6      	bcs.n	800469a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d103      	bne.n	8004718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1e5a      	subs	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004762:	f002 faa7 	bl	8006cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	441a      	add	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	3b01      	subs	r3, #1
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	441a      	add	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d114      	bne.n	80047e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3310      	adds	r3, #16
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fa61 	bl	8005c8c <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <xQueueGenericReset+0xcc>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	e009      	b.n	80047f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3310      	adds	r3, #16
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fef2 	bl	80045d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff feed 	bl	80045d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047f6:	f002 fa8d 	bl	8006d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08e      	sub	sp, #56	; 0x38
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <xQueueGenericCreateStatic+0x52>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <xQueueGenericCreateStatic+0x56>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueGenericCreateStatic+0x58>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	623b      	str	r3, [r7, #32]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <xQueueGenericCreateStatic+0x7e>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <xQueueGenericCreateStatic+0x82>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueGenericCreateStatic+0x84>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fb      	str	r3, [r7, #28]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048a6:	2350      	movs	r3, #80	; 0x50
 80048a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b50      	cmp	r3, #80	; 0x50
 80048ae:	d00a      	beq.n	80048c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61bb      	str	r3, [r7, #24]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f83f 	bl	800496c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3730      	adds	r7, #48	; 0x30
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xQueueGenericCreate+0x2a>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	613b      	str	r3, [r7, #16]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3350      	adds	r3, #80	; 0x50
 8004930:	4618      	mov	r0, r3
 8004932:	f002 fae1 	bl	8006ef8 <pvPortMalloc>
 8004936:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d011      	beq.n	8004962 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3350      	adds	r3, #80	; 0x50
 8004946:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004950:	79fa      	ldrb	r2, [r7, #7]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4613      	mov	r3, r2
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f805 	bl	800496c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004962:	69bb      	ldr	r3, [r7, #24]
	}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e002      	b.n	800498e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800499a:	2101      	movs	r1, #1
 800499c:	69b8      	ldr	r0, [r7, #24]
 800499e:	f7ff fecb 	bl	8004738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSend+0x32>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSend+0x40>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <xQueueGenericSend+0x44>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <xQueueGenericSend+0x46>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <xQueueGenericSend+0x60>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x6e>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0x72>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0x74>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a42:	f001 fae1 	bl	8006008 <xTaskGetSchedulerState>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <xQueueGenericSend+0x9e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSend+0xa2>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSend+0xa4>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61fb      	str	r3, [r7, #28]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a72:	f002 f91f 	bl	8006cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <xQueueGenericSend+0xd4>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d129      	bne.n	8004adc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 fb2f 	bl	80050f0 <prvCopyDataToQueue>
 8004a92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f8f3 	bl	8005c8c <xTaskRemoveFromEventList>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aac:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	e00a      	b.n	8004ad4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad4:	f002 f91e 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e063      	b.n	8004ba4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ae2:	f002 f917 	bl	8006d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e05c      	b.n	8004ba4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 f92d 	bl	8005d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004afe:	f002 f909 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b02:	f000 fe9f 	bl	8005844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b06:	f002 f8d5 	bl	8006cb4 <vPortEnterCritical>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d103      	bne.n	8004b20 <xQueueGenericSend+0x16c>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d103      	bne.n	8004b36 <xQueueGenericSend+0x182>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b36:	f002 f8ed 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f91c 	bl	8005d80 <xTaskCheckForTimeOut>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d124      	bne.n	8004b98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b50:	f000 fbc6 	bl	80052e0 <prvIsQueueFull>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 f842 	bl	8005bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6a:	f000 fb51 	bl	8005210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b6e:	f000 fe77 	bl	8005860 <xTaskResumeAll>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f af7c 	bne.w	8004a72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	e772      	b.n	8004a72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 fb3f 	bl	8005210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b92:	f000 fe65 	bl	8005860 <xTaskResumeAll>
 8004b96:	e76c      	b.n	8004a72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9a:	f000 fb39 	bl	8005210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b9e:	f000 fe5f 	bl	8005860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ba2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3738      	adds	r7, #56	; 0x38
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b090      	sub	sp, #64	; 0x40
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <xQueueGenericSendFromISR+0x3c>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <xQueueGenericSendFromISR+0x40>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <xQueueGenericSendFromISR+0x42>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSendFromISR+0x6a>
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <xQueueGenericSendFromISR+0x6e>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericSendFromISR+0x70>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c3a:	f002 f91d 	bl	8006e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61fa      	str	r2, [r7, #28]
 8004c54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <xQueueGenericSendFromISR+0xbc>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d12f      	bne.n	8004ccc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c82:	f000 fa35 	bl	80050f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d112      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fff5 	bl	8005c8c <xTaskRemoveFromEventList>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e007      	b.n	8004cc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	b25a      	sxtb	r2, r3
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cca:	e001      	b.n	8004cd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3740      	adds	r7, #64	; 0x40
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <xQueueReceive+0x30>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	623b      	str	r3, [r7, #32]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <xQueueReceive+0x3e>
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <xQueueReceive+0x42>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <xQueueReceive+0x44>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xQueueReceive+0x5e>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d46:	f001 f95f 	bl	8006008 <xTaskGetSchedulerState>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <xQueueReceive+0x6e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueReceive+0x72>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueReceive+0x74>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueReceive+0x8e>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61bb      	str	r3, [r7, #24]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d76:	f001 ff9d 	bl	8006cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01f      	beq.n	8004dc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8a:	f000 fa1b 	bl	80051c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	3310      	adds	r3, #16
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 ff72 	bl	8005c8c <xTaskRemoveFromEventList>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <xQueueReceive+0x1bc>)
 8004db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dbe:	f001 ffa9 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e069      	b.n	8004e9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dcc:	f001 ffa2 	bl	8006d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e062      	b.n	8004e9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dda:	f107 0310 	add.w	r3, r7, #16
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ffb8 	bl	8005d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de8:	f001 ff94 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dec:	f000 fd2a 	bl	8005844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df0:	f001 ff60 	bl	8006cb4 <vPortEnterCritical>
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d103      	bne.n	8004e0a <xQueueReceive+0x122>
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d103      	bne.n	8004e20 <xQueueReceive+0x138>
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e20:	f001 ff78 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e24:	1d3a      	adds	r2, r7, #4
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 ffa7 	bl	8005d80 <xTaskCheckForTimeOut>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d123      	bne.n	8004e80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3a:	f000 fa3b 	bl	80052b4 <prvIsQueueEmpty>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fecd 	bl	8005bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e54:	f000 f9dc 	bl	8005210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e58:	f000 fd02 	bl	8005860 <xTaskResumeAll>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d189      	bne.n	8004d76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <xQueueReceive+0x1bc>)
 8004e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	e780      	b.n	8004d76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e76:	f000 f9cb 	bl	8005210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e7a:	f000 fcf1 	bl	8005860 <xTaskResumeAll>
 8004e7e:	e77a      	b.n	8004d76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f000 f9c5 	bl	8005210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e86:	f000 fceb 	bl	8005860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8c:	f000 fa12 	bl	80052b4 <prvIsQueueEmpty>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f43f af6f 	beq.w	8004d76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3730      	adds	r7, #48	; 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	623b      	str	r3, [r7, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	61fb      	str	r3, [r7, #28]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef8:	f001 f886 	bl	8006008 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <xQueueSemaphoreTake+0x60>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueSemaphoreTake+0x64>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueSemaphoreTake+0x66>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61bb      	str	r3, [r7, #24]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f28:	f001 fec4 	bl	8006cb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d024      	beq.n	8004f82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f48:	f001 f9d4 	bl	80062f4 <pvTaskIncrementMutexHeldCount>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	3310      	adds	r3, #16
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fe94 	bl	8005c8c <xTaskRemoveFromEventList>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f6a:	4b54      	ldr	r3, [pc, #336]	; (80050bc <xQueueSemaphoreTake+0x214>)
 8004f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f7a:	f001 fecb 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e097      	b.n	80050b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d111      	bne.n	8004fac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004fa4:	f001 feb6 	bl	8006d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e082      	b.n	80050b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fecc 	bl	8005d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc0:	f001 fea8 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc4:	f000 fc3e 	bl	8005844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc8:	f001 fe74 	bl	8006cb4 <vPortEnterCritical>
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d103      	bne.n	8004fe2 <xQueueSemaphoreTake+0x13a>
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueSemaphoreTake+0x150>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff8:	f001 fe8c 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffc:	463a      	mov	r2, r7
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 febb 	bl	8005d80 <xTaskCheckForTimeOut>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d132      	bne.n	8005076 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005012:	f000 f94f 	bl	80052b4 <prvIsQueueEmpty>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d026      	beq.n	800506a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005024:	f001 fe46 	bl	8006cb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f809 	bl	8006044 <xTaskPriorityInherit>
 8005032:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005034:	f001 fe6e 	bl	8006d14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	3324      	adds	r3, #36	; 0x24
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fdd3 	bl	8005bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005048:	f000 f8e2 	bl	8005210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800504c:	f000 fc08 	bl	8005860 <xTaskResumeAll>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f47f af68 	bne.w	8004f28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005058:	4b18      	ldr	r3, [pc, #96]	; (80050bc <xQueueSemaphoreTake+0x214>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	e75e      	b.n	8004f28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800506a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800506c:	f000 f8d0 	bl	8005210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005070:	f000 fbf6 	bl	8005860 <xTaskResumeAll>
 8005074:	e758      	b.n	8004f28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005078:	f000 f8ca 	bl	8005210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800507c:	f000 fbf0 	bl	8005860 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005082:	f000 f917 	bl	80052b4 <prvIsQueueEmpty>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f43f af4d 	beq.w	8004f28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005094:	f001 fe0e 	bl	8006cb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800509a:	f000 f811 	bl	80050c0 <prvGetDisinheritPriorityAfterTimeout>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 f8a2 	bl	80061f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80050ac:	f001 fe32 	bl	8006d14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3738      	adds	r7, #56	; 0x38
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e001      	b.n	80050e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050e2:	68fb      	ldr	r3, [r7, #12]
	}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10d      	bne.n	800512a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d14d      	bne.n	80051b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fffa 	bl	8006114 <xTaskPriorityDisinherit>
 8005120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	e043      	b.n	80051b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d119      	bne.n	8005164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6858      	ldr	r0, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	461a      	mov	r2, r3
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	f002 f8f0 	bl	8007320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d32b      	bcc.n	80051b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e026      	b.n	80051b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68d8      	ldr	r0, [r3, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	461a      	mov	r2, r3
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	f002 f8d6 	bl	8007320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	425b      	negs	r3, r3
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d207      	bcs.n	80051a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	425b      	negs	r3, r3
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d105      	bne.n	80051b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d303      	bcc.n	80051f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	461a      	mov	r2, r3
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f002 f88c 	bl	8007320 <memcpy>
	}
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005218:	f001 fd4c 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005222:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005224:	e011      	b.n	800524a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fd2a 	bl	8005c8c <xTaskRemoveFromEventList>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800523e:	f000 fe01 	bl	8005e44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	3b01      	subs	r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dce9      	bgt.n	8005226 <prvUnlockQueue+0x16>
 8005252:	e000      	b.n	8005256 <prvUnlockQueue+0x46>
					break;
 8005254:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	22ff      	movs	r2, #255	; 0xff
 800525a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800525e:	f001 fd59 	bl	8006d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005262:	f001 fd27 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800526c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800526e:	e011      	b.n	8005294 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d012      	beq.n	800529e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3310      	adds	r3, #16
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fd05 	bl	8005c8c <xTaskRemoveFromEventList>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005288:	f000 fddc 	bl	8005e44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800528c:	7bbb      	ldrb	r3, [r7, #14]
 800528e:	3b01      	subs	r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dce9      	bgt.n	8005270 <prvUnlockQueue+0x60>
 800529c:	e000      	b.n	80052a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800529e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	22ff      	movs	r2, #255	; 0xff
 80052a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052a8:	f001 fd34 	bl	8006d14 <vPortExitCritical>
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052bc:	f001 fcfa 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e001      	b.n	80052d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052d2:	f001 fd1f 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052e8:	f001 fce4 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d102      	bne.n	80052fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e001      	b.n	8005302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005302:	f001 fd07 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e014      	b.n	800534a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <vQueueAddToRegistry+0x50>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800532c:	490c      	ldr	r1, [pc, #48]	; (8005360 <vQueueAddToRegistry+0x50>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <vQueueAddToRegistry+0x50>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005342:	e006      	b.n	8005352 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b07      	cmp	r3, #7
 800534e:	d9e7      	bls.n	8005320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	200008dc 	.word	0x200008dc

08005364 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005374:	f001 fc9e 	bl	8006cb4 <vPortEnterCritical>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537e:	b25b      	sxtb	r3, r3
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d103      	bne.n	800538e <vQueueWaitForMessageRestricted+0x2a>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <vQueueWaitForMessageRestricted+0x40>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a4:	f001 fcb6 	bl	8006d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3324      	adds	r3, #36	; 0x24
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fc3b 	bl	8005c34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f7ff ff26 	bl	8005210 <prvUnlockQueue>
	}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af04      	add	r7, sp, #16
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	623b      	str	r3, [r7, #32]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xTaskCreateStatic+0x46>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61fb      	str	r3, [r7, #28]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005412:	235c      	movs	r3, #92	; 0x5c
 8005414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b5c      	cmp	r3, #92	; 0x5c
 800541a:	d00a      	beq.n	8005432 <xTaskCreateStatic+0x66>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	61bb      	str	r3, [r7, #24]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005432:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01e      	beq.n	8005478 <xTaskCreateStatic+0xac>
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005452:	2300      	movs	r3, #0
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	9302      	str	r3, [sp, #8]
 800545a:	f107 0314 	add.w	r3, r7, #20
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f850 	bl	8005510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005472:	f000 f8dd 	bl	8005630 <prvAddNewTaskToReadyList>
 8005476:	e001      	b.n	800547c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800547c:	697b      	ldr	r3, [r7, #20]
	}
 800547e:	4618      	mov	r0, r3
 8005480:	3728      	adds	r7, #40	; 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005486:	b580      	push	{r7, lr}
 8005488:	b08c      	sub	sp, #48	; 0x30
 800548a:	af04      	add	r7, sp, #16
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fd2c 	bl	8006ef8 <pvPortMalloc>
 80054a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054a8:	205c      	movs	r0, #92	; 0x5c
 80054aa:	f001 fd25 	bl	8006ef8 <pvPortMalloc>
 80054ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
 80054bc:	e005      	b.n	80054ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f001 fde6 	bl	8007090 <vPortFree>
 80054c4:	e001      	b.n	80054ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d017      	beq.n	8005500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	2300      	movs	r3, #0
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f80e 	bl	8005510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054f4:	69f8      	ldr	r0, [r7, #28]
 80054f6:	f000 f89b 	bl	8005630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e002      	b.n	8005506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005506:	69bb      	ldr	r3, [r7, #24]
	}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	461a      	mov	r2, r3
 8005528:	21a5      	movs	r1, #165	; 0xa5
 800552a:	f001 ff07 	bl	800733c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005538:	3b01      	subs	r3, #1
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	617b      	str	r3, [r7, #20]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01f      	beq.n	80055ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e012      	b.n	800559a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	7819      	ldrb	r1, [r3, #0]
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	3334      	adds	r3, #52	; 0x34
 8005584:	460a      	mov	r2, r1
 8005586:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b0f      	cmp	r3, #15
 800559e:	d9e9      	bls.n	8005574 <prvInitialiseNewTask+0x64>
 80055a0:	e000      	b.n	80055a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80055a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ac:	e003      	b.n	80055b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	2b37      	cmp	r3, #55	; 0x37
 80055ba:	d901      	bls.n	80055c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055bc:	2337      	movs	r3, #55	; 0x37
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2200      	movs	r2, #0
 80055d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff f81a 	bl	8004610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	3318      	adds	r3, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff f815 	bl	8004610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2200      	movs	r2, #0
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f001 fa26 	bl	8006a60 <pxPortInitialiseStack>
 8005614:	4602      	mov	r2, r0
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005638:	f001 fb3c 	bl	8006cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800563c:	4b2d      	ldr	r3, [pc, #180]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005646:	4b2c      	ldr	r3, [pc, #176]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800564e:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d110      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800565c:	f000 fc16 	bl	8005e8c <prvInitialiseTaskLists>
 8005660:	e00d      	b.n	800567e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005662:	4b26      	ldr	r3, [pc, #152]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800566a:	4b23      	ldr	r3, [pc, #140]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	429a      	cmp	r2, r3
 8005676:	d802      	bhi.n	800567e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005678:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800567e:	4b20      	ldr	r3, [pc, #128]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 8005686:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005688:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <prvAddNewTaskToReadyList+0xd4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d903      	bls.n	80056a4 <prvAddNewTaskToReadyList+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <prvAddNewTaskToReadyList+0xd4>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a15      	ldr	r2, [pc, #84]	; (8005708 <prvAddNewTaskToReadyList+0xd8>)
 80056b2:	441a      	add	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe ffb5 	bl	800462a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056c0:	f001 fb28 	bl	8006d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d207      	bcs.n	80056ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <prvAddNewTaskToReadyList+0xdc>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000df0 	.word	0x20000df0
 80056f8:	2000091c 	.word	0x2000091c
 80056fc:	20000dfc 	.word	0x20000dfc
 8005700:	20000e0c 	.word	0x20000e0c
 8005704:	20000df8 	.word	0x20000df8
 8005708:	20000920 	.word	0x20000920
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d017      	beq.n	8005752 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <vTaskDelay+0x60>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <vTaskDelay+0x30>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	60bb      	str	r3, [r7, #8]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005740:	f000 f880 	bl	8005844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005744:	2100      	movs	r1, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fde8 	bl	800631c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800574c:	f000 f888 	bl	8005860 <xTaskResumeAll>
 8005750:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <vTaskDelay+0x64>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000e18 	.word	0x20000e18
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005786:	463a      	mov	r2, r7
 8005788:	1d39      	adds	r1, r7, #4
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe feea 	bl	8004568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	9202      	str	r2, [sp, #8]
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	460a      	mov	r2, r1
 80057a6:	4921      	ldr	r1, [pc, #132]	; (800582c <vTaskStartScheduler+0xb4>)
 80057a8:	4821      	ldr	r0, [pc, #132]	; (8005830 <vTaskStartScheduler+0xb8>)
 80057aa:	f7ff fe0f 	bl	80053cc <xTaskCreateStatic>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4a20      	ldr	r2, [pc, #128]	; (8005834 <vTaskStartScheduler+0xbc>)
 80057b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057b4:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <vTaskStartScheduler+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e001      	b.n	80057c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d102      	bne.n	80057d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057cc:	f000 fdfa 	bl	80063c4 <xTimerCreateTimerTask>
 80057d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d116      	bne.n	8005806 <vTaskStartScheduler+0x8e>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
}
 80057ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <vTaskStartScheduler+0xc0>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <vTaskStartScheduler+0xc4>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <vTaskStartScheduler+0xc8>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005800:	f001 f9b6 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005804:	e00e      	b.n	8005824 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d10a      	bne.n	8005824 <vTaskStartScheduler+0xac>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <vTaskStartScheduler+0xaa>
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08007c94 	.word	0x08007c94
 8005830:	08005e5d 	.word	0x08005e5d
 8005834:	20000e14 	.word	0x20000e14
 8005838:	20000e10 	.word	0x20000e10
 800583c:	20000dfc 	.word	0x20000dfc
 8005840:	20000df4 	.word	0x20000df4

08005844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <vTaskSuspendAll+0x18>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	4a03      	ldr	r2, [pc, #12]	; (800585c <vTaskSuspendAll+0x18>)
 8005850:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	20000e18 	.word	0x20000e18

08005860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800586e:	4b42      	ldr	r3, [pc, #264]	; (8005978 <xTaskResumeAll+0x118>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <xTaskResumeAll+0x2c>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	603b      	str	r3, [r7, #0]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800588c:	f001 fa12 	bl	8006cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <xTaskResumeAll+0x118>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3b01      	subs	r3, #1
 8005896:	4a38      	ldr	r2, [pc, #224]	; (8005978 <xTaskResumeAll+0x118>)
 8005898:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <xTaskResumeAll+0x118>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d162      	bne.n	8005968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058a2:	4b36      	ldr	r3, [pc, #216]	; (800597c <xTaskResumeAll+0x11c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d05e      	beq.n	8005968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058aa:	e02f      	b.n	800590c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ac:	4b34      	ldr	r3, [pc, #208]	; (8005980 <xTaskResumeAll+0x120>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3318      	adds	r3, #24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe ff13 	bl	80046e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe ff0e 	bl	80046e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <xTaskResumeAll+0x124>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <xTaskResumeAll+0x7c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <xTaskResumeAll+0x124>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <xTaskResumeAll+0x128>)
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe fe99 	bl	800462a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b23      	ldr	r3, [pc, #140]	; (800598c <xTaskResumeAll+0x12c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005906:	4b22      	ldr	r3, [pc, #136]	; (8005990 <xTaskResumeAll+0x130>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800590c:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <xTaskResumeAll+0x120>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1cb      	bne.n	80058ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800591a:	f000 fb55 	bl	8005fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <xTaskResumeAll+0x134>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d010      	beq.n	800594c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800592a:	f000 f847 	bl	80059bc <xTaskIncrementTick>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <xTaskResumeAll+0x130>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <xTaskResumeAll+0x134>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800594c:	4b10      	ldr	r3, [pc, #64]	; (8005990 <xTaskResumeAll+0x130>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <xTaskResumeAll+0x138>)
 800595a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005968:	f001 f9d4 	bl	8006d14 <vPortExitCritical>

	return xAlreadyYielded;
 800596c:	68bb      	ldr	r3, [r7, #8]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000e18 	.word	0x20000e18
 800597c:	20000df0 	.word	0x20000df0
 8005980:	20000db0 	.word	0x20000db0
 8005984:	20000df8 	.word	0x20000df8
 8005988:	20000920 	.word	0x20000920
 800598c:	2000091c 	.word	0x2000091c
 8005990:	20000e04 	.word	0x20000e04
 8005994:	20000e00 	.word	0x20000e00
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <xTaskGetTickCount+0x1c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000df4 	.word	0x20000df4

080059bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c6:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <xTaskIncrementTick+0x148>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 808f 	bne.w	8005aee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059d0:	4b4d      	ldr	r3, [pc, #308]	; (8005b08 <xTaskIncrementTick+0x14c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059d8:	4a4b      	ldr	r2, [pc, #300]	; (8005b08 <xTaskIncrementTick+0x14c>)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d120      	bne.n	8005a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059e4:	4b49      	ldr	r3, [pc, #292]	; (8005b0c <xTaskIncrementTick+0x150>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	603b      	str	r3, [r7, #0]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xTaskIncrementTick+0x46>
 8005a04:	4b41      	ldr	r3, [pc, #260]	; (8005b0c <xTaskIncrementTick+0x150>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <xTaskIncrementTick+0x154>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3f      	ldr	r2, [pc, #252]	; (8005b0c <xTaskIncrementTick+0x150>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <xTaskIncrementTick+0x154>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	4b3e      	ldr	r3, [pc, #248]	; (8005b14 <xTaskIncrementTick+0x158>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	4a3d      	ldr	r2, [pc, #244]	; (8005b14 <xTaskIncrementTick+0x158>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	f000 fad1 	bl	8005fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a26:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <xTaskIncrementTick+0x15c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d349      	bcc.n	8005ac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a30:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <xTaskIncrementTick+0x150>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <xTaskIncrementTick+0x15c>)
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	601a      	str	r2, [r3, #0]
					break;
 8005a42:	e03f      	b.n	8005ac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b31      	ldr	r3, [pc, #196]	; (8005b0c <xTaskIncrementTick+0x150>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d203      	bcs.n	8005a64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a5c:	4a2e      	ldr	r2, [pc, #184]	; (8005b18 <xTaskIncrementTick+0x15c>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a62:	e02f      	b.n	8005ac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fe3b 	bl	80046e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3318      	adds	r3, #24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe fe32 	bl	80046e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <xTaskIncrementTick+0x160>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d903      	bls.n	8005a94 <xTaskIncrementTick+0xd8>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <xTaskIncrementTick+0x160>)
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <xTaskIncrementTick+0x164>)
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fe fdbd 	bl	800462a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <xTaskIncrementTick+0x168>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3b8      	bcc.n	8005a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac2:	e7b5      	b.n	8005a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ac4:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <xTaskIncrementTick+0x168>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	4915      	ldr	r1, [pc, #84]	; (8005b20 <xTaskIncrementTick+0x164>)
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d901      	bls.n	8005ae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005adc:	2301      	movs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <xTaskIncrementTick+0x16c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e004      	b.n	8005af8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <xTaskIncrementTick+0x170>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <xTaskIncrementTick+0x170>)
 8005af6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005af8:	697b      	ldr	r3, [r7, #20]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000e18 	.word	0x20000e18
 8005b08:	20000df4 	.word	0x20000df4
 8005b0c:	20000da8 	.word	0x20000da8
 8005b10:	20000dac 	.word	0x20000dac
 8005b14:	20000e08 	.word	0x20000e08
 8005b18:	20000e10 	.word	0x20000e10
 8005b1c:	20000df8 	.word	0x20000df8
 8005b20:	20000920 	.word	0x20000920
 8005b24:	2000091c 	.word	0x2000091c
 8005b28:	20000e04 	.word	0x20000e04
 8005b2c:	20000e00 	.word	0x20000e00

08005b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b36:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <vTaskSwitchContext+0xa8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <vTaskSwitchContext+0xac>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b44:	e041      	b.n	8005bca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005b46:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <vTaskSwitchContext+0xac>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4c:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <vTaskSwitchContext+0xb0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e010      	b.n	8005b76 <vTaskSwitchContext+0x46>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	607b      	str	r3, [r7, #4]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vTaskSwitchContext+0x3e>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	491b      	ldr	r1, [pc, #108]	; (8005be4 <vTaskSwitchContext+0xb4>)
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0e4      	beq.n	8005b54 <vTaskSwitchContext+0x24>
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <vTaskSwitchContext+0xb4>)
 8005b96:	4413      	add	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3308      	adds	r3, #8
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d104      	bne.n	8005bba <vTaskSwitchContext+0x8a>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <vTaskSwitchContext+0xb8>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4a06      	ldr	r2, [pc, #24]	; (8005be0 <vTaskSwitchContext+0xb0>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6013      	str	r3, [r2, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000e18 	.word	0x20000e18
 8005bdc:	20000e04 	.word	0x20000e04
 8005be0:	20000df8 	.word	0x20000df8
 8005be4:	20000920 	.word	0x20000920
 8005be8:	2000091c 	.word	0x2000091c

08005bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60fb      	str	r3, [r7, #12]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <vTaskPlaceOnEventList+0x44>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3318      	adds	r3, #24
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fe fd29 	bl	8004672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c20:	2101      	movs	r1, #1
 8005c22:	6838      	ldr	r0, [r7, #0]
 8005c24:	f000 fb7a 	bl	800631c <prvAddCurrentTaskToDelayedList>
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	2000091c 	.word	0x2000091c

08005c34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3318      	adds	r3, #24
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7fe fce0 	bl	800462a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68b8      	ldr	r0, [r7, #8]
 8005c7a:	f000 fb4f 	bl	800631c <prvAddCurrentTaskToDelayedList>
	}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000091c 	.word	0x2000091c

08005c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60fb      	str	r3, [r7, #12]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3318      	adds	r3, #24
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fd11 	bl	80046e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <xTaskRemoveFromEventList+0xb0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d11d      	bne.n	8005d06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fd08 	bl	80046e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <xTaskRemoveFromEventList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <xTaskRemoveFromEventList+0x5c>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <xTaskRemoveFromEventList+0xb4>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <xTaskRemoveFromEventList+0xb8>)
 8005cf6:	441a      	add	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fe fc93 	bl	800462a <vListInsertEnd>
 8005d04:	e005      	b.n	8005d12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3318      	adds	r3, #24
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	480e      	ldr	r0, [pc, #56]	; (8005d48 <xTaskRemoveFromEventList+0xbc>)
 8005d0e:	f7fe fc8c 	bl	800462a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <xTaskRemoveFromEventList+0xc0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d905      	bls.n	8005d2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <xTaskRemoveFromEventList+0xc4>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e001      	b.n	8005d30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d30:	697b      	ldr	r3, [r7, #20]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000e18 	.word	0x20000e18
 8005d40:	20000df8 	.word	0x20000df8
 8005d44:	20000920 	.word	0x20000920
 8005d48:	20000db0 	.word	0x20000db0
 8005d4c:	2000091c 	.word	0x2000091c
 8005d50:	20000e04 	.word	0x20000e04

08005d54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <vTaskInternalSetTimeOutState+0x24>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <vTaskInternalSetTimeOutState+0x28>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20000e08 	.word	0x20000e08
 8005d7c:	20000df4 	.word	0x20000df4

08005d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	613b      	str	r3, [r7, #16]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dc2:	f000 ff77 	bl	8006cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <xTaskCheckForTimeOut+0xbc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d102      	bne.n	8005de6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	e023      	b.n	8005e2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <xTaskCheckForTimeOut+0xc0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d007      	beq.n	8005e02 <xTaskCheckForTimeOut+0x82>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d302      	bcc.n	8005e02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e015      	b.n	8005e2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d20b      	bcs.n	8005e24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff9b 	bl	8005d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e004      	b.n	8005e2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e2e:	f000 ff71 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 8005e32:	69fb      	ldr	r3, [r7, #28]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000df4 	.word	0x20000df4
 8005e40:	20000e08 	.word	0x20000e08

08005e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <vTaskMissedYield+0x14>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000e04 	.word	0x20000e04

08005e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e64:	f000 f852 	bl	8005f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <prvIdleTask+0x28>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d9f9      	bls.n	8005e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <prvIdleTask+0x2c>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e80:	e7f0      	b.n	8005e64 <prvIdleTask+0x8>
 8005e82:	bf00      	nop
 8005e84:	20000920 	.word	0x20000920
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	e00c      	b.n	8005eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <prvInitialiseTaskLists+0x60>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fb92 	bl	80045d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b37      	cmp	r3, #55	; 0x37
 8005eb6:	d9ef      	bls.n	8005e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eba:	f7fe fb89 	bl	80045d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ec0:	f7fe fb86 	bl	80045d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ec4:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <prvInitialiseTaskLists+0x6c>)
 8005ec6:	f7fe fb83 	bl	80045d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eca:	480c      	ldr	r0, [pc, #48]	; (8005efc <prvInitialiseTaskLists+0x70>)
 8005ecc:	f7fe fb80 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <prvInitialiseTaskLists+0x74>)
 8005ed2:	f7fe fb7d 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <prvInitialiseTaskLists+0x78>)
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvInitialiseTaskLists+0x7c>)
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000920 	.word	0x20000920
 8005ef0:	20000d80 	.word	0x20000d80
 8005ef4:	20000d94 	.word	0x20000d94
 8005ef8:	20000db0 	.word	0x20000db0
 8005efc:	20000dc4 	.word	0x20000dc4
 8005f00:	20000ddc 	.word	0x20000ddc
 8005f04:	20000da8 	.word	0x20000da8
 8005f08:	20000dac 	.word	0x20000dac

08005f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f12:	e019      	b.n	8005f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f14:	f000 fece 	bl	8006cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <prvCheckTasksWaitingTermination+0x50>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fbdd 	bl	80046e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f3e:	f000 fee9 	bl	8006d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f810 	bl	8005f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e1      	bne.n	8005f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000dc4 	.word	0x20000dc4
 8005f60:	20000df0 	.word	0x20000df0
 8005f64:	20000dd8 	.word	0x20000dd8

08005f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f886 	bl	8007090 <vPortFree>
				vPortFree( pxTCB );
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 f883 	bl	8007090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f8a:	e018      	b.n	8005fbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d103      	bne.n	8005f9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 f87a 	bl	8007090 <vPortFree>
	}
 8005f9c:	e00f      	b.n	8005fbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d00a      	beq.n	8005fbe <prvDeleteTCB+0x56>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvDeleteTCB+0x54>
	}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <prvResetNextTaskUnblockTime+0x38>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvResetNextTaskUnblockTime+0x3c>)
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295
 8005fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fe0:	e008      	b.n	8005ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <prvResetNextTaskUnblockTime+0x38>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <prvResetNextTaskUnblockTime+0x3c>)
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	20000da8 	.word	0x20000da8
 8006004:	20000e10 	.word	0x20000e10

08006008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <xTaskGetSchedulerState+0x34>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006016:	2301      	movs	r3, #1
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	e008      	b.n	800602e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <xTaskGetSchedulerState+0x38>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006024:	2302      	movs	r3, #2
 8006026:	607b      	str	r3, [r7, #4]
 8006028:	e001      	b.n	800602e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800602e:	687b      	ldr	r3, [r7, #4]
	}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20000dfc 	.word	0x20000dfc
 8006040:	20000e18 	.word	0x20000e18

08006044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d051      	beq.n	80060fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <xTaskPriorityInherit+0xc4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	429a      	cmp	r2, r3
 8006066:	d241      	bcs.n	80060ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	db06      	blt.n	800607e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <xTaskPriorityInherit+0xc4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6959      	ldr	r1, [r3, #20]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <xTaskPriorityInherit+0xc8>)
 8006090:	4413      	add	r3, r2
 8006092:	4299      	cmp	r1, r3
 8006094:	d122      	bne.n	80060dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3304      	adds	r3, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fb22 	bl	80046e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060a0:	4b19      	ldr	r3, [pc, #100]	; (8006108 <xTaskPriorityInherit+0xc4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	4b18      	ldr	r3, [pc, #96]	; (8006110 <xTaskPriorityInherit+0xcc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d903      	bls.n	80060be <xTaskPriorityInherit+0x7a>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <xTaskPriorityInherit+0xcc>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4a10      	ldr	r2, [pc, #64]	; (800610c <xTaskPriorityInherit+0xc8>)
 80060cc:	441a      	add	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe faa8 	bl	800462a <vListInsertEnd>
 80060da:	e004      	b.n	80060e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <xTaskPriorityInherit+0xc4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e008      	b.n	80060fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <xTaskPriorityInherit+0xc4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d201      	bcs.n	80060fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000091c 	.word	0x2000091c
 800610c:	20000920 	.word	0x20000920
 8006110:	20000df8 	.word	0x20000df8

08006114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d056      	beq.n	80061d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <xTaskPriorityDisinherit+0xd0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d00a      	beq.n	800614a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60fb      	str	r3, [r7, #12]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	429a      	cmp	r2, r3
 800617c:	d02c      	beq.n	80061d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	2b00      	cmp	r3, #0
 8006184:	d128      	bne.n	80061d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3304      	adds	r3, #4
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe faaa 	bl	80046e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <xTaskPriorityDisinherit+0xd4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d903      	bls.n	80061b8 <xTaskPriorityDisinherit+0xa4>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <xTaskPriorityDisinherit+0xd4>)
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4a09      	ldr	r2, [pc, #36]	; (80061ec <xTaskPriorityDisinherit+0xd8>)
 80061c6:	441a      	add	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f7fe fa2b 	bl	800462a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061d8:	697b      	ldr	r3, [r7, #20]
	}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	2000091c 	.word	0x2000091c
 80061e8:	20000df8 	.word	0x20000df8
 80061ec:	20000920 	.word	0x20000920

080061f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d06a      	beq.n	80062de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	e002      	b.n	800623c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	429a      	cmp	r2, r3
 8006244:	d04b      	beq.n	80062de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d146      	bne.n	80062de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	429a      	cmp	r2, r3
 8006258:	d10a      	bne.n	8006270 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60bb      	str	r3, [r7, #8]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	db04      	blt.n	800628e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	6959      	ldr	r1, [r3, #20]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800629e:	4413      	add	r3, r2
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d11c      	bne.n	80062de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe fa1b 	bl	80046e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d903      	bls.n	80062c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4a07      	ldr	r2, [pc, #28]	; (80062ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80062d0:	441a      	add	r2, r3
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	3304      	adds	r3, #4
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f7fe f9a6 	bl	800462a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062de:	bf00      	nop
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	2000091c 	.word	0x2000091c
 80062ec:	20000920 	.word	0x20000920
 80062f0:	20000df8 	.word	0x20000df8

080062f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <pvTaskIncrementMutexHeldCount+0x24>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <pvTaskIncrementMutexHeldCount+0x24>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006306:	3201      	adds	r2, #1
 8006308:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800630a:	4b03      	ldr	r3, [pc, #12]	; (8006318 <pvTaskIncrementMutexHeldCount+0x24>)
 800630c:	681b      	ldr	r3, [r3, #0]
	}
 800630e:	4618      	mov	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	2000091c 	.word	0x2000091c

0800631c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006326:	4b21      	ldr	r3, [pc, #132]	; (80063ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe f9d6 	bl	80046e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d10a      	bne.n	8006356 <prvAddCurrentTaskToDelayedList+0x3a>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006346:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4819      	ldr	r0, [pc, #100]	; (80063b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006350:	f7fe f96b 	bl	800462a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006354:	e026      	b.n	80063a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4413      	add	r3, r2
 800635c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800635e:	4b14      	ldr	r3, [pc, #80]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	d209      	bcs.n	8006382 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fe f979 	bl	8004672 <vListInsert>
}
 8006380:	e010      	b.n	80063a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006382:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f7fe f96f 	bl	8004672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d202      	bcs.n	80063a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800639e:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000df4 	.word	0x20000df4
 80063b0:	2000091c 	.word	0x2000091c
 80063b4:	20000ddc 	.word	0x20000ddc
 80063b8:	20000dac 	.word	0x20000dac
 80063bc:	20000da8 	.word	0x20000da8
 80063c0:	20000e10 	.word	0x20000e10

080063c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063ce:	f000 fb07 	bl	80069e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <xTimerCreateTimerTask+0x80>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d021      	beq.n	800641e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063e2:	1d3a      	adds	r2, r7, #4
 80063e4:	f107 0108 	add.w	r1, r7, #8
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe f8d5 	bl	800459c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	9202      	str	r2, [sp, #8]
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	2302      	movs	r3, #2
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	460a      	mov	r2, r1
 8006404:	4910      	ldr	r1, [pc, #64]	; (8006448 <xTimerCreateTimerTask+0x84>)
 8006406:	4811      	ldr	r0, [pc, #68]	; (800644c <xTimerCreateTimerTask+0x88>)
 8006408:	f7fe ffe0 	bl	80053cc <xTaskCreateStatic>
 800640c:	4603      	mov	r3, r0
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <xTimerCreateTimerTask+0x8c>)
 8006410:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <xTimerCreateTimerTask+0x8c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800641a:	2301      	movs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	613b      	str	r3, [r7, #16]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800643a:	697b      	ldr	r3, [r7, #20]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000e4c 	.word	0x20000e4c
 8006448:	08007c9c 	.word	0x08007c9c
 800644c:	08006589 	.word	0x08006589
 8006450:	20000e50 	.word	0x20000e50

08006454 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTimerGenericCommand+0x2e>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	623b      	str	r3, [r7, #32]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <xTimerGenericCommand+0x98>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02a      	beq.n	80064e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b05      	cmp	r3, #5
 800649a:	dc18      	bgt.n	80064ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800649c:	f7ff fdb4 	bl	8006008 <xTaskGetSchedulerState>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d109      	bne.n	80064ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <xTimerGenericCommand+0x98>)
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	f107 0110 	add.w	r1, r7, #16
 80064ae:	2300      	movs	r3, #0
 80064b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b2:	f7fe fa7f 	bl	80049b4 <xQueueGenericSend>
 80064b6:	6278      	str	r0, [r7, #36]	; 0x24
 80064b8:	e012      	b.n	80064e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <xTimerGenericCommand+0x98>)
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	f107 0110 	add.w	r1, r7, #16
 80064c2:	2300      	movs	r3, #0
 80064c4:	2200      	movs	r2, #0
 80064c6:	f7fe fa75 	bl	80049b4 <xQueueGenericSend>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24
 80064cc:	e008      	b.n	80064e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064ce:	4b07      	ldr	r3, [pc, #28]	; (80064ec <xTimerGenericCommand+0x98>)
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f107 0110 	add.w	r1, r7, #16
 80064d6:	2300      	movs	r3, #0
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	f7fe fb69 	bl	8004bb0 <xQueueGenericSendFromISR>
 80064de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000e4c 	.word	0x20000e4c

080064f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <prvProcessExpiredTimer+0x94>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	3304      	adds	r3, #4
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe f8eb 	bl	80046e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d022      	beq.n	8006562 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	18d1      	adds	r1, r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	6978      	ldr	r0, [r7, #20]
 800652a:	f000 f8d1 	bl	80066d0 <prvInsertTimerInActiveList>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01f      	beq.n	8006574 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	2100      	movs	r1, #0
 800653e:	6978      	ldr	r0, [r7, #20]
 8006540:	f7ff ff88 	bl	8006454 <xTimerGenericCommand>
 8006544:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d113      	bne.n	8006574 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	b2da      	uxtb	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	6978      	ldr	r0, [r7, #20]
 800657a:	4798      	blx	r3
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000e44 	.word	0x20000e44

08006588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006590:	f107 0308 	add.w	r3, r7, #8
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f857 	bl	8006648 <prvGetNextExpireTime>
 800659a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f803 	bl	80065ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065a6:	f000 f8d5 	bl	8006754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065aa:	e7f1      	b.n	8006590 <prvTimerTask+0x8>

080065ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065b6:	f7ff f945 	bl	8005844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f866 	bl	8006690 <prvSampleTimeNow>
 80065c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d130      	bne.n	800662e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <prvProcessTimerOrBlockTask+0x3c>
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d806      	bhi.n	80065e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065da:	f7ff f941 	bl	8005860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff ff85 	bl	80064f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065e6:	e024      	b.n	8006632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <prvProcessTimerOrBlockTask+0x90>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <prvProcessTimerOrBlockTask+0x50>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <prvProcessTimerOrBlockTask+0x52>
 80065fc:	2300      	movs	r3, #0
 80065fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <prvProcessTimerOrBlockTask+0x94>)
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4619      	mov	r1, r3
 800660e:	f7fe fea9 	bl	8005364 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006612:	f7ff f925 	bl	8005860 <xTaskResumeAll>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <prvProcessTimerOrBlockTask+0x98>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	f3bf 8f6f 	isb	sy
}
 800662c:	e001      	b.n	8006632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800662e:	f7ff f917 	bl	8005860 <xTaskResumeAll>
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000e48 	.word	0x20000e48
 8006640:	20000e4c 	.word	0x20000e4c
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006650:	4b0e      	ldr	r3, [pc, #56]	; (800668c <prvGetNextExpireTime+0x44>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <prvGetNextExpireTime+0x16>
 800665a:	2201      	movs	r2, #1
 800665c:	e000      	b.n	8006660 <prvGetNextExpireTime+0x18>
 800665e:	2200      	movs	r2, #0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800666c:	4b07      	ldr	r3, [pc, #28]	; (800668c <prvGetNextExpireTime+0x44>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	e001      	b.n	800667c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000e44 	.word	0x20000e44

08006690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006698:	f7ff f980 	bl	800599c <xTaskGetTickCount>
 800669c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <prvSampleTimeNow+0x3c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d205      	bcs.n	80066b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066a8:	f000 f936 	bl	8006918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e002      	b.n	80066ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066ba:	4a04      	ldr	r2, [pc, #16]	; (80066cc <prvSampleTimeNow+0x3c>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000e54 	.word	0x20000e54

080066d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d812      	bhi.n	800671c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e01b      	b.n	8006742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <prvInsertTimerInActiveList+0x7c>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f7fd ffac 	bl	8004672 <vListInsert>
 800671a:	e012      	b.n	8006742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d206      	bcs.n	8006732 <prvInsertTimerInActiveList+0x62>
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d302      	bcc.n	8006732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e007      	b.n	8006742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <prvInsertTimerInActiveList+0x80>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f7fd ff98 	bl	8004672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006742:	697b      	ldr	r3, [r7, #20]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000e48 	.word	0x20000e48
 8006750:	20000e44 	.word	0x20000e44

08006754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08e      	sub	sp, #56	; 0x38
 8006758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800675a:	e0ca      	b.n	80068f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da18      	bge.n	8006794 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	3304      	adds	r3, #4
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	61fb      	str	r3, [r7, #28]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800678a:	6850      	ldr	r0, [r2, #4]
 800678c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800678e:	6892      	ldr	r2, [r2, #8]
 8006790:	4611      	mov	r1, r2
 8006792:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f2c0 80aa 	blt.w	80068f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fd ff99 	bl	80046e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067b2:	463b      	mov	r3, r7
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff6b 	bl	8006690 <prvSampleTimeNow>
 80067ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b09      	cmp	r3, #9
 80067c0:	f200 8097 	bhi.w	80068f2 <prvProcessReceivedCommands+0x19e>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <prvProcessReceivedCommands+0x78>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067f5 	.word	0x080067f5
 80067d8:	08006869 	.word	0x08006869
 80067dc:	0800687d 	.word	0x0800687d
 80067e0:	080068c7 	.word	0x080068c7
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	080067f5 	.word	0x080067f5
 80067ec:	08006869 	.word	0x08006869
 80067f0:	0800687d 	.word	0x0800687d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	18d1      	adds	r1, r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006814:	f7ff ff5c 	bl	80066d0 <prvInsertTimerInActiveList>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d069      	beq.n	80068f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05e      	beq.n	80068f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	441a      	add	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	2100      	movs	r1, #0
 8006844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006846:	f7ff fe05 	bl	8006454 <xTimerGenericCommand>
 800684a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14f      	bne.n	80068f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61bb      	str	r3, [r7, #24]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800687a:	e03a      	b.n	80068f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	b2da      	uxtb	r2, r3
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	617b      	str	r3, [r7, #20]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	18d1      	adds	r1, r2, r3
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c0:	f7ff ff06 	bl	80066d0 <prvInsertTimerInActiveList>
					break;
 80068c4:	e015      	b.n	80068f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80068d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d6:	f000 fbdb 	bl	8007090 <vPortFree>
 80068da:	e00a      	b.n	80068f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ee:	e000      	b.n	80068f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <prvProcessReceivedCommands+0x1c0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	1d39      	adds	r1, r7, #4
 80068f8:	2200      	movs	r2, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe f9f4 	bl	8004ce8 <xQueueReceive>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	f47f af2a 	bne.w	800675c <prvProcessReceivedCommands+0x8>
	}
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	3730      	adds	r7, #48	; 0x30
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000e4c 	.word	0x20000e4c

08006918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800691e:	e048      	b.n	80069b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692a:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fd fed3 	bl	80046e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d02e      	beq.n	80069b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90e      	bls.n	8006984 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006972:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7fd fe78 	bl	8004672 <vListInsert>
 8006982:	e016      	b.n	80069b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fd60 	bl	8006454 <xTimerGenericCommand>
 8006994:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	603b      	str	r3, [r7, #0]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1b1      	bne.n	8006920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <prvSwitchTimerLists+0xc4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 80069c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069ca:	4a04      	ldr	r2, [pc, #16]	; (80069dc <prvSwitchTimerLists+0xc4>)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20000e44 	.word	0x20000e44
 80069dc:	20000e48 	.word	0x20000e48

080069e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069e6:	f000 f965 	bl	8006cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <prvCheckForValidListAndQueue+0x60>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d120      	bne.n	8006a34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069f2:	4814      	ldr	r0, [pc, #80]	; (8006a44 <prvCheckForValidListAndQueue+0x64>)
 80069f4:	f7fd fdec 	bl	80045d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069f8:	4813      	ldr	r0, [pc, #76]	; (8006a48 <prvCheckForValidListAndQueue+0x68>)
 80069fa:	f7fd fde9 	bl	80045d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <prvCheckForValidListAndQueue+0x6c>)
 8006a00:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <prvCheckForValidListAndQueue+0x64>)
 8006a02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <prvCheckForValidListAndQueue+0x70>)
 8006a06:	4a10      	ldr	r2, [pc, #64]	; (8006a48 <prvCheckForValidListAndQueue+0x68>)
 8006a08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <prvCheckForValidListAndQueue+0x74>)
 8006a10:	4a11      	ldr	r2, [pc, #68]	; (8006a58 <prvCheckForValidListAndQueue+0x78>)
 8006a12:	2110      	movs	r1, #16
 8006a14:	200a      	movs	r0, #10
 8006a16:	f7fd fef7 	bl	8004808 <xQueueGenericCreateStatic>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <prvCheckForValidListAndQueue+0x60>)
 8006a1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <prvCheckForValidListAndQueue+0x60>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <prvCheckForValidListAndQueue+0x60>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	490b      	ldr	r1, [pc, #44]	; (8006a5c <prvCheckForValidListAndQueue+0x7c>)
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fc6e 	bl	8005310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a34:	f000 f96e 	bl	8006d14 <vPortExitCritical>
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000e4c 	.word	0x20000e4c
 8006a44:	20000e1c 	.word	0x20000e1c
 8006a48:	20000e30 	.word	0x20000e30
 8006a4c:	20000e44 	.word	0x20000e44
 8006a50:	20000e48 	.word	0x20000e48
 8006a54:	20000ef8 	.word	0x20000ef8
 8006a58:	20000e58 	.word	0x20000e58
 8006a5c:	08007ca4 	.word	0x08007ca4

08006a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3b04      	subs	r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3b04      	subs	r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3b04      	subs	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a90:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <pxPortInitialiseStack+0x64>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3b14      	subs	r3, #20
 8006a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f06f 0202 	mvn.w	r2, #2
 8006aae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3b20      	subs	r3, #32
 8006ab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	08006ac9 	.word	0x08006ac9

08006ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ad2:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <prvTaskExitError+0x54>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d00a      	beq.n	8006af2 <prvTaskExitError+0x2a>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60fb      	str	r3, [r7, #12]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <prvTaskExitError+0x28>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b06:	bf00      	nop
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0fc      	beq.n	8006b08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000010 	.word	0x20000010

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b46      	ldr	r3, [pc, #280]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a46      	ldr	r2, [pc, #280]	; (8006c94 <xPortStartScheduler+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10a      	bne.n	8006b96 <xPortStartScheduler+0x26>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	; (8006c98 <xPortStartScheduler+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10a      	bne.n	8006bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	22ff      	movs	r2, #255	; 0xff
 8006bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be4:	e009      	b.n	8006bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006be6:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d0ef      	beq.n	8006be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1c3 0307 	rsb	r3, r3, #7
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d00a      	beq.n	8006c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60bb      	str	r3, [r7, #8]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c28:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c46:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c5e:	f000 f8dd 	bl	8006e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <xPortStartScheduler+0x13c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c68:	f000 f8fc 	bl	8006e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c78:	f7ff ff66 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c7c:	f7fe ff58 	bl	8005b30 <vTaskSwitchContext>
	prvTaskExitError();
 8006c80:	f7ff ff22 	bl	8006ac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	e000ed00 	.word	0xe000ed00
 8006c94:	410fc271 	.word	0x410fc271
 8006c98:	410fc270 	.word	0x410fc270
 8006c9c:	e000e400 	.word	0xe000e400
 8006ca0:	20000f48 	.word	0x20000f48
 8006ca4:	20000f4c 	.word	0x20000f4c
 8006ca8:	e000ed20 	.word	0xe000ed20
 8006cac:	20000010 	.word	0x20000010
 8006cb0:	e000ef34 	.word	0xe000ef34

08006cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	607b      	str	r3, [r7, #4]
}
 8006ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10f      	bne.n	8006d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortEnterCritical+0x5c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	603b      	str	r3, [r7, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vPortEnterCritical+0x4a>
	}
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	20000010 	.word	0x20000010
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <vPortExitCritical+0x50>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <vPortExitCritical+0x24>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	607b      	str	r3, [r7, #4]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <vPortExitCritical+0x50>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <vPortExitCritical+0x50>)
 8006d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d42:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <vPortExitCritical+0x50>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <vPortExitCritical+0x42>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f383 8811 	msr	BASEPRI, r3
}
 8006d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000010 	.word	0x20000010
	...

08006d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d70:	f3ef 8009 	mrs	r0, PSP
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <pxCurrentTCBConst>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f01e 0f10 	tst.w	lr, #16
 8006d80:	bf08      	it	eq
 8006d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	6010      	str	r0, [r2, #0]
 8006d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d94:	f380 8811 	msr	BASEPRI, r0
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f7fe fec6 	bl	8005b30 <vTaskSwitchContext>
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f380 8811 	msr	BASEPRI, r0
 8006dac:	bc09      	pop	{r0, r3}
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db6:	f01e 0f10 	tst.w	lr, #16
 8006dba:	bf08      	it	eq
 8006dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006dc0:	f380 8809 	msr	PSP, r0
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst>:
 8006dd0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop

08006dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006df2:	f7fe fde3 	bl	80059bc <xTaskIncrementTick>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <xPortSysTickHandler+0x40>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <vPortSetupTimerInterrupt+0x38>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <vPortSetupTimerInterrupt+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <vPortSetupTimerInterrupt+0x40>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <vPortSetupTimerInterrupt+0x44>)
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010
 8006e54:	e000e018 	.word	0xe000e018
 8006e58:	20000004 	.word	0x20000004
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	e000e014 	.word	0xe000e014

08006e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e74 <vPortEnableVFP+0x10>
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e6e:	6001      	str	r1, [r0, #0]
 8006e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed88 	.word	0xe000ed88

08006e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d914      	bls.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <vPortValidateInterruptPriority+0x70>)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vPortValidateInterruptPriority+0x74>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	7afa      	ldrb	r2, [r7, #11]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d20a      	bcs.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <vPortValidateInterruptPriority+0x78>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <vPortValidateInterruptPriority+0x7c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d90a      	bls.n	8006eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	603b      	str	r3, [r7, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vPortValidateInterruptPriority+0x60>
	}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	e000e3f0 	.word	0xe000e3f0
 8006eec:	20000f48 	.word	0x20000f48
 8006ef0:	e000ed0c 	.word	0xe000ed0c
 8006ef4:	20000f4c 	.word	0x20000f4c

08006ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f04:	f7fe fc9e 	bl	8005844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f08:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <pvPortMalloc+0x180>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f10:	f000 f920 	bl	8007154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f14:	4b59      	ldr	r3, [pc, #356]	; (800707c <pvPortMalloc+0x184>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8093 	bne.w	8007048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01d      	beq.n	8006f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f28:	2208      	movs	r2, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <pvPortMalloc+0x6c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d06e      	beq.n	8007048 <pvPortMalloc+0x150>
 8006f6a:	4b45      	ldr	r3, [pc, #276]	; (8007080 <pvPortMalloc+0x188>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d869      	bhi.n	8007048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f74:	4b43      	ldr	r3, [pc, #268]	; (8007084 <pvPortMalloc+0x18c>)
 8006f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f78:	4b42      	ldr	r3, [pc, #264]	; (8007084 <pvPortMalloc+0x18c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7e:	e004      	b.n	8006f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <pvPortMalloc+0xa4>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f1      	bne.n	8006f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <pvPortMalloc+0x180>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d050      	beq.n	8007048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2208      	movs	r2, #8
 8006fac:	4413      	add	r3, r2
 8006fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d91f      	bls.n	8007008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007002:	69b8      	ldr	r0, [r7, #24]
 8007004:	f000 f908 	bl	8007218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <pvPortMalloc+0x188>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <pvPortMalloc+0x188>)
 8007014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <pvPortMalloc+0x188>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <pvPortMalloc+0x190>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d203      	bcs.n	800702a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007022:	4b17      	ldr	r3, [pc, #92]	; (8007080 <pvPortMalloc+0x188>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <pvPortMalloc+0x190>)
 8007028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <pvPortMalloc+0x184>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	431a      	orrs	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <pvPortMalloc+0x194>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a11      	ldr	r2, [pc, #68]	; (800708c <pvPortMalloc+0x194>)
 8007046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007048:	f7fe fc0a 	bl	8005860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <pvPortMalloc+0x174>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <pvPortMalloc+0x172>
	return pvReturn;
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20004b58 	.word	0x20004b58
 800707c:	20004b6c 	.word	0x20004b6c
 8007080:	20004b5c 	.word	0x20004b5c
 8007084:	20004b50 	.word	0x20004b50
 8007088:	20004b60 	.word	0x20004b60
 800708c:	20004b64 	.word	0x20004b64

08007090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04d      	beq.n	800713e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a2:	2308      	movs	r3, #8
 80070a4:	425b      	negs	r3, r3
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b24      	ldr	r3, [pc, #144]	; (8007148 <vPortFree+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <vPortFree+0x44>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <vPortFree+0x62>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60bb      	str	r3, [r7, #8]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <vPortFree+0xb8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <vPortFree+0xb8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007118:	f7fe fb94 	bl	8005844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <vPortFree+0xbc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4413      	add	r3, r2
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <vPortFree+0xbc>)
 8007128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f000 f874 	bl	8007218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <vPortFree+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <vPortFree+0xc0>)
 8007138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800713a:	f7fe fb91 	bl	8005860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20004b6c 	.word	0x20004b6c
 800714c:	20004b5c 	.word	0x20004b5c
 8007150:	20004b68 	.word	0x20004b68

08007154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800715a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800715e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <prvHeapInit+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <prvHeapInit+0xac>)
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <prvHeapInit+0xb0>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <prvHeapInit+0xb0>)
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a0:	2208      	movs	r2, #8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <prvHeapInit+0xb4>)
 80071b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvHeapInit+0xb4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvHeapInit+0xb4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <prvHeapInit+0xb8>)
 80071e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <prvHeapInit+0xbc>)
 80071ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <prvHeapInit+0xc0>)
 80071ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20000f50 	.word	0x20000f50
 8007204:	20004b50 	.word	0x20004b50
 8007208:	20004b58 	.word	0x20004b58
 800720c:	20004b60 	.word	0x20004b60
 8007210:	20004b5c 	.word	0x20004b5c
 8007214:	20004b6c 	.word	0x20004b6c

08007218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007220:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <prvInsertBlockIntoFreeList+0xac>)
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e002      	b.n	800722c <prvInsertBlockIntoFreeList+0x14>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d8f7      	bhi.n	8007226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d108      	bne.n	800725a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d118      	bne.n	80072a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d00d      	beq.n	8007296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e008      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e003      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d002      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20004b50 	.word	0x20004b50
 80072c8:	20004b58 	.word	0x20004b58

080072cc <__errno>:
 80072cc:	4b01      	ldr	r3, [pc, #4]	; (80072d4 <__errno+0x8>)
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000014 	.word	0x20000014

080072d8 <__libc_init_array>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4d0d      	ldr	r5, [pc, #52]	; (8007310 <__libc_init_array+0x38>)
 80072dc:	4c0d      	ldr	r4, [pc, #52]	; (8007314 <__libc_init_array+0x3c>)
 80072de:	1b64      	subs	r4, r4, r5
 80072e0:	10a4      	asrs	r4, r4, #2
 80072e2:	2600      	movs	r6, #0
 80072e4:	42a6      	cmp	r6, r4
 80072e6:	d109      	bne.n	80072fc <__libc_init_array+0x24>
 80072e8:	4d0b      	ldr	r5, [pc, #44]	; (8007318 <__libc_init_array+0x40>)
 80072ea:	4c0c      	ldr	r4, [pc, #48]	; (800731c <__libc_init_array+0x44>)
 80072ec:	f000 fc9c 	bl	8007c28 <_init>
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	2600      	movs	r6, #0
 80072f6:	42a6      	cmp	r6, r4
 80072f8:	d105      	bne.n	8007306 <__libc_init_array+0x2e>
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007300:	4798      	blx	r3
 8007302:	3601      	adds	r6, #1
 8007304:	e7ee      	b.n	80072e4 <__libc_init_array+0xc>
 8007306:	f855 3b04 	ldr.w	r3, [r5], #4
 800730a:	4798      	blx	r3
 800730c:	3601      	adds	r6, #1
 800730e:	e7f2      	b.n	80072f6 <__libc_init_array+0x1e>
 8007310:	08007ff0 	.word	0x08007ff0
 8007314:	08007ff0 	.word	0x08007ff0
 8007318:	08007ff0 	.word	0x08007ff0
 800731c:	08007ff4 	.word	0x08007ff4

08007320 <memcpy>:
 8007320:	440a      	add	r2, r1
 8007322:	4291      	cmp	r1, r2
 8007324:	f100 33ff 	add.w	r3, r0, #4294967295
 8007328:	d100      	bne.n	800732c <memcpy+0xc>
 800732a:	4770      	bx	lr
 800732c:	b510      	push	{r4, lr}
 800732e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007336:	4291      	cmp	r1, r2
 8007338:	d1f9      	bne.n	800732e <memcpy+0xe>
 800733a:	bd10      	pop	{r4, pc}

0800733c <memset>:
 800733c:	4402      	add	r2, r0
 800733e:	4603      	mov	r3, r0
 8007340:	4293      	cmp	r3, r2
 8007342:	d100      	bne.n	8007346 <memset+0xa>
 8007344:	4770      	bx	lr
 8007346:	f803 1b01 	strb.w	r1, [r3], #1
 800734a:	e7f9      	b.n	8007340 <memset+0x4>

0800734c <siprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b500      	push	{lr}
 8007350:	b09c      	sub	sp, #112	; 0x70
 8007352:	ab1d      	add	r3, sp, #116	; 0x74
 8007354:	9002      	str	r0, [sp, #8]
 8007356:	9006      	str	r0, [sp, #24]
 8007358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800735c:	4809      	ldr	r0, [pc, #36]	; (8007384 <siprintf+0x38>)
 800735e:	9107      	str	r1, [sp, #28]
 8007360:	9104      	str	r1, [sp, #16]
 8007362:	4909      	ldr	r1, [pc, #36]	; (8007388 <siprintf+0x3c>)
 8007364:	f853 2b04 	ldr.w	r2, [r3], #4
 8007368:	9105      	str	r1, [sp, #20]
 800736a:	6800      	ldr	r0, [r0, #0]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	a902      	add	r1, sp, #8
 8007370:	f000 f876 	bl	8007460 <_svfiprintf_r>
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	b01c      	add	sp, #112	; 0x70
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	20000014 	.word	0x20000014
 8007388:	ffff0208 	.word	0xffff0208

0800738c <strcat>:
 800738c:	b510      	push	{r4, lr}
 800738e:	4602      	mov	r2, r0
 8007390:	7814      	ldrb	r4, [r2, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	3201      	adds	r2, #1
 8007396:	2c00      	cmp	r4, #0
 8007398:	d1fa      	bne.n	8007390 <strcat+0x4>
 800739a:	3b01      	subs	r3, #1
 800739c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	d1f9      	bne.n	800739c <strcat+0x10>
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__ssputs_r>:
 80073aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ae:	688e      	ldr	r6, [r1, #8]
 80073b0:	429e      	cmp	r6, r3
 80073b2:	4682      	mov	sl, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	4690      	mov	r8, r2
 80073b8:	461f      	mov	r7, r3
 80073ba:	d838      	bhi.n	800742e <__ssputs_r+0x84>
 80073bc:	898a      	ldrh	r2, [r1, #12]
 80073be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c2:	d032      	beq.n	800742a <__ssputs_r+0x80>
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	6909      	ldr	r1, [r1, #16]
 80073c8:	eba5 0901 	sub.w	r9, r5, r1
 80073cc:	6965      	ldr	r5, [r4, #20]
 80073ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d6:	3301      	adds	r3, #1
 80073d8:	444b      	add	r3, r9
 80073da:	106d      	asrs	r5, r5, #1
 80073dc:	429d      	cmp	r5, r3
 80073de:	bf38      	it	cc
 80073e0:	461d      	movcc	r5, r3
 80073e2:	0553      	lsls	r3, r2, #21
 80073e4:	d531      	bpl.n	800744a <__ssputs_r+0xa0>
 80073e6:	4629      	mov	r1, r5
 80073e8:	f000 fb54 	bl	8007a94 <_malloc_r>
 80073ec:	4606      	mov	r6, r0
 80073ee:	b950      	cbnz	r0, 8007406 <__ssputs_r+0x5c>
 80073f0:	230c      	movs	r3, #12
 80073f2:	f8ca 3000 	str.w	r3, [sl]
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	6921      	ldr	r1, [r4, #16]
 8007408:	464a      	mov	r2, r9
 800740a:	f7ff ff89 	bl	8007320 <memcpy>
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	6126      	str	r6, [r4, #16]
 800741c:	6165      	str	r5, [r4, #20]
 800741e:	444e      	add	r6, r9
 8007420:	eba5 0509 	sub.w	r5, r5, r9
 8007424:	6026      	str	r6, [r4, #0]
 8007426:	60a5      	str	r5, [r4, #8]
 8007428:	463e      	mov	r6, r7
 800742a:	42be      	cmp	r6, r7
 800742c:	d900      	bls.n	8007430 <__ssputs_r+0x86>
 800742e:	463e      	mov	r6, r7
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4632      	mov	r2, r6
 8007434:	4641      	mov	r1, r8
 8007436:	f000 faa7 	bl	8007988 <memmove>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	4433      	add	r3, r6
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	2000      	movs	r0, #0
 8007448:	e7db      	b.n	8007402 <__ssputs_r+0x58>
 800744a:	462a      	mov	r2, r5
 800744c:	f000 fb96 	bl	8007b7c <_realloc_r>
 8007450:	4606      	mov	r6, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d1e1      	bne.n	800741a <__ssputs_r+0x70>
 8007456:	6921      	ldr	r1, [r4, #16]
 8007458:	4650      	mov	r0, sl
 800745a:	f000 faaf 	bl	80079bc <_free_r>
 800745e:	e7c7      	b.n	80073f0 <__ssputs_r+0x46>

08007460 <_svfiprintf_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4698      	mov	r8, r3
 8007466:	898b      	ldrh	r3, [r1, #12]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	b09d      	sub	sp, #116	; 0x74
 800746c:	4607      	mov	r7, r0
 800746e:	460d      	mov	r5, r1
 8007470:	4614      	mov	r4, r2
 8007472:	d50e      	bpl.n	8007492 <_svfiprintf_r+0x32>
 8007474:	690b      	ldr	r3, [r1, #16]
 8007476:	b963      	cbnz	r3, 8007492 <_svfiprintf_r+0x32>
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	f000 fb0b 	bl	8007a94 <_malloc_r>
 800747e:	6028      	str	r0, [r5, #0]
 8007480:	6128      	str	r0, [r5, #16]
 8007482:	b920      	cbnz	r0, 800748e <_svfiprintf_r+0x2e>
 8007484:	230c      	movs	r3, #12
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e0d1      	b.n	8007632 <_svfiprintf_r+0x1d2>
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	616b      	str	r3, [r5, #20]
 8007492:	2300      	movs	r3, #0
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	2320      	movs	r3, #32
 8007498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749c:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a0:	2330      	movs	r3, #48	; 0x30
 80074a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800764c <_svfiprintf_r+0x1ec>
 80074a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074aa:	f04f 0901 	mov.w	r9, #1
 80074ae:	4623      	mov	r3, r4
 80074b0:	469a      	mov	sl, r3
 80074b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b6:	b10a      	cbz	r2, 80074bc <_svfiprintf_r+0x5c>
 80074b8:	2a25      	cmp	r2, #37	; 0x25
 80074ba:	d1f9      	bne.n	80074b0 <_svfiprintf_r+0x50>
 80074bc:	ebba 0b04 	subs.w	fp, sl, r4
 80074c0:	d00b      	beq.n	80074da <_svfiprintf_r+0x7a>
 80074c2:	465b      	mov	r3, fp
 80074c4:	4622      	mov	r2, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ff6e 	bl	80073aa <__ssputs_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	f000 80aa 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d6:	445a      	add	r2, fp
 80074d8:	9209      	str	r2, [sp, #36]	; 0x24
 80074da:	f89a 3000 	ldrb.w	r3, [sl]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80a2 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ee:	f10a 0a01 	add.w	sl, sl, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fa:	931a      	str	r3, [sp, #104]	; 0x68
 80074fc:	4654      	mov	r4, sl
 80074fe:	2205      	movs	r2, #5
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4851      	ldr	r0, [pc, #324]	; (800764c <_svfiprintf_r+0x1ec>)
 8007506:	f7f8 fe83 	bl	8000210 <memchr>
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	b9d8      	cbnz	r0, 8007546 <_svfiprintf_r+0xe6>
 800750e:	06d0      	lsls	r0, r2, #27
 8007510:	bf44      	itt	mi
 8007512:	2320      	movmi	r3, #32
 8007514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007518:	0711      	lsls	r1, r2, #28
 800751a:	bf44      	itt	mi
 800751c:	232b      	movmi	r3, #43	; 0x2b
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d015      	beq.n	8007556 <_svfiprintf_r+0xf6>
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4654      	mov	r4, sl
 800752e:	2000      	movs	r0, #0
 8007530:	f04f 0c0a 	mov.w	ip, #10
 8007534:	4621      	mov	r1, r4
 8007536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753a:	3b30      	subs	r3, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d94e      	bls.n	80075de <_svfiprintf_r+0x17e>
 8007540:	b1b0      	cbz	r0, 8007570 <_svfiprintf_r+0x110>
 8007542:	9207      	str	r2, [sp, #28]
 8007544:	e014      	b.n	8007570 <_svfiprintf_r+0x110>
 8007546:	eba0 0308 	sub.w	r3, r0, r8
 800754a:	fa09 f303 	lsl.w	r3, r9, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	46a2      	mov	sl, r4
 8007554:	e7d2      	b.n	80074fc <_svfiprintf_r+0x9c>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d19      	adds	r1, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9103      	str	r1, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfbb      	ittet	lt
 8007562:	425b      	neglt	r3, r3
 8007564:	f042 0202 	orrlt.w	r2, r2, #2
 8007568:	9307      	strge	r3, [sp, #28]
 800756a:	9307      	strlt	r3, [sp, #28]
 800756c:	bfb8      	it	lt
 800756e:	9204      	strlt	r2, [sp, #16]
 8007570:	7823      	ldrb	r3, [r4, #0]
 8007572:	2b2e      	cmp	r3, #46	; 0x2e
 8007574:	d10c      	bne.n	8007590 <_svfiprintf_r+0x130>
 8007576:	7863      	ldrb	r3, [r4, #1]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d135      	bne.n	80075e8 <_svfiprintf_r+0x188>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	1d1a      	adds	r2, r3, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	9203      	str	r2, [sp, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bfb8      	it	lt
 8007588:	f04f 33ff 	movlt.w	r3, #4294967295
 800758c:	3402      	adds	r4, #2
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800765c <_svfiprintf_r+0x1fc>
 8007594:	7821      	ldrb	r1, [r4, #0]
 8007596:	2203      	movs	r2, #3
 8007598:	4650      	mov	r0, sl
 800759a:	f7f8 fe39 	bl	8000210 <memchr>
 800759e:	b140      	cbz	r0, 80075b2 <_svfiprintf_r+0x152>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	eba0 000a 	sub.w	r0, r0, sl
 80075a6:	fa03 f000 	lsl.w	r0, r3, r0
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	4303      	orrs	r3, r0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	4826      	ldr	r0, [pc, #152]	; (8007650 <_svfiprintf_r+0x1f0>)
 80075b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075bc:	2206      	movs	r2, #6
 80075be:	f7f8 fe27 	bl	8000210 <memchr>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d038      	beq.n	8007638 <_svfiprintf_r+0x1d8>
 80075c6:	4b23      	ldr	r3, [pc, #140]	; (8007654 <_svfiprintf_r+0x1f4>)
 80075c8:	bb1b      	cbnz	r3, 8007612 <_svfiprintf_r+0x1b2>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	f023 0307 	bic.w	r3, r3, #7
 80075d2:	3308      	adds	r3, #8
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	4433      	add	r3, r6
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	e767      	b.n	80074ae <_svfiprintf_r+0x4e>
 80075de:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e2:	460c      	mov	r4, r1
 80075e4:	2001      	movs	r0, #1
 80075e6:	e7a5      	b.n	8007534 <_svfiprintf_r+0xd4>
 80075e8:	2300      	movs	r3, #0
 80075ea:	3401      	adds	r4, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	4619      	mov	r1, r3
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4620      	mov	r0, r4
 80075f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fa:	3a30      	subs	r2, #48	; 0x30
 80075fc:	2a09      	cmp	r2, #9
 80075fe:	d903      	bls.n	8007608 <_svfiprintf_r+0x1a8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0c5      	beq.n	8007590 <_svfiprintf_r+0x130>
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e7c3      	b.n	8007590 <_svfiprintf_r+0x130>
 8007608:	fb0c 2101 	mla	r1, ip, r1, r2
 800760c:	4604      	mov	r4, r0
 800760e:	2301      	movs	r3, #1
 8007610:	e7f0      	b.n	80075f4 <_svfiprintf_r+0x194>
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <_svfiprintf_r+0x1f8>)
 800761a:	a904      	add	r1, sp, #16
 800761c:	4638      	mov	r0, r7
 800761e:	f3af 8000 	nop.w
 8007622:	1c42      	adds	r2, r0, #1
 8007624:	4606      	mov	r6, r0
 8007626:	d1d6      	bne.n	80075d6 <_svfiprintf_r+0x176>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	065b      	lsls	r3, r3, #25
 800762c:	f53f af2c 	bmi.w	8007488 <_svfiprintf_r+0x28>
 8007630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007632:	b01d      	add	sp, #116	; 0x74
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <_svfiprintf_r+0x1f8>)
 8007640:	a904      	add	r1, sp, #16
 8007642:	4638      	mov	r0, r7
 8007644:	f000 f87a 	bl	800773c <_printf_i>
 8007648:	e7eb      	b.n	8007622 <_svfiprintf_r+0x1c2>
 800764a:	bf00      	nop
 800764c:	08007fb4 	.word	0x08007fb4
 8007650:	08007fbe 	.word	0x08007fbe
 8007654:	00000000 	.word	0x00000000
 8007658:	080073ab 	.word	0x080073ab
 800765c:	08007fba 	.word	0x08007fba

08007660 <_printf_common>:
 8007660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	4616      	mov	r6, r2
 8007666:	4699      	mov	r9, r3
 8007668:	688a      	ldr	r2, [r1, #8]
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007670:	4293      	cmp	r3, r2
 8007672:	bfb8      	it	lt
 8007674:	4613      	movlt	r3, r2
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800767c:	4607      	mov	r7, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b10a      	cbz	r2, 8007686 <_printf_common+0x26>
 8007682:	3301      	adds	r3, #1
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	0699      	lsls	r1, r3, #26
 800768a:	bf42      	ittt	mi
 800768c:	6833      	ldrmi	r3, [r6, #0]
 800768e:	3302      	addmi	r3, #2
 8007690:	6033      	strmi	r3, [r6, #0]
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	f015 0506 	ands.w	r5, r5, #6
 8007698:	d106      	bne.n	80076a8 <_printf_common+0x48>
 800769a:	f104 0a19 	add.w	sl, r4, #25
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	6832      	ldr	r2, [r6, #0]
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	42ab      	cmp	r3, r5
 80076a6:	dc26      	bgt.n	80076f6 <_printf_common+0x96>
 80076a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076ac:	1e13      	subs	r3, r2, #0
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	bf18      	it	ne
 80076b2:	2301      	movne	r3, #1
 80076b4:	0692      	lsls	r2, r2, #26
 80076b6:	d42b      	bmi.n	8007710 <_printf_common+0xb0>
 80076b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076bc:	4649      	mov	r1, r9
 80076be:	4638      	mov	r0, r7
 80076c0:	47c0      	blx	r8
 80076c2:	3001      	adds	r0, #1
 80076c4:	d01e      	beq.n	8007704 <_printf_common+0xa4>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	68e5      	ldr	r5, [r4, #12]
 80076ca:	6832      	ldr	r2, [r6, #0]
 80076cc:	f003 0306 	and.w	r3, r3, #6
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	bf08      	it	eq
 80076d4:	1aad      	subeq	r5, r5, r2
 80076d6:	68a3      	ldr	r3, [r4, #8]
 80076d8:	6922      	ldr	r2, [r4, #16]
 80076da:	bf0c      	ite	eq
 80076dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e0:	2500      	movne	r5, #0
 80076e2:	4293      	cmp	r3, r2
 80076e4:	bfc4      	itt	gt
 80076e6:	1a9b      	subgt	r3, r3, r2
 80076e8:	18ed      	addgt	r5, r5, r3
 80076ea:	2600      	movs	r6, #0
 80076ec:	341a      	adds	r4, #26
 80076ee:	42b5      	cmp	r5, r6
 80076f0:	d11a      	bne.n	8007728 <_printf_common+0xc8>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e008      	b.n	8007708 <_printf_common+0xa8>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4652      	mov	r2, sl
 80076fa:	4649      	mov	r1, r9
 80076fc:	4638      	mov	r0, r7
 80076fe:	47c0      	blx	r8
 8007700:	3001      	adds	r0, #1
 8007702:	d103      	bne.n	800770c <_printf_common+0xac>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770c:	3501      	adds	r5, #1
 800770e:	e7c6      	b.n	800769e <_printf_common+0x3e>
 8007710:	18e1      	adds	r1, r4, r3
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	2030      	movs	r0, #48	; 0x30
 8007716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771a:	4422      	add	r2, r4
 800771c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007724:	3302      	adds	r3, #2
 8007726:	e7c7      	b.n	80076b8 <_printf_common+0x58>
 8007728:	2301      	movs	r3, #1
 800772a:	4622      	mov	r2, r4
 800772c:	4649      	mov	r1, r9
 800772e:	4638      	mov	r0, r7
 8007730:	47c0      	blx	r8
 8007732:	3001      	adds	r0, #1
 8007734:	d0e6      	beq.n	8007704 <_printf_common+0xa4>
 8007736:	3601      	adds	r6, #1
 8007738:	e7d9      	b.n	80076ee <_printf_common+0x8e>
	...

0800773c <_printf_i>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	7e0f      	ldrb	r7, [r1, #24]
 8007742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007744:	2f78      	cmp	r7, #120	; 0x78
 8007746:	4691      	mov	r9, r2
 8007748:	4680      	mov	r8, r0
 800774a:	460c      	mov	r4, r1
 800774c:	469a      	mov	sl, r3
 800774e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007752:	d807      	bhi.n	8007764 <_printf_i+0x28>
 8007754:	2f62      	cmp	r7, #98	; 0x62
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x32>
 8007758:	2f00      	cmp	r7, #0
 800775a:	f000 80d8 	beq.w	800790e <_printf_i+0x1d2>
 800775e:	2f58      	cmp	r7, #88	; 0x58
 8007760:	f000 80a3 	beq.w	80078aa <_printf_i+0x16e>
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800776c:	e03a      	b.n	80077e4 <_printf_i+0xa8>
 800776e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007772:	2b15      	cmp	r3, #21
 8007774:	d8f6      	bhi.n	8007764 <_printf_i+0x28>
 8007776:	a101      	add	r1, pc, #4	; (adr r1, 800777c <_printf_i+0x40>)
 8007778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077e9 	.word	0x080077e9
 8007784:	08007765 	.word	0x08007765
 8007788:	08007765 	.word	0x08007765
 800778c:	08007765 	.word	0x08007765
 8007790:	08007765 	.word	0x08007765
 8007794:	080077e9 	.word	0x080077e9
 8007798:	08007765 	.word	0x08007765
 800779c:	08007765 	.word	0x08007765
 80077a0:	08007765 	.word	0x08007765
 80077a4:	08007765 	.word	0x08007765
 80077a8:	080078f5 	.word	0x080078f5
 80077ac:	08007819 	.word	0x08007819
 80077b0:	080078d7 	.word	0x080078d7
 80077b4:	08007765 	.word	0x08007765
 80077b8:	08007765 	.word	0x08007765
 80077bc:	08007917 	.word	0x08007917
 80077c0:	08007765 	.word	0x08007765
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007765 	.word	0x08007765
 80077cc:	08007765 	.word	0x08007765
 80077d0:	080078df 	.word	0x080078df
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0a3      	b.n	8007930 <_printf_i+0x1f4>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	6829      	ldr	r1, [r5, #0]
 80077ec:	0606      	lsls	r6, r0, #24
 80077ee:	f101 0304 	add.w	r3, r1, #4
 80077f2:	d50a      	bpl.n	800780a <_printf_i+0xce>
 80077f4:	680e      	ldr	r6, [r1, #0]
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	da03      	bge.n	8007804 <_printf_i+0xc8>
 80077fc:	232d      	movs	r3, #45	; 0x2d
 80077fe:	4276      	negs	r6, r6
 8007800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007804:	485e      	ldr	r0, [pc, #376]	; (8007980 <_printf_i+0x244>)
 8007806:	230a      	movs	r3, #10
 8007808:	e019      	b.n	800783e <_printf_i+0x102>
 800780a:	680e      	ldr	r6, [r1, #0]
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007812:	bf18      	it	ne
 8007814:	b236      	sxthne	r6, r6
 8007816:	e7ef      	b.n	80077f8 <_printf_i+0xbc>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	6820      	ldr	r0, [r4, #0]
 800781c:	1d19      	adds	r1, r3, #4
 800781e:	6029      	str	r1, [r5, #0]
 8007820:	0601      	lsls	r1, r0, #24
 8007822:	d501      	bpl.n	8007828 <_printf_i+0xec>
 8007824:	681e      	ldr	r6, [r3, #0]
 8007826:	e002      	b.n	800782e <_printf_i+0xf2>
 8007828:	0646      	lsls	r6, r0, #25
 800782a:	d5fb      	bpl.n	8007824 <_printf_i+0xe8>
 800782c:	881e      	ldrh	r6, [r3, #0]
 800782e:	4854      	ldr	r0, [pc, #336]	; (8007980 <_printf_i+0x244>)
 8007830:	2f6f      	cmp	r7, #111	; 0x6f
 8007832:	bf0c      	ite	eq
 8007834:	2308      	moveq	r3, #8
 8007836:	230a      	movne	r3, #10
 8007838:	2100      	movs	r1, #0
 800783a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800783e:	6865      	ldr	r5, [r4, #4]
 8007840:	60a5      	str	r5, [r4, #8]
 8007842:	2d00      	cmp	r5, #0
 8007844:	bfa2      	ittt	ge
 8007846:	6821      	ldrge	r1, [r4, #0]
 8007848:	f021 0104 	bicge.w	r1, r1, #4
 800784c:	6021      	strge	r1, [r4, #0]
 800784e:	b90e      	cbnz	r6, 8007854 <_printf_i+0x118>
 8007850:	2d00      	cmp	r5, #0
 8007852:	d04d      	beq.n	80078f0 <_printf_i+0x1b4>
 8007854:	4615      	mov	r5, r2
 8007856:	fbb6 f1f3 	udiv	r1, r6, r3
 800785a:	fb03 6711 	mls	r7, r3, r1, r6
 800785e:	5dc7      	ldrb	r7, [r0, r7]
 8007860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007864:	4637      	mov	r7, r6
 8007866:	42bb      	cmp	r3, r7
 8007868:	460e      	mov	r6, r1
 800786a:	d9f4      	bls.n	8007856 <_printf_i+0x11a>
 800786c:	2b08      	cmp	r3, #8
 800786e:	d10b      	bne.n	8007888 <_printf_i+0x14c>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	07de      	lsls	r6, r3, #31
 8007874:	d508      	bpl.n	8007888 <_printf_i+0x14c>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	4299      	cmp	r1, r3
 800787c:	bfde      	ittt	le
 800787e:	2330      	movle	r3, #48	; 0x30
 8007880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007888:	1b52      	subs	r2, r2, r5
 800788a:	6122      	str	r2, [r4, #16]
 800788c:	f8cd a000 	str.w	sl, [sp]
 8007890:	464b      	mov	r3, r9
 8007892:	aa03      	add	r2, sp, #12
 8007894:	4621      	mov	r1, r4
 8007896:	4640      	mov	r0, r8
 8007898:	f7ff fee2 	bl	8007660 <_printf_common>
 800789c:	3001      	adds	r0, #1
 800789e:	d14c      	bne.n	800793a <_printf_i+0x1fe>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	b004      	add	sp, #16
 80078a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078aa:	4835      	ldr	r0, [pc, #212]	; (8007980 <_printf_i+0x244>)
 80078ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078b0:	6829      	ldr	r1, [r5, #0]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b8:	6029      	str	r1, [r5, #0]
 80078ba:	061d      	lsls	r5, r3, #24
 80078bc:	d514      	bpl.n	80078e8 <_printf_i+0x1ac>
 80078be:	07df      	lsls	r7, r3, #31
 80078c0:	bf44      	itt	mi
 80078c2:	f043 0320 	orrmi.w	r3, r3, #32
 80078c6:	6023      	strmi	r3, [r4, #0]
 80078c8:	b91e      	cbnz	r6, 80078d2 <_printf_i+0x196>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f023 0320 	bic.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2310      	movs	r3, #16
 80078d4:	e7b0      	b.n	8007838 <_printf_i+0xfc>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f043 0320 	orr.w	r3, r3, #32
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	2378      	movs	r3, #120	; 0x78
 80078e0:	4828      	ldr	r0, [pc, #160]	; (8007984 <_printf_i+0x248>)
 80078e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078e6:	e7e3      	b.n	80078b0 <_printf_i+0x174>
 80078e8:	0659      	lsls	r1, r3, #25
 80078ea:	bf48      	it	mi
 80078ec:	b2b6      	uxthmi	r6, r6
 80078ee:	e7e6      	b.n	80078be <_printf_i+0x182>
 80078f0:	4615      	mov	r5, r2
 80078f2:	e7bb      	b.n	800786c <_printf_i+0x130>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	6826      	ldr	r6, [r4, #0]
 80078f8:	6961      	ldr	r1, [r4, #20]
 80078fa:	1d18      	adds	r0, r3, #4
 80078fc:	6028      	str	r0, [r5, #0]
 80078fe:	0635      	lsls	r5, r6, #24
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	d501      	bpl.n	8007908 <_printf_i+0x1cc>
 8007904:	6019      	str	r1, [r3, #0]
 8007906:	e002      	b.n	800790e <_printf_i+0x1d2>
 8007908:	0670      	lsls	r0, r6, #25
 800790a:	d5fb      	bpl.n	8007904 <_printf_i+0x1c8>
 800790c:	8019      	strh	r1, [r3, #0]
 800790e:	2300      	movs	r3, #0
 8007910:	6123      	str	r3, [r4, #16]
 8007912:	4615      	mov	r5, r2
 8007914:	e7ba      	b.n	800788c <_printf_i+0x150>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	602a      	str	r2, [r5, #0]
 800791c:	681d      	ldr	r5, [r3, #0]
 800791e:	6862      	ldr	r2, [r4, #4]
 8007920:	2100      	movs	r1, #0
 8007922:	4628      	mov	r0, r5
 8007924:	f7f8 fc74 	bl	8000210 <memchr>
 8007928:	b108      	cbz	r0, 800792e <_printf_i+0x1f2>
 800792a:	1b40      	subs	r0, r0, r5
 800792c:	6060      	str	r0, [r4, #4]
 800792e:	6863      	ldr	r3, [r4, #4]
 8007930:	6123      	str	r3, [r4, #16]
 8007932:	2300      	movs	r3, #0
 8007934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007938:	e7a8      	b.n	800788c <_printf_i+0x150>
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	462a      	mov	r2, r5
 800793e:	4649      	mov	r1, r9
 8007940:	4640      	mov	r0, r8
 8007942:	47d0      	blx	sl
 8007944:	3001      	adds	r0, #1
 8007946:	d0ab      	beq.n	80078a0 <_printf_i+0x164>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	079b      	lsls	r3, r3, #30
 800794c:	d413      	bmi.n	8007976 <_printf_i+0x23a>
 800794e:	68e0      	ldr	r0, [r4, #12]
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	4298      	cmp	r0, r3
 8007954:	bfb8      	it	lt
 8007956:	4618      	movlt	r0, r3
 8007958:	e7a4      	b.n	80078a4 <_printf_i+0x168>
 800795a:	2301      	movs	r3, #1
 800795c:	4632      	mov	r2, r6
 800795e:	4649      	mov	r1, r9
 8007960:	4640      	mov	r0, r8
 8007962:	47d0      	blx	sl
 8007964:	3001      	adds	r0, #1
 8007966:	d09b      	beq.n	80078a0 <_printf_i+0x164>
 8007968:	3501      	adds	r5, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	9903      	ldr	r1, [sp, #12]
 800796e:	1a5b      	subs	r3, r3, r1
 8007970:	42ab      	cmp	r3, r5
 8007972:	dcf2      	bgt.n	800795a <_printf_i+0x21e>
 8007974:	e7eb      	b.n	800794e <_printf_i+0x212>
 8007976:	2500      	movs	r5, #0
 8007978:	f104 0619 	add.w	r6, r4, #25
 800797c:	e7f5      	b.n	800796a <_printf_i+0x22e>
 800797e:	bf00      	nop
 8007980:	08007fc5 	.word	0x08007fc5
 8007984:	08007fd6 	.word	0x08007fd6

08007988 <memmove>:
 8007988:	4288      	cmp	r0, r1
 800798a:	b510      	push	{r4, lr}
 800798c:	eb01 0402 	add.w	r4, r1, r2
 8007990:	d902      	bls.n	8007998 <memmove+0x10>
 8007992:	4284      	cmp	r4, r0
 8007994:	4623      	mov	r3, r4
 8007996:	d807      	bhi.n	80079a8 <memmove+0x20>
 8007998:	1e43      	subs	r3, r0, #1
 800799a:	42a1      	cmp	r1, r4
 800799c:	d008      	beq.n	80079b0 <memmove+0x28>
 800799e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079a6:	e7f8      	b.n	800799a <memmove+0x12>
 80079a8:	4402      	add	r2, r0
 80079aa:	4601      	mov	r1, r0
 80079ac:	428a      	cmp	r2, r1
 80079ae:	d100      	bne.n	80079b2 <memmove+0x2a>
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ba:	e7f7      	b.n	80079ac <memmove+0x24>

080079bc <_free_r>:
 80079bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079be:	2900      	cmp	r1, #0
 80079c0:	d044      	beq.n	8007a4c <_free_r+0x90>
 80079c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c6:	9001      	str	r0, [sp, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f1a1 0404 	sub.w	r4, r1, #4
 80079ce:	bfb8      	it	lt
 80079d0:	18e4      	addlt	r4, r4, r3
 80079d2:	f000 f913 	bl	8007bfc <__malloc_lock>
 80079d6:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <_free_r+0x94>)
 80079d8:	9801      	ldr	r0, [sp, #4]
 80079da:	6813      	ldr	r3, [r2, #0]
 80079dc:	b933      	cbnz	r3, 80079ec <_free_r+0x30>
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	6014      	str	r4, [r2, #0]
 80079e2:	b003      	add	sp, #12
 80079e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e8:	f000 b90e 	b.w	8007c08 <__malloc_unlock>
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	d908      	bls.n	8007a02 <_free_r+0x46>
 80079f0:	6825      	ldr	r5, [r4, #0]
 80079f2:	1961      	adds	r1, r4, r5
 80079f4:	428b      	cmp	r3, r1
 80079f6:	bf01      	itttt	eq
 80079f8:	6819      	ldreq	r1, [r3, #0]
 80079fa:	685b      	ldreq	r3, [r3, #4]
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	e7ed      	b.n	80079de <_free_r+0x22>
 8007a02:	461a      	mov	r2, r3
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	b10b      	cbz	r3, 8007a0c <_free_r+0x50>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d9fa      	bls.n	8007a02 <_free_r+0x46>
 8007a0c:	6811      	ldr	r1, [r2, #0]
 8007a0e:	1855      	adds	r5, r2, r1
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	d10b      	bne.n	8007a2c <_free_r+0x70>
 8007a14:	6824      	ldr	r4, [r4, #0]
 8007a16:	4421      	add	r1, r4
 8007a18:	1854      	adds	r4, r2, r1
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	6011      	str	r1, [r2, #0]
 8007a1e:	d1e0      	bne.n	80079e2 <_free_r+0x26>
 8007a20:	681c      	ldr	r4, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	6053      	str	r3, [r2, #4]
 8007a26:	4421      	add	r1, r4
 8007a28:	6011      	str	r1, [r2, #0]
 8007a2a:	e7da      	b.n	80079e2 <_free_r+0x26>
 8007a2c:	d902      	bls.n	8007a34 <_free_r+0x78>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	6003      	str	r3, [r0, #0]
 8007a32:	e7d6      	b.n	80079e2 <_free_r+0x26>
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	1961      	adds	r1, r4, r5
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	bf04      	itt	eq
 8007a3c:	6819      	ldreq	r1, [r3, #0]
 8007a3e:	685b      	ldreq	r3, [r3, #4]
 8007a40:	6063      	str	r3, [r4, #4]
 8007a42:	bf04      	itt	eq
 8007a44:	1949      	addeq	r1, r1, r5
 8007a46:	6021      	streq	r1, [r4, #0]
 8007a48:	6054      	str	r4, [r2, #4]
 8007a4a:	e7ca      	b.n	80079e2 <_free_r+0x26>
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bd30      	pop	{r4, r5, pc}
 8007a50:	20004b70 	.word	0x20004b70

08007a54 <sbrk_aligned>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0e      	ldr	r6, [pc, #56]	; (8007a90 <sbrk_aligned+0x3c>)
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6831      	ldr	r1, [r6, #0]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	b911      	cbnz	r1, 8007a66 <sbrk_aligned+0x12>
 8007a60:	f000 f8bc 	bl	8007bdc <_sbrk_r>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f8b7 	bl	8007bdc <_sbrk_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d00a      	beq.n	8007a88 <sbrk_aligned+0x34>
 8007a72:	1cc4      	adds	r4, r0, #3
 8007a74:	f024 0403 	bic.w	r4, r4, #3
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d007      	beq.n	8007a8c <sbrk_aligned+0x38>
 8007a7c:	1a21      	subs	r1, r4, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 f8ac 	bl	8007bdc <_sbrk_r>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d101      	bne.n	8007a8c <sbrk_aligned+0x38>
 8007a88:	f04f 34ff 	mov.w	r4, #4294967295
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	20004b74 	.word	0x20004b74

08007a94 <_malloc_r>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	1ccd      	adds	r5, r1, #3
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	db01      	blt.n	8007ab0 <_malloc_r+0x1c>
 8007aac:	42a9      	cmp	r1, r5
 8007aae:	d905      	bls.n	8007abc <_malloc_r+0x28>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	4e2e      	ldr	r6, [pc, #184]	; (8007b78 <_malloc_r+0xe4>)
 8007abe:	f000 f89d 	bl	8007bfc <__malloc_lock>
 8007ac2:	6833      	ldr	r3, [r6, #0]
 8007ac4:	461c      	mov	r4, r3
 8007ac6:	bb34      	cbnz	r4, 8007b16 <_malloc_r+0x82>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7ff ffc2 	bl	8007a54 <sbrk_aligned>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	d14d      	bne.n	8007b72 <_malloc_r+0xde>
 8007ad6:	6834      	ldr	r4, [r6, #0]
 8007ad8:	4626      	mov	r6, r4
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	d140      	bne.n	8007b60 <_malloc_r+0xcc>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	eb04 0803 	add.w	r8, r4, r3
 8007ae8:	f000 f878 	bl	8007bdc <_sbrk_r>
 8007aec:	4580      	cmp	r8, r0
 8007aee:	d13a      	bne.n	8007b66 <_malloc_r+0xd2>
 8007af0:	6821      	ldr	r1, [r4, #0]
 8007af2:	3503      	adds	r5, #3
 8007af4:	1a6d      	subs	r5, r5, r1
 8007af6:	f025 0503 	bic.w	r5, r5, #3
 8007afa:	3508      	adds	r5, #8
 8007afc:	2d0c      	cmp	r5, #12
 8007afe:	bf38      	it	cc
 8007b00:	250c      	movcc	r5, #12
 8007b02:	4629      	mov	r1, r5
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff ffa5 	bl	8007a54 <sbrk_aligned>
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d02b      	beq.n	8007b66 <_malloc_r+0xd2>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	442b      	add	r3, r5
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e00e      	b.n	8007b34 <_malloc_r+0xa0>
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	1b52      	subs	r2, r2, r5
 8007b1a:	d41e      	bmi.n	8007b5a <_malloc_r+0xc6>
 8007b1c:	2a0b      	cmp	r2, #11
 8007b1e:	d916      	bls.n	8007b4e <_malloc_r+0xba>
 8007b20:	1961      	adds	r1, r4, r5
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	6025      	str	r5, [r4, #0]
 8007b26:	bf18      	it	ne
 8007b28:	6059      	strne	r1, [r3, #4]
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	bf08      	it	eq
 8007b2e:	6031      	streq	r1, [r6, #0]
 8007b30:	5162      	str	r2, [r4, r5]
 8007b32:	604b      	str	r3, [r1, #4]
 8007b34:	4638      	mov	r0, r7
 8007b36:	f104 060b 	add.w	r6, r4, #11
 8007b3a:	f000 f865 	bl	8007c08 <__malloc_unlock>
 8007b3e:	f026 0607 	bic.w	r6, r6, #7
 8007b42:	1d23      	adds	r3, r4, #4
 8007b44:	1af2      	subs	r2, r6, r3
 8007b46:	d0b6      	beq.n	8007ab6 <_malloc_r+0x22>
 8007b48:	1b9b      	subs	r3, r3, r6
 8007b4a:	50a3      	str	r3, [r4, r2]
 8007b4c:	e7b3      	b.n	8007ab6 <_malloc_r+0x22>
 8007b4e:	6862      	ldr	r2, [r4, #4]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	bf0c      	ite	eq
 8007b54:	6032      	streq	r2, [r6, #0]
 8007b56:	605a      	strne	r2, [r3, #4]
 8007b58:	e7ec      	b.n	8007b34 <_malloc_r+0xa0>
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	6864      	ldr	r4, [r4, #4]
 8007b5e:	e7b2      	b.n	8007ac6 <_malloc_r+0x32>
 8007b60:	4634      	mov	r4, r6
 8007b62:	6876      	ldr	r6, [r6, #4]
 8007b64:	e7b9      	b.n	8007ada <_malloc_r+0x46>
 8007b66:	230c      	movs	r3, #12
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f000 f84c 	bl	8007c08 <__malloc_unlock>
 8007b70:	e7a1      	b.n	8007ab6 <_malloc_r+0x22>
 8007b72:	6025      	str	r5, [r4, #0]
 8007b74:	e7de      	b.n	8007b34 <_malloc_r+0xa0>
 8007b76:	bf00      	nop
 8007b78:	20004b70 	.word	0x20004b70

08007b7c <_realloc_r>:
 8007b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	4680      	mov	r8, r0
 8007b82:	4614      	mov	r4, r2
 8007b84:	460e      	mov	r6, r1
 8007b86:	b921      	cbnz	r1, 8007b92 <_realloc_r+0x16>
 8007b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	f7ff bf81 	b.w	8007a94 <_malloc_r>
 8007b92:	b92a      	cbnz	r2, 8007ba0 <_realloc_r+0x24>
 8007b94:	f7ff ff12 	bl	80079bc <_free_r>
 8007b98:	4625      	mov	r5, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba0:	f000 f838 	bl	8007c14 <_malloc_usable_size_r>
 8007ba4:	4284      	cmp	r4, r0
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	d802      	bhi.n	8007bb0 <_realloc_r+0x34>
 8007baa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bae:	d812      	bhi.n	8007bd6 <_realloc_r+0x5a>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	f7ff ff6e 	bl	8007a94 <_malloc_r>
 8007bb8:	4605      	mov	r5, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0ed      	beq.n	8007b9a <_realloc_r+0x1e>
 8007bbe:	42bc      	cmp	r4, r7
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	bf28      	it	cs
 8007bc6:	463a      	movcs	r2, r7
 8007bc8:	f7ff fbaa 	bl	8007320 <memcpy>
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fef4 	bl	80079bc <_free_r>
 8007bd4:	e7e1      	b.n	8007b9a <_realloc_r+0x1e>
 8007bd6:	4635      	mov	r5, r6
 8007bd8:	e7df      	b.n	8007b9a <_realloc_r+0x1e>
	...

08007bdc <_sbrk_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_sbrk_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7fa f8b2 	bl	8001d50 <_sbrk>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_sbrk_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_sbrk_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20004b78 	.word	0x20004b78

08007bfc <__malloc_lock>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	; (8007c04 <__malloc_lock+0x8>)
 8007bfe:	f000 b811 	b.w	8007c24 <__retarget_lock_acquire_recursive>
 8007c02:	bf00      	nop
 8007c04:	20004b7c 	.word	0x20004b7c

08007c08 <__malloc_unlock>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__malloc_unlock+0x8>)
 8007c0a:	f000 b80c 	b.w	8007c26 <__retarget_lock_release_recursive>
 8007c0e:	bf00      	nop
 8007c10:	20004b7c 	.word	0x20004b7c

08007c14 <_malloc_usable_size_r>:
 8007c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c18:	1f18      	subs	r0, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bfbc      	itt	lt
 8007c1e:	580b      	ldrlt	r3, [r1, r0]
 8007c20:	18c0      	addlt	r0, r0, r3
 8007c22:	4770      	bx	lr

08007c24 <__retarget_lock_acquire_recursive>:
 8007c24:	4770      	bx	lr

08007c26 <__retarget_lock_release_recursive>:
 8007c26:	4770      	bx	lr

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
