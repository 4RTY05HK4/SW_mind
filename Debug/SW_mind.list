
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a44  08007a44  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a4c  08007a4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  20000078  08007acc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b80  08007acc  00024b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f73  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2a  00000000  00000000  0003801b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0003ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024edd  00000000  00000000  0003de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001791b  00000000  00000000  00062cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e05ef  00000000  00000000  0007a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ac07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  0015ac58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800767c 	.word	0x0800767c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800767c 	.word	0x0800767c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SPI_Send>:
};

const uint8_t sep[8]={0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00};

void SPI_Send(struct Conf C,uint8_t address, uint8_t D)
{
 80005b4:	b084      	sub	sp, #16
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	f107 0c08 	add.w	ip, r7, #8
 80005be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_SPI_Transmit(&C.hspi, &address, 1, 100);
 80005c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	f107 0008 	add.w	r0, r7, #8
 80005ce:	f002 feee 	bl	80033ae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&C.hspi, &D, 1, 100); //  write data
 80005d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	f107 0008 	add.w	r0, r7, #8
 80005de:	f002 fee6 	bl	80033ae <HAL_SPI_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ea:	b004      	add	sp, #16
 80005ec:	4770      	bx	lr

080005ee <Disp_Init>:

void Disp_Init(struct Conf C,uint8_t brightness)
{ 	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80005ee:	b084      	sub	sp, #16
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af16      	add	r7, sp, #88	; 0x58
 80005f6:	f107 0c08 	add.w	ip, r7, #8
 80005fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80005fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000600:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000604:	2200      	movs	r2, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f846 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0c, 0x00);       //  power down =0，normal mode = 1
 800060c:	2300      	movs	r3, #0
 800060e:	9315      	str	r3, [sp, #84]	; 0x54
 8000610:	230c      	movs	r3, #12
 8000612:	9314      	str	r3, [sp, #80]	; 0x50
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2250      	movs	r2, #80	; 0x50
 800061c:	4619      	mov	r1, r3
 800061e:	f006 fbb7 	bl	8006d90 <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ffc4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800062c:	2300      	movs	r3, #0
 800062e:	9315      	str	r3, [sp, #84]	; 0x54
 8000630:	230c      	movs	r3, #12
 8000632:	9314      	str	r3, [sp, #80]	; 0x50
 8000634:	4668      	mov	r0, sp
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2250      	movs	r2, #80	; 0x50
 800063c:	4619      	mov	r1, r3
 800063e:	f006 fba7 	bl	8006d90 <memcpy>
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	f7ff ffb4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800064c:	2300      	movs	r3, #0
 800064e:	9315      	str	r3, [sp, #84]	; 0x54
 8000650:	230c      	movs	r3, #12
 8000652:	9314      	str	r3, [sp, #80]	; 0x50
 8000654:	4668      	mov	r0, sp
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2250      	movs	r2, #80	; 0x50
 800065c:	4619      	mov	r1, r3
 800065e:	f006 fb97 	bl	8006d90 <memcpy>
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000668:	f7ff ffa4 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x00);
 800066c:	2300      	movs	r3, #0
 800066e:	9315      	str	r3, [sp, #84]	; 0x54
 8000670:	230c      	movs	r3, #12
 8000672:	9314      	str	r3, [sp, #80]	; 0x50
 8000674:	4668      	mov	r0, sp
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2250      	movs	r2, #80	; 0x50
 800067c:	4619      	mov	r1, r3
 800067e:	f006 fb87 	bl	8006d90 <memcpy>
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000688:	f7ff ff94 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 800068c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800068e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000692:	2201      	movs	r2, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f001 ffff 	bl	8002698 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 800069a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800069c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80006a0:	2200      	movs	r2, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fff8 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006a8:	2300      	movs	r3, #0
 80006aa:	9315      	str	r3, [sp, #84]	; 0x54
 80006ac:	230f      	movs	r3, #15
 80006ae:	9314      	str	r3, [sp, #80]	; 0x50
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2250      	movs	r2, #80	; 0x50
 80006b8:	4619      	mov	r1, r3
 80006ba:	f006 fb69 	bl	8006d90 <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c4:	f7ff ff76 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006c8:	2300      	movs	r3, #0
 80006ca:	9315      	str	r3, [sp, #84]	; 0x54
 80006cc:	230f      	movs	r3, #15
 80006ce:	9314      	str	r3, [sp, #80]	; 0x50
 80006d0:	4668      	mov	r0, sp
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2250      	movs	r2, #80	; 0x50
 80006d8:	4619      	mov	r1, r3
 80006da:	f006 fb59 	bl	8006d90 <memcpy>
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e4:	f7ff ff66 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 80006e8:	2300      	movs	r3, #0
 80006ea:	9315      	str	r3, [sp, #84]	; 0x54
 80006ec:	230f      	movs	r3, #15
 80006ee:	9314      	str	r3, [sp, #80]	; 0x50
 80006f0:	4668      	mov	r0, sp
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	4619      	mov	r1, r3
 80006fa:	f006 fb49 	bl	8006d90 <memcpy>
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000704:	f7ff ff56 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0f, 0x00);//  no test display
 8000708:	2300      	movs	r3, #0
 800070a:	9315      	str	r3, [sp, #84]	; 0x54
 800070c:	230f      	movs	r3, #15
 800070e:	9314      	str	r3, [sp, #80]	; 0x50
 8000710:	4668      	mov	r0, sp
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2250      	movs	r2, #80	; 0x50
 8000718:	4619      	mov	r1, r3
 800071a:	f006 fb39 	bl	8006d90 <memcpy>
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000724:	f7ff ff46 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800072a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f001 ffb1 	bl	8002698 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000738:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 ffaa 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000744:	2300      	movs	r3, #0
 8000746:	9315      	str	r3, [sp, #84]	; 0x54
 8000748:	2309      	movs	r3, #9
 800074a:	9314      	str	r3, [sp, #80]	; 0x50
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0318 	add.w	r3, r7, #24
 8000752:	2250      	movs	r2, #80	; 0x50
 8000754:	4619      	mov	r1, r3
 8000756:	f006 fb1b 	bl	8006d90 <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000760:	f7ff ff28 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000764:	2300      	movs	r3, #0
 8000766:	9315      	str	r3, [sp, #84]	; 0x54
 8000768:	2309      	movs	r3, #9
 800076a:	9314      	str	r3, [sp, #80]	; 0x50
 800076c:	4668      	mov	r0, sp
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2250      	movs	r2, #80	; 0x50
 8000774:	4619      	mov	r1, r3
 8000776:	f006 fb0b 	bl	8006d90 <memcpy>
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000780:	f7ff ff18 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 8000784:	2300      	movs	r3, #0
 8000786:	9315      	str	r3, [sp, #84]	; 0x54
 8000788:	2309      	movs	r3, #9
 800078a:	9314      	str	r3, [sp, #80]	; 0x50
 800078c:	4668      	mov	r0, sp
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2250      	movs	r2, #80	; 0x50
 8000794:	4619      	mov	r1, r3
 8000796:	f006 fafb 	bl	8006d90 <memcpy>
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	f7ff ff08 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x09, 0x00);       //  no decoding
 80007a4:	2300      	movs	r3, #0
 80007a6:	9315      	str	r3, [sp, #84]	; 0x54
 80007a8:	2309      	movs	r3, #9
 80007aa:	9314      	str	r3, [sp, #80]	; 0x50
 80007ac:	4668      	mov	r0, sp
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2250      	movs	r2, #80	; 0x50
 80007b4:	4619      	mov	r1, r3
 80007b6:	f006 faeb 	bl	8006d90 <memcpy>
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	f7ff fef8 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 80007c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007c6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80007ca:	2201      	movs	r2, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 ff63 	bl	8002698 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80007d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80007d8:	2200      	movs	r2, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 ff5c 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 80007e0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80007e4:	9315      	str	r3, [sp, #84]	; 0x54
 80007e6:	230a      	movs	r3, #10
 80007e8:	9314      	str	r3, [sp, #80]	; 0x50
 80007ea:	4668      	mov	r0, sp
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	2250      	movs	r2, #80	; 0x50
 80007f2:	4619      	mov	r1, r3
 80007f4:	f006 facc 	bl	8006d90 <memcpy>
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fe:	f7ff fed9 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000802:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000806:	9315      	str	r3, [sp, #84]	; 0x54
 8000808:	230a      	movs	r3, #10
 800080a:	9314      	str	r3, [sp, #80]	; 0x50
 800080c:	4668      	mov	r0, sp
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2250      	movs	r2, #80	; 0x50
 8000814:	4619      	mov	r1, r3
 8000816:	f006 fabb 	bl	8006d90 <memcpy>
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000820:	f7ff fec8 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000824:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000828:	9315      	str	r3, [sp, #84]	; 0x54
 800082a:	230a      	movs	r3, #10
 800082c:	9314      	str	r3, [sp, #80]	; 0x50
 800082e:	4668      	mov	r0, sp
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2250      	movs	r2, #80	; 0x50
 8000836:	4619      	mov	r1, r3
 8000838:	f006 faaa 	bl	8006d90 <memcpy>
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000842:	f7ff feb7 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0a, brightness);       //  brightness intensity
 8000846:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800084a:	9315      	str	r3, [sp, #84]	; 0x54
 800084c:	230a      	movs	r3, #10
 800084e:	9314      	str	r3, [sp, #80]	; 0x50
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2250      	movs	r2, #80	; 0x50
 8000858:	4619      	mov	r1, r3
 800085a:	f006 fa99 	bl	8006d90 <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	f7ff fea6 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800086a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800086e:	2201      	movs	r2, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f001 ff11 	bl	8002698 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000878:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800087c:	2200      	movs	r2, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f001 ff0a 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 8000884:	2307      	movs	r3, #7
 8000886:	9315      	str	r3, [sp, #84]	; 0x54
 8000888:	230b      	movs	r3, #11
 800088a:	9314      	str	r3, [sp, #80]	; 0x50
 800088c:	4668      	mov	r0, sp
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2250      	movs	r2, #80	; 0x50
 8000894:	4619      	mov	r1, r3
 8000896:	f006 fa7b 	bl	8006d90 <memcpy>
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a0:	f7ff fe88 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008a4:	2307      	movs	r3, #7
 80008a6:	9315      	str	r3, [sp, #84]	; 0x54
 80008a8:	230b      	movs	r3, #11
 80008aa:	9314      	str	r3, [sp, #80]	; 0x50
 80008ac:	4668      	mov	r0, sp
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2250      	movs	r2, #80	; 0x50
 80008b4:	4619      	mov	r1, r3
 80008b6:	f006 fa6b 	bl	8006d90 <memcpy>
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c0:	f7ff fe78 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008c4:	2307      	movs	r3, #7
 80008c6:	9315      	str	r3, [sp, #84]	; 0x54
 80008c8:	230b      	movs	r3, #11
 80008ca:	9314      	str	r3, [sp, #80]	; 0x50
 80008cc:	4668      	mov	r0, sp
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2250      	movs	r2, #80	; 0x50
 80008d4:	4619      	mov	r1, r3
 80008d6:	f006 fa5b 	bl	8006d90 <memcpy>
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e0:	f7ff fe68 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0b, 0x07);       //  scan limit = 8 LEDs
 80008e4:	2307      	movs	r3, #7
 80008e6:	9315      	str	r3, [sp, #84]	; 0x54
 80008e8:	230b      	movs	r3, #11
 80008ea:	9314      	str	r3, [sp, #80]	; 0x50
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2250      	movs	r2, #80	; 0x50
 80008f4:	4619      	mov	r1, r3
 80008f6:	f006 fa4b 	bl	8006d90 <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	f7ff fe58 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000906:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fec3 	bl	8002698 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000914:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 febc 	bl	8002698 <HAL_GPIO_WritePin>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000920:	2301      	movs	r3, #1
 8000922:	9315      	str	r3, [sp, #84]	; 0x54
 8000924:	230c      	movs	r3, #12
 8000926:	9314      	str	r3, [sp, #80]	; 0x50
 8000928:	4668      	mov	r0, sp
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	2250      	movs	r2, #80	; 0x50
 8000930:	4619      	mov	r1, r3
 8000932:	f006 fa2d 	bl	8006d90 <memcpy>
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093c:	f7ff fe3a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000940:	2301      	movs	r3, #1
 8000942:	9315      	str	r3, [sp, #84]	; 0x54
 8000944:	230c      	movs	r3, #12
 8000946:	9314      	str	r3, [sp, #80]	; 0x50
 8000948:	4668      	mov	r0, sp
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	2250      	movs	r2, #80	; 0x50
 8000950:	4619      	mov	r1, r3
 8000952:	f006 fa1d 	bl	8006d90 <memcpy>
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	f7ff fe2a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000960:	2301      	movs	r3, #1
 8000962:	9315      	str	r3, [sp, #84]	; 0x54
 8000964:	230c      	movs	r3, #12
 8000966:	9314      	str	r3, [sp, #80]	; 0x50
 8000968:	4668      	mov	r0, sp
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2250      	movs	r2, #80	; 0x50
 8000970:	4619      	mov	r1, r3
 8000972:	f006 fa0d 	bl	8006d90 <memcpy>
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097c:	f7ff fe1a 	bl	80005b4 <SPI_Send>
	SPI_Send(C,0x0c, 0x01);       //  power down =0，normal mode = 1
 8000980:	2301      	movs	r3, #1
 8000982:	9315      	str	r3, [sp, #84]	; 0x54
 8000984:	230c      	movs	r3, #12
 8000986:	9314      	str	r3, [sp, #80]	; 0x50
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2250      	movs	r2, #80	; 0x50
 8000990:	4619      	mov	r1, r3
 8000992:	f006 f9fd 	bl	8006d90 <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099c:	f7ff fe0a 	bl	80005b4 <SPI_Send>
	HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 80009a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009a2:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80009a6:	2201      	movs	r2, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fe75 	bl	8002698 <HAL_GPIO_WritePin>


}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b6:	b004      	add	sp, #16
 80009b8:	4770      	bx	lr

080009ba <Disp_Write>:

void Disp_Write(struct Conf C,uint8_t address, uint8_t *D) /**Write  col on all display*/
{
 80009ba:	b084      	sub	sp, #16
 80009bc:	b580      	push	{r7, lr}
 80009be:	b098      	sub	sp, #96	; 0x60
 80009c0:	af16      	add	r7, sp, #88	; 0x58
 80009c2:	f107 0c10 	add.w	ip, r7, #16
 80009c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 80009ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009cc:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 80009d0:	2200      	movs	r2, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fe60 	bl	8002698 <HAL_GPIO_WritePin>
	for (uint8_t j=0;j<4;j++)
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	e016      	b.n	8000a0c <Disp_Write+0x52>
	{
		SPI_Send(C,address,D[j]);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	9315      	str	r3, [sp, #84]	; 0x54
 80009e8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80009ec:	9314      	str	r3, [sp, #80]	; 0x50
 80009ee:	4668      	mov	r0, sp
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	2250      	movs	r2, #80	; 0x50
 80009f6:	4619      	mov	r1, r3
 80009f8:	f006 f9ca 	bl	8006d90 <memcpy>
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a02:	f7ff fdd7 	bl	80005b4 <SPI_Send>
	for (uint8_t j=0;j<4;j++)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d9e5      	bls.n	80009de <Disp_Write+0x24>
	}
HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);  // pull the CS HIGH
 8000a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a14:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fe3c 	bl	8002698 <HAL_GPIO_WritePin>

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a2a:	b004      	add	sp, #16
 8000a2c:	4770      	bx	lr

08000a2e <Disp_Clear>:

void Disp_Clear(struct Conf C)	/**Clear  Displays*/
{
 8000a2e:	b084      	sub	sp, #16
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b098      	sub	sp, #96	; 0x60
 8000a34:	af16      	add	r7, sp, #88	; 0x58
 8000a36:	f107 0c10 	add.w	ip, r7, #16
 8000a3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i=1;i<=8;i++)
 8000a3e:	2301      	movs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e054      	b.n	8000aee <Disp_Clear+0xc0>
			{
			HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_RESET);
 8000a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a46:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fe23 	bl	8002698 <HAL_GPIO_WritePin>
			SPI_Send(C,i,0x00);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	9215      	str	r2, [sp, #84]	; 0x54
 8000a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8000a5c:	4668      	mov	r0, sp
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2250      	movs	r2, #80	; 0x50
 8000a64:	4619      	mov	r1, r3
 8000a66:	f006 f993 	bl	8006d90 <memcpy>
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a70:	f7ff fda0 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	9215      	str	r2, [sp, #84]	; 0x54
 8000a7c:	9314      	str	r3, [sp, #80]	; 0x50
 8000a7e:	4668      	mov	r0, sp
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	4619      	mov	r1, r3
 8000a88:	f006 f982 	bl	8006d90 <memcpy>
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	f7ff fd8f 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	9215      	str	r2, [sp, #84]	; 0x54
 8000a9e:	9314      	str	r3, [sp, #80]	; 0x50
 8000aa0:	4668      	mov	r0, sp
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2250      	movs	r2, #80	; 0x50
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f006 f971 	bl	8006d90 <memcpy>
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab4:	f7ff fd7e 	bl	80005b4 <SPI_Send>
			SPI_Send(C,i,0x00);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	9215      	str	r2, [sp, #84]	; 0x54
 8000ac0:	9314      	str	r3, [sp, #80]	; 0x50
 8000ac2:	4668      	mov	r0, sp
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	2250      	movs	r2, #80	; 0x50
 8000aca:	4619      	mov	r1, r3
 8000acc:	f006 f960 	bl	8006d90 <memcpy>
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad6:	f7ff fd6d 	bl	80005b4 <SPI_Send>
			HAL_GPIO_WritePin(C.GPIOx, C.GPIO_Pin, GPIO_PIN_SET);
 8000ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000adc:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fdd8 	bl	8002698 <HAL_GPIO_WritePin>
	for(int i=1;i<=8;i++)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	dda7      	ble.n	8000a44 <Disp_Clear+0x16>
			}

}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <Disp_Write_Word>:

void Disp_Write_Word(struct Conf C, char *D, uint8_t size)
{
 8000b04:	b084      	sub	sp, #16
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b098      	sub	sp, #96	; 0x60
 8000b0a:	af16      	add	r7, sp, #88	; 0x58
 8000b0c:	f107 0c10 	add.w	ip, r7, #16
 8000b10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data[4];
	for (uint8_t i=0;i<8;i++)//przepisanie danych z pamięci na poszczególne wartości liczbowe do wyświetlenia
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	e03b      	b.n	8000b92 <Disp_Write_Word+0x8e>
		{
			for (uint8_t j=0;j<4;j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	e020      	b.n	8000b62 <Disp_Write_Word+0x5e>
			{
				data[j] = (digits[D[j]-32][i]);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f1a3 0120 	sub.w	r1, r3, #32
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <Disp_Write_Word+0xa4>)
 8000b32:	00c9      	lsls	r1, r1, #3
 8000b34:	4401      	add	r1, r0
 8000b36:	440a      	add	r2, r1
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	443b      	add	r3, r7
 8000b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
				if(j>size-1) data[j] = (digits[0][i]);
 8000b42:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d807      	bhi.n	8000b5c <Disp_Write_Word+0x58>
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <Disp_Write_Word+0xa4>)
 8000b52:	5c8a      	ldrb	r2, [r1, r2]
 8000b54:	3308      	adds	r3, #8
 8000b56:	443b      	add	r3, r7
 8000b58:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (uint8_t j=0;j<4;j++)
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	71bb      	strb	r3, [r7, #6]
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d9db      	bls.n	8000b20 <Disp_Write_Word+0x1c>
			}

			Disp_Write(C,i+1,data);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	463a      	mov	r2, r7
 8000b70:	9215      	str	r2, [sp, #84]	; 0x54
 8000b72:	9314      	str	r3, [sp, #80]	; 0x50
 8000b74:	4668      	mov	r0, sp
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2250      	movs	r2, #80	; 0x50
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f006 f907 	bl	8006d90 <memcpy>
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b88:	f7ff ff17 	bl	80009ba <Disp_Write>
	for (uint8_t i=0;i<8;i++)//przepisanie danych z pamięci na poszczególne wartości liczbowe do wyświetlenia
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d9c0      	bls.n	8000b1a <Disp_Write_Word+0x16>
		}
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr
 8000ba8:	08007708 	.word	0x08007708

08000bac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <MX_ADC1_Init+0xa0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_ADC1_Init+0xa4>)
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000c10:	f000 ff5e 	bl	8001ad0 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c1a:	f000 fd2f 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000c30:	f001 f872 	bl	8001d18 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c3a:	f000 fd1f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000094 	.word	0x20000094
 8000c4c:	40012000 	.word	0x40012000
 8000c50:	0f000001 	.word	0x0f000001

08000c54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_ADC_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d127      	bne.n	8000cc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000cc2:	f001 fb3d 	bl	8002340 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3a      	ldr	r2, [pc, #232]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_GPIO_Init+0x108>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d72:	2200      	movs	r2, #0
 8000d74:	f24e 0142 	movw	r1, #57410	; 0xe042
 8000d78:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x10c>)
 8000d7a:	f001 fc8d 	bl	8002698 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <MX_GPIO_Init+0x110>)
 8000d96:	f001 fad3 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d9a:	f24e 0342 	movw	r3, #57410	; 0xe042
 8000d9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x10c>)
 8000db4:	f001 fac4 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000db8:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <MX_GPIO_Init+0x10c>)
 8000dce:	f001 fab7 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_GPIO_Init+0x114>)
 8000de8:	f001 faaa 	bl	8002340 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000

08000e04 <scanRows>:

volatile uint8_t wyj = 0b00000001;
volatile uint32_t counter = 0;
volatile uint8_t wej = 0;

uint8_t scanRows(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

	if(wej == 0)
 8000e08:	4b5b      	ldr	r3, [pc, #364]	; (8000f78 <scanRows+0x174>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11c      	bne.n	8000e4c <scanRows+0x48>
	{
	        if(counter == 10000)
 8000e12:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <scanRows+0x178>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d111      	bne.n	8000e42 <scanRows+0x3e>
	        {
	            counter = 0;
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <scanRows+0x178>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
	            wyj = wyj * 2;
 8000e24:	4b56      	ldr	r3, [pc, #344]	; (8000f80 <scanRows+0x17c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <scanRows+0x17c>)
 8000e30:	701a      	strb	r2, [r3, #0]
	            if(wyj > 8)
 8000e32:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <scanRows+0x17c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d902      	bls.n	8000e42 <scanRows+0x3e>
	            {
	                wyj = 1;
 8000e3c:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <scanRows+0x17c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
	            }
	        }
	        counter = counter + 1;
 8000e42:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <scanRows+0x178>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <scanRows+0x178>)
 8000e4a:	6013      	str	r3, [r2, #0]
	}

	switch(wyj) {
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <scanRows+0x17c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3b01      	subs	r3, #1
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d873      	bhi.n	8000f40 <scanRows+0x13c>
 8000e58:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <scanRows+0x5c>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e81 	.word	0x08000e81
 8000e64:	08000eb1 	.word	0x08000eb1
 8000e68:	08000f41 	.word	0x08000f41
 8000e6c:	08000ee1 	.word	0x08000ee1
 8000e70:	08000f41 	.word	0x08000f41
 8000e74:	08000f41 	.word	0x08000f41
 8000e78:	08000f41 	.word	0x08000f41
 8000e7c:	08000f11 	.word	0x08000f11
	  case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2102      	movs	r1, #2
 8000e84:	483f      	ldr	r0, [pc, #252]	; (8000f84 <scanRows+0x180>)
 8000e86:	f001 fc07 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	483c      	ldr	r0, [pc, #240]	; (8000f84 <scanRows+0x180>)
 8000e92:	f001 fc01 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	4839      	ldr	r0, [pc, #228]	; (8000f84 <scanRows+0x180>)
 8000e9e:	f001 fbfb 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	4836      	ldr	r0, [pc, #216]	; (8000f84 <scanRows+0x180>)
 8000eaa:	f001 fbf5 	bl	8002698 <HAL_GPIO_WritePin>
	    break;
 8000eae:	e05e      	b.n	8000f6e <scanRows+0x16a>
	  case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4833      	ldr	r0, [pc, #204]	; (8000f84 <scanRows+0x180>)
 8000eb6:	f001 fbef 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec0:	4830      	ldr	r0, [pc, #192]	; (8000f84 <scanRows+0x180>)
 8000ec2:	f001 fbe9 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ecc:	482d      	ldr	r0, [pc, #180]	; (8000f84 <scanRows+0x180>)
 8000ece:	f001 fbe3 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	482a      	ldr	r0, [pc, #168]	; (8000f84 <scanRows+0x180>)
 8000eda:	f001 fbdd 	bl	8002698 <HAL_GPIO_WritePin>
	    break;
 8000ede:	e046      	b.n	8000f6e <scanRows+0x16a>
	  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4827      	ldr	r0, [pc, #156]	; (8000f84 <scanRows+0x180>)
 8000ee6:	f001 fbd7 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	4824      	ldr	r0, [pc, #144]	; (8000f84 <scanRows+0x180>)
 8000ef2:	f001 fbd1 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <scanRows+0x180>)
 8000efe:	f001 fbcb 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	481e      	ldr	r0, [pc, #120]	; (8000f84 <scanRows+0x180>)
 8000f0a:	f001 fbc5 	bl	8002698 <HAL_GPIO_WritePin>
	    break;
 8000f0e:	e02e      	b.n	8000f6e <scanRows+0x16a>
	  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	481b      	ldr	r0, [pc, #108]	; (8000f84 <scanRows+0x180>)
 8000f16:	f001 fbbf 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <scanRows+0x180>)
 8000f22:	f001 fbb9 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2c:	4815      	ldr	r0, [pc, #84]	; (8000f84 <scanRows+0x180>)
 8000f2e:	f001 fbb3 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <scanRows+0x180>)
 8000f3a:	f001 fbad 	bl	8002698 <HAL_GPIO_WritePin>
	    break;
 8000f3e:	e016      	b.n	8000f6e <scanRows+0x16a>

	  default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2102      	movs	r1, #2
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <scanRows+0x180>)
 8000f46:	f001 fba7 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <scanRows+0x180>)
 8000f52:	f001 fba1 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <scanRows+0x180>)
 8000f5e:	f001 fb9b 	bl	8002698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <scanRows+0x180>)
 8000f6a:	f001 fb95 	bl	8002698 <HAL_GPIO_WritePin>
	}
	return wyj;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <scanRows+0x17c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000e0 	.word	0x200000e0
 8000f7c:	200000dc 	.word	0x200000dc
 8000f80:	20000000 	.word	0x20000000
 8000f84:	40020400 	.word	0x40020400

08000f88 <readCols>:

uint8_t readCols(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	481c      	ldr	r0, [pc, #112]	; (8001000 <readCols+0x78>)
 8000f90:	f001 fb6a 	bl	8002668 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <readCols+0x1c>
		wej = 1;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <readCols+0x7c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
		return 0b0001;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e02a      	b.n	8000ffa <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4815      	ldr	r0, [pc, #84]	; (8001000 <readCols+0x78>)
 8000faa:	f001 fb5d 	bl	8002668 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <readCols+0x36>
		wej = 2;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <readCols+0x7c>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	701a      	strb	r2, [r3, #0]
		return 0b0010;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e01d      	b.n	8000ffa <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8000fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <readCols+0x80>)
 8000fc4:	f001 fb50 	bl	8002668 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <readCols+0x50>
		wej = 4;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <readCols+0x7c>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	701a      	strb	r2, [r3, #0]
		return 0b0100;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e010      	b.n	8000ffa <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <readCols+0x80>)
 8000fde:	f001 fb43 	bl	8002668 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <readCols+0x6a>
		wej = 8;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <readCols+0x7c>)
 8000fea:	2208      	movs	r2, #8
 8000fec:	701a      	strb	r2, [r3, #0]
		return 0b1000;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	e003      	b.n	8000ffa <readCols+0x72>
	}
	wej = 0;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <readCols+0x7c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020400 	.word	0x40020400
 8001004:	200000e0 	.word	0x200000e0
 8001008:	40020000 	.word	0x40020000

0800100c <decode>:

uint8_t decode(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	scanRows();
 8001012:	f7ff fef7 	bl	8000e04 <scanRows>
	uint8_t cols = readCols();
 8001016:	f7ff ffb7 	bl	8000f88 <readCols>
 800101a:	4603      	mov	r3, r0
 800101c:	717b      	strb	r3, [r7, #5]
	uint8_t rows = wyj;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <decode+0xd4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	713b      	strb	r3, [r7, #4]
	uint8_t rejMS = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
	uint8_t rejLS = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	71bb      	strb	r3, [r7, #6]

	if(cols != 0)
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d051      	beq.n	80010d6 <decode+0xca>
	{
	        switch(rows){
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	2b07      	cmp	r3, #7
 8001038:	d81e      	bhi.n	8001078 <decode+0x6c>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <decode+0x34>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001061 	.word	0x08001061
 8001044:	08001067 	.word	0x08001067
 8001048:	08001079 	.word	0x08001079
 800104c:	0800106d 	.word	0x0800106d
 8001050:	08001079 	.word	0x08001079
 8001054:	08001079 	.word	0x08001079
 8001058:	08001079 	.word	0x08001079
 800105c:	08001073 	.word	0x08001073
				case 1 :
					rejMS = 0b0000;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
					break;
 8001064:	e00a      	b.n	800107c <decode+0x70>
				case 2 :
					rejMS = 0b0100;
 8001066:	2304      	movs	r3, #4
 8001068:	71fb      	strb	r3, [r7, #7]
					break;
 800106a:	e007      	b.n	800107c <decode+0x70>
				case 4 :
					rejMS = 0b1000;
 800106c:	2308      	movs	r3, #8
 800106e:	71fb      	strb	r3, [r7, #7]
					break;
 8001070:	e004      	b.n	800107c <decode+0x70>
				case 8 :
					rejMS = 0b1100;
 8001072:	230c      	movs	r3, #12
 8001074:	71fb      	strb	r3, [r7, #7]
					break;
 8001076:	e001      	b.n	800107c <decode+0x70>
				default: rejMS = 0b00;
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
	        }

	        switch(cols){
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	3b01      	subs	r3, #1
 8001080:	2b07      	cmp	r3, #7
 8001082:	d81f      	bhi.n	80010c4 <decode+0xb8>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <decode+0x80>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010ad 	.word	0x080010ad
 8001090:	080010b3 	.word	0x080010b3
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010b9 	.word	0x080010b9
 800109c:	080010c5 	.word	0x080010c5
 80010a0:	080010c5 	.word	0x080010c5
 80010a4:	080010c5 	.word	0x080010c5
 80010a8:	080010bf 	.word	0x080010bf
				case 1 :
					rejLS = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71bb      	strb	r3, [r7, #6]
					break;
 80010b0:	e00a      	b.n	80010c8 <decode+0xbc>
				case 2 :
					rejLS = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71bb      	strb	r3, [r7, #6]
					break;
 80010b6:	e007      	b.n	80010c8 <decode+0xbc>
				case 4 :
					rejLS = 0b10;
 80010b8:	2302      	movs	r3, #2
 80010ba:	71bb      	strb	r3, [r7, #6]
					break;
 80010bc:	e004      	b.n	80010c8 <decode+0xbc>
				case 8 :
					rejLS = 0b11;
 80010be:	2303      	movs	r3, #3
 80010c0:	71bb      	strb	r3, [r7, #6]
					break;
 80010c2:	e001      	b.n	80010c8 <decode+0xbc>
				default: rejLS = 0b00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
	        }
		return rejMS + rejLS + 1;
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	e000      	b.n	80010d8 <decode+0xcc>
	}

	return 0;
 80010d6:	2300      	movs	r3, #0

}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000000 	.word	0x20000000

080010e4 <KeyLOGIC>:
/* USER CODE BEGIN 0 */



void KeyLOGIC( void * pvParameters )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t keycode = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
	uint16_t counter = 10000;
 80010f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80010f4:	82fb      	strh	r3, [r7, #22]
	uint8_t flag = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	757b      	strb	r3, [r7, #21]
	char *code = '0';
 80010fa:	2330      	movs	r3, #48	; 0x30
 80010fc:	613b      	str	r3, [r7, #16]
	{
		//if( readKeypadSemaphore != NULL )
		//{


					keycode = decode();
 80010fe:	f7ff ff85 	bl	800100c <decode>
 8001102:	4603      	mov	r3, r0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73fb      	strb	r3, [r7, #15]

					if (keycode > 0 && keycode < 11 && flag != 0)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01d      	beq.n	800114a <KeyLOGIC+0x66>
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b0a      	cmp	r3, #10
 8001112:	d81a      	bhi.n	800114a <KeyLOGIC+0x66>
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d017      	beq.n	800114a <KeyLOGIC+0x66>
					{
						--keycode;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	3b01      	subs	r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	73fb      	strb	r3, [r7, #15]
						if( xSemaphoreTake( readKeypadSemaphore, ( TickType_t ) 10 ) == pdTRUE )
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <KeyLOGIC+0x8c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	210a      	movs	r1, #10
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fc27 	bl	800497c <xQueueSemaphoreTake>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <KeyLOGIC+0x60>
						{
							if(xQueueSendToBack(keypadQueue, (void*)&keycode, (TickType_t)10) == pdPASS)
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <KeyLOGIC+0x90>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f107 010f 	add.w	r1, r7, #15
 800113c:	2300      	movs	r3, #0
 800113e:	220a      	movs	r2, #10
 8001140:	f003 f9a2 	bl	8004488 <xQueueGenericSend>
								//sprintf(&code, "%01d", keycode);
								//HAL_UART_Transmit(&huart2, &code, 2, 10);
								//xSemaphoreGive( keyPressedSemaphore );
							}
						}
					flag = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	757b      	strb	r3, [r7, #21]
 8001148:	e010      	b.n	800116c <KeyLOGIC+0x88>
					}
					else if(!keycode && !flag)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1d6      	bne.n	80010fe <KeyLOGIC+0x1a>
 8001150:	7d7b      	ldrb	r3, [r7, #21]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1d3      	bne.n	80010fe <KeyLOGIC+0x1a>
					{
						if(!counter)
 8001156:	8afb      	ldrh	r3, [r7, #22]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d104      	bne.n	8001166 <KeyLOGIC+0x82>
						{
							counter = 10000;
 800115c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001160:	82fb      	strh	r3, [r7, #22]
							flag = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	757b      	strb	r3, [r7, #21]
						}
					counter--;
 8001166:	8afb      	ldrh	r3, [r7, #22]
 8001168:	3b01      	subs	r3, #1
 800116a:	82fb      	strh	r3, [r7, #22]
	{
 800116c:	e7c7      	b.n	80010fe <KeyLOGIC+0x1a>
 800116e:	bf00      	nop
 8001170:	2000014c 	.word	0x2000014c
 8001174:	20000144 	.word	0x20000144

08001178 <DispLOGIC>:

}


void DispLOGIC( void * pvParameters )
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b09f      	sub	sp, #124	; 0x7c
 800117c:	af16      	add	r7, sp, #88	; 0x58
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t digits[10] = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	809a      	strh	r2, [r3, #4]
	uint8_t buffer = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	74fb      	strb	r3, [r7, #19]
	char *code =  '0';
 8001192:	2330      	movs	r3, #48	; 0x30
 8001194:	60fb      	str	r3, [r7, #12]
	uint8_t counter = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
	   if(dispQueue != NULL)
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <DispLOGIC+0xdc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0fb      	beq.n	800119a <DispLOGIC+0x22>
	   {
		  //digits[counter] = 0;
	      if(xQueueReceive(dispQueue, &(buffer), (TickType_t)10) == pdPASS )
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <DispLOGIC+0xdc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f107 0113 	add.w	r1, r7, #19
 80011aa:	220a      	movs	r2, #10
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fb05 	bl	80047bc <xQueueReceive>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1f0      	bne.n	800119a <DispLOGIC+0x22>
	      {
	    	  	digits[counter] = buffer;
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	7cfa      	ldrb	r2, [r7, #19]
 80011bc:	3320      	adds	r3, #32
 80011be:	443b      	add	r3, r7
 80011c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
				sprintf(&code, "%1d%1d%1d%1d", digits[counter], digits[counter-1], digits[counter-2], digits[counter-3]);
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	3320      	adds	r3, #32
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011ce:	4619      	mov	r1, r3
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	3320      	adds	r3, #32
 80011d6:	443b      	add	r3, r7
 80011d8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011dc:	461c      	mov	r4, r3
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	3b02      	subs	r3, #2
 80011e2:	3320      	adds	r3, #32
 80011e4:	443b      	add	r3, r7
 80011e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011ea:	461a      	mov	r2, r3
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	3b03      	subs	r3, #3
 80011f0:	3320      	adds	r3, #32
 80011f2:	443b      	add	r3, r7
 80011f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011f8:	f107 000c 	add.w	r0, r7, #12
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	4623      	mov	r3, r4
 8001202:	460a      	mov	r2, r1
 8001204:	4914      	ldr	r1, [pc, #80]	; (8001258 <DispLOGIC+0xe0>)
 8001206:	f005 fdd9 	bl	8006dbc <siprintf>
				HAL_UART_Transmit(&huart2, &code, 4, 10);
 800120a:	f107 010c 	add.w	r1, r7, #12
 800120e:	230a      	movs	r3, #10
 8001210:	2204      	movs	r2, #4
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <DispLOGIC+0xe4>)
 8001214:	f002 fb1f 	bl	8003856 <HAL_UART_Transmit>
				Disp_Write_Word(Conf1, &code, counter+1);
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3301      	adds	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4c10      	ldr	r4, [pc, #64]	; (8001260 <DispLOGIC+0xe8>)
 8001220:	9315      	str	r3, [sp, #84]	; 0x54
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	9314      	str	r3, [sp, #80]	; 0x50
 8001228:	4668      	mov	r0, sp
 800122a:	f104 0310 	add.w	r3, r4, #16
 800122e:	2250      	movs	r2, #80	; 0x50
 8001230:	4619      	mov	r1, r3
 8001232:	f005 fdad 	bl	8006d90 <memcpy>
 8001236:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800123a:	f7ff fc63 	bl	8000b04 <Disp_Write_Word>
				//code = ' ';
				if(counter < 9) counter++;
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d803      	bhi.n	800124c <DispLOGIC+0xd4>
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	3301      	adds	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
 800124a:	e7a6      	b.n	800119a <DispLOGIC+0x22>
				else counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
	   if(dispQueue != NULL)
 8001250:	e7a3      	b.n	800119a <DispLOGIC+0x22>
 8001252:	bf00      	nop
 8001254:	20000148 	.word	0x20000148
 8001258:	08007694 	.word	0x08007694
 800125c:	200001d8 	.word	0x200001d8
 8001260:	200000e4 	.word	0x200000e4

08001264 <generateRandArray>:
	   }
	}
}

int * generateRandArray()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	char *code = '0';
 800126a:	2330      	movs	r3, #48	; 0x30
 800126c:	603b      	str	r3, [r7, #0]
	static int tab[10];
	int i = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, "generate", 8, 10);
 8001272:	230a      	movs	r3, #10
 8001274:	2208      	movs	r2, #8
 8001276:	491b      	ldr	r1, [pc, #108]	; (80012e4 <generateRandArray+0x80>)
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <generateRandArray+0x84>)
 800127a:	f002 faec 	bl	8003856 <HAL_UART_Transmit>
	for(i=0; i<10;i++){
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	e026      	b.n	80012d2 <generateRandArray+0x6e>
		HAL_ADC_Start(&hadc1);
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <generateRandArray+0x88>)
 8001286:	f000 fc67 	bl	8001b58 <HAL_ADC_Start>
		tab[i] = HAL_ADC_GetValue(&hadc1)%10;
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <generateRandArray+0x88>)
 800128c:	f000 fd36 	bl	8001cfc <HAL_ADC_GetValue>
 8001290:	4601      	mov	r1, r0
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <generateRandArray+0x8c>)
 8001294:	fba3 2301 	umull	r2, r3, r3, r1
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	1aca      	subs	r2, r1, r3
 80012a4:	4611      	mov	r1, r2
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <generateRandArray+0x90>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sprintf(&code, "%1d", tab[i]);
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <generateRandArray+0x90>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b6:	463b      	mov	r3, r7
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <generateRandArray+0x94>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fd7e 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2, &code, 1, 10);
 80012c0:	4639      	mov	r1, r7
 80012c2:	230a      	movs	r3, #10
 80012c4:	2201      	movs	r2, #1
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <generateRandArray+0x84>)
 80012c8:	f002 fac5 	bl	8003856 <HAL_UART_Transmit>
	for(i=0; i<10;i++){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	ddd5      	ble.n	8001284 <generateRandArray+0x20>
	}
	return tab;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <generateRandArray+0x90>)
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	080076a4 	.word	0x080076a4
 80012e8:	200001d8 	.word	0x200001d8
 80012ec:	20000094 	.word	0x20000094
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	20000154 	.word	0x20000154
 80012f8:	080076b0 	.word	0x080076b0

080012fc <mainLOGIC>:

void mainLOGIC( void * pvParameters )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	uint8_t buffer = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	77fb      	strb	r3, [r7, #31]
	char *code = '0';
 8001308:	2330      	movs	r3, #48	; 0x30
 800130a:	61bb      	str	r3, [r7, #24]
	uint8_t randomlyGeneratedArray[10];
	int *pointerTorandomlyGeneratedArray;
	pointerTorandomlyGeneratedArray = generateRandArray();
 800130c:	f7ff ffaa 	bl	8001264 <generateRandArray>
 8001310:	6238      	str	r0, [r7, #32]
	int i = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(&huart2, "copied", 6, 10);
 8001316:	230a      	movs	r3, #10
 8001318:	2206      	movs	r2, #6
 800131a:	493c      	ldr	r1, [pc, #240]	; (800140c <mainLOGIC+0x110>)
 800131c:	483c      	ldr	r0, [pc, #240]	; (8001410 <mainLOGIC+0x114>)
 800131e:	f002 fa9a 	bl	8003856 <HAL_UART_Transmit>
	for ( i = 0; i < 10; i++ ) {
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	e021      	b.n	800136c <mainLOGIC+0x70>
		randomlyGeneratedArray[i] = *(pointerTorandomlyGeneratedArray+i);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	6a3a      	ldr	r2, [r7, #32]
 800132e:	4413      	add	r3, r2
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b2d9      	uxtb	r1, r3
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	4413      	add	r3, r2
 800133c:	460a      	mov	r2, r1
 800133e:	701a      	strb	r2, [r3, #0]
		sprintf(&code, "%1d", randomlyGeneratedArray[i]);
 8001340:	f107 020c 	add.w	r2, r7, #12
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4930      	ldr	r1, [pc, #192]	; (8001414 <mainLOGIC+0x118>)
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fd32 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2, &code, 1, 10);
 8001358:	f107 0118 	add.w	r1, r7, #24
 800135c:	230a      	movs	r3, #10
 800135e:	2201      	movs	r2, #1
 8001360:	482b      	ldr	r0, [pc, #172]	; (8001410 <mainLOGIC+0x114>)
 8001362:	f002 fa78 	bl	8003856 <HAL_UART_Transmit>
	for ( i = 0; i < 10; i++ ) {
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	2b09      	cmp	r3, #9
 8001370:	ddda      	ble.n	8001328 <mainLOGIC+0x2c>
	}

	while(1)
	{

		if(keypadQueue != NULL) //&& keyPressedSemaphore != NULL)
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <mainLOGIC+0x11c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0fb      	beq.n	8001372 <mainLOGIC+0x76>
		{

		  if(xQueueReceive(keypadQueue, &(buffer), (TickType_t)10) == pdPASS )
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <mainLOGIC+0x11c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f107 011f 	add.w	r1, r7, #31
 8001382:	220a      	movs	r2, #10
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fa19 	bl	80047bc <xQueueReceive>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d1f0      	bne.n	8001372 <mainLOGIC+0x76>
		  {
				HAL_UART_Transmit(&huart2, "Received", 8, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2208      	movs	r2, #8
 8001394:	4921      	ldr	r1, [pc, #132]	; (800141c <mainLOGIC+0x120>)
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <mainLOGIC+0x114>)
 8001398:	f002 fa5d 	bl	8003856 <HAL_UART_Transmit>
				sprintf(&code, "%1d", buffer);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	461a      	mov	r2, r3
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	491b      	ldr	r1, [pc, #108]	; (8001414 <mainLOGIC+0x118>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fd08 	bl	8006dbc <siprintf>
				HAL_UART_Transmit(&huart2, &code, 1, 10);
 80013ac:	f107 0118 	add.w	r1, r7, #24
 80013b0:	230a      	movs	r3, #10
 80013b2:	2201      	movs	r2, #1
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <mainLOGIC+0x114>)
 80013b6:	f002 fa4e 	bl	8003856 <HAL_UART_Transmit>
				//code = ' ';
				if(xQueueSendToBack(dispQueue, (void*)&buffer, (TickType_t)10) == pdPASS)
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <mainLOGIC+0x124>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	f107 011f 	add.w	r1, r7, #31
 80013c2:	2300      	movs	r3, #0
 80013c4:	220a      	movs	r2, #10
 80013c6:	f003 f85f 	bl	8004488 <xQueueGenericSend>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d1d0      	bne.n	8001372 <mainLOGIC+0x76>
				{
					//sprintf(&code, "%01d", keycode);
					HAL_UART_Transmit(&huart2, "Sent", 4, 10);
 80013d0:	230a      	movs	r3, #10
 80013d2:	2204      	movs	r2, #4
 80013d4:	4913      	ldr	r1, [pc, #76]	; (8001424 <mainLOGIC+0x128>)
 80013d6:	480e      	ldr	r0, [pc, #56]	; (8001410 <mainLOGIC+0x114>)
 80013d8:	f002 fa3d 	bl	8003856 <HAL_UART_Transmit>
					sprintf(&code, "%1d", buffer);
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	461a      	mov	r2, r3
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	490b      	ldr	r1, [pc, #44]	; (8001414 <mainLOGIC+0x118>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fce8 	bl	8006dbc <siprintf>
					HAL_UART_Transmit(&huart2, &code, 1, 10);
 80013ec:	f107 0118 	add.w	r1, r7, #24
 80013f0:	230a      	movs	r3, #10
 80013f2:	2201      	movs	r2, #1
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <mainLOGIC+0x114>)
 80013f6:	f002 fa2e 	bl	8003856 <HAL_UART_Transmit>
					xSemaphoreGive( readKeypadSemaphore );
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <mainLOGIC+0x12c>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	f003 f840 	bl	8004488 <xQueueGenericSend>
		if(keypadQueue != NULL) //&& keyPressedSemaphore != NULL)
 8001408:	e7b3      	b.n	8001372 <mainLOGIC+0x76>
 800140a:	bf00      	nop
 800140c:	080076b4 	.word	0x080076b4
 8001410:	200001d8 	.word	0x200001d8
 8001414:	080076b0 	.word	0x080076b0
 8001418:	20000144 	.word	0x20000144
 800141c:	080076bc 	.word	0x080076bc
 8001420:	20000148 	.word	0x20000148
 8001424:	080076c8 	.word	0x080076c8
 8001428:	2000014c 	.word	0x2000014c

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b097      	sub	sp, #92	; 0x5c
 8001430:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f000 fadb 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f8b3 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f7ff fc57 	bl	8000cec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800143e:	f000 fa39 	bl	80018b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001442:	f000 f921 	bl	8001688 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001446:	f7ff fbb1 	bl	8000bac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Conf1.GPIO_Pin=GPIO_PIN_6;
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <main+0x138>)
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  Conf1.GPIOx=GPIOB;
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <main+0x138>)
 8001454:	4a44      	ldr	r2, [pc, #272]	; (8001568 <main+0x13c>)
 8001456:	659a      	str	r2, [r3, #88]	; 0x58
  Conf1.hspi=hspi1;
 8001458:	4a42      	ldr	r2, [pc, #264]	; (8001564 <main+0x138>)
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <main+0x140>)
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	2358      	movs	r3, #88	; 0x58
 8001462:	461a      	mov	r2, r3
 8001464:	f005 fc94 	bl	8006d90 <memcpy>
  Disp_Init(Conf1, 0x01);
 8001468:	4c3e      	ldr	r4, [pc, #248]	; (8001564 <main+0x138>)
 800146a:	2301      	movs	r3, #1
 800146c:	9314      	str	r3, [sp, #80]	; 0x50
 800146e:	4668      	mov	r0, sp
 8001470:	f104 0310 	add.w	r3, r4, #16
 8001474:	2250      	movs	r2, #80	; 0x50
 8001476:	4619      	mov	r1, r3
 8001478:	f005 fc8a 	bl	8006d90 <memcpy>
 800147c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001480:	f7ff f8b5 	bl	80005ee <Disp_Init>

  xTaskCreate(
 8001484:	2300      	movs	r3, #0
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2301      	movs	r3, #1
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001492:	4937      	ldr	r1, [pc, #220]	; (8001570 <main+0x144>)
 8001494:	4837      	ldr	r0, [pc, #220]	; (8001574 <main+0x148>)
 8001496:	f003 fd60 	bl	8004f5a <xTaskCreate>
                      1000,      /* Stack size in words, not bytes. */
                      NULL,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
                      NULL );      /* Used to pass out the created task's handle. */

  xTaskCreate(
 800149a:	2300      	movs	r3, #0
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a8:	4933      	ldr	r1, [pc, #204]	; (8001578 <main+0x14c>)
 80014aa:	4834      	ldr	r0, [pc, #208]	; (800157c <main+0x150>)
 80014ac:	f003 fd55 	bl	8004f5a <xTaskCreate>
                      1000,      /* Stack size in words, not bytes. */
                      NULL,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
                      NULL );      /* Used to pass out the created task's handle. */

  xTaskCreate(
 80014b0:	2300      	movs	r3, #0
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014be:	4930      	ldr	r1, [pc, #192]	; (8001580 <main+0x154>)
 80014c0:	4830      	ldr	r0, [pc, #192]	; (8001584 <main+0x158>)
 80014c2:	f003 fd4a 	bl	8004f5a <xTaskCreate>
                      NULL );      /* Used to pass out the created task's handle. */




  keypadQueue = xQueueCreate( 10, sizeof(uint8_t));
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	200a      	movs	r0, #10
 80014cc:	f002 ff7e 	bl	80043cc <xQueueGenericCreate>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <main+0x15c>)
 80014d4:	6013      	str	r3, [r2, #0]
  if(keypadQueue == 0) HAL_UART_Transmit(&huart2, "Err_queue", 9, 10);
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <main+0x15c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <main+0xbe>
 80014de:	230a      	movs	r3, #10
 80014e0:	2209      	movs	r2, #9
 80014e2:	492a      	ldr	r1, [pc, #168]	; (800158c <main+0x160>)
 80014e4:	482a      	ldr	r0, [pc, #168]	; (8001590 <main+0x164>)
 80014e6:	f002 f9b6 	bl	8003856 <HAL_UART_Transmit>
  dispQueue = xQueueCreate( 10, sizeof(uint8_t));
 80014ea:	2200      	movs	r2, #0
 80014ec:	2101      	movs	r1, #1
 80014ee:	200a      	movs	r0, #10
 80014f0:	f002 ff6c 	bl	80043cc <xQueueGenericCreate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a27      	ldr	r2, [pc, #156]	; (8001594 <main+0x168>)
 80014f8:	6013      	str	r3, [r2, #0]
  if(dispQueue == 0) HAL_UART_Transmit(&huart2, "Err_queue", 9, 10);
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <main+0x168>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d105      	bne.n	800150e <main+0xe2>
 8001502:	230a      	movs	r3, #10
 8001504:	2209      	movs	r2, #9
 8001506:	4921      	ldr	r1, [pc, #132]	; (800158c <main+0x160>)
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <main+0x164>)
 800150a:	f002 f9a4 	bl	8003856 <HAL_UART_Transmit>

  readKeypadSemaphore = xSemaphoreCreateBinary();
 800150e:	2203      	movs	r2, #3
 8001510:	2100      	movs	r1, #0
 8001512:	2001      	movs	r0, #1
 8001514:	f002 ff5a 	bl	80043cc <xQueueGenericCreate>
 8001518:	4603      	mov	r3, r0
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <main+0x16c>)
 800151c:	6013      	str	r3, [r2, #0]
  keyPressedSemaphore = xSemaphoreCreateBinary();
 800151e:	2203      	movs	r2, #3
 8001520:	2100      	movs	r1, #0
 8001522:	2001      	movs	r0, #1
 8001524:	f002 ff52 	bl	80043cc <xQueueGenericCreate>
 8001528:	4603      	mov	r3, r0
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <main+0x170>)
 800152c:	6013      	str	r3, [r2, #0]

  xSemaphoreGive( readKeypadSemaphore );
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <main+0x16c>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	f002 ffa6 	bl	8004488 <xQueueGenericSend>

  Disp_Clear(Conf1);
 800153c:	4c09      	ldr	r4, [pc, #36]	; (8001564 <main+0x138>)
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	2250      	movs	r2, #80	; 0x50
 8001546:	4619      	mov	r1, r3
 8001548:	f005 fc22 	bl	8006d90 <memcpy>
 800154c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001550:	f7ff fa6d 	bl	8000a2e <Disp_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001554:	f002 fd28 	bl	8003fa8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001558:	f7ff fbc0 	bl	8000cdc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800155c:	f002 fd48 	bl	8003ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0x134>
 8001562:	bf00      	nop
 8001564:	200000e4 	.word	0x200000e4
 8001568:	40020400 	.word	0x40020400
 800156c:	2000017c 	.word	0x2000017c
 8001570:	080076d0 	.word	0x080076d0
 8001574:	080012fd 	.word	0x080012fd
 8001578:	080076d8 	.word	0x080076d8
 800157c:	080010e5 	.word	0x080010e5
 8001580:	080076dc 	.word	0x080076dc
 8001584:	08001179 	.word	0x08001179
 8001588:	20000144 	.word	0x20000144
 800158c:	080076e4 	.word	0x080076e4
 8001590:	200001d8 	.word	0x200001d8
 8001594:	20000148 	.word	0x20000148
 8001598:	2000014c 	.word	0x2000014c
 800159c:	20000150 	.word	0x20000150

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2234      	movs	r2, #52	; 0x34
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fbfc 	bl	8006dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <SystemClock_Config+0xd4>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a29      	ldr	r2, [pc, #164]	; (8001674 <SystemClock_Config+0xd4>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <SystemClock_Config+0xd4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <SystemClock_Config+0xd8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <SystemClock_Config+0xd8>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <SystemClock_Config+0xd8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001614:	2310      	movs	r3, #16
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800161c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800161e:	2304      	movs	r3, #4
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fb96 	bl	8002d60 <HAL_RCC_OscConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800163a:	f000 f81f 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163e:	230f      	movs	r3, #15
 8001640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	2302      	movs	r3, #2
 8001644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2102      	movs	r1, #2
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f836 	bl	80026cc <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001666:	f000 f809 	bl	800167c <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	; 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI1_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <MX_SPI1_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI1_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI1_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI1_Init+0x64>)
 80016bc:	2228      	movs	r2, #40	; 0x28
 80016be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI1_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_SPI1_Init+0x64>)
 80016da:	f001 fddf 	bl	800329c <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016e4:	f7ff ffca 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000017c 	.word	0x2000017c
 80016f0:	40013000 	.word	0x40013000

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_SPI_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_SPI_MspInit+0x88>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800174e:	23e0      	movs	r3, #224	; 0xe0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_SPI_MspInit+0x8c>)
 800176a:	f000 fde9 	bl	8002340 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40013000 	.word	0x40013000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_MspInit+0x54>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_MspInit+0x54>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x54>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_MspInit+0x54>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_MspInit+0x54>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_MspInit+0x54>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	210f      	movs	r1, #15
 80017c6:	f06f 0001 	mvn.w	r0, #1
 80017ca:	f000 fd90 	bl	80022ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f940 	bl	8001a90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001810:	f004 f930 	bl	8005a74 <xTaskGetSchedulerState>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800181a:	f005 f815 	bl	8006848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f005 fa72 	bl	8006d3c <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20020000 	.word	0x20020000
 8001884:	00000400 	.word	0x00000400
 8001888:	200001d4 	.word	0x200001d4
 800188c:	20004b80 	.word	0x20004b80

08001890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <MX_USART2_UART_Init+0x50>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_USART2_UART_Init+0x4c>)
 80018ec:	f001 ff66 	bl	80037bc <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018f6:	f7ff fec1 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001d8 	.word	0x200001d8
 8001904:	40004400 	.word	0x40004400

08001908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_UART_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_UART_MspInit+0x88>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_UART_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001962:	230c      	movs	r3, #12
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001972:	2307      	movs	r3, #7
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_UART_MspInit+0x8c>)
 800197e:	f000 fcdf 	bl	8002340 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40004400 	.word	0x40004400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ff65 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f005 f9bf 	bl	8006d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff fd2f 	bl	800142c <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019dc:	08007a54 	.word	0x08007a54
  ldr r2, =_sbss
 80019e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019e4:	20004b80 	.word	0x20004b80

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 fc5f 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff feb0 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fc69 	bl	8002326 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 fc3f 	bl	80022ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000004 	.word	0x20000004
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	20000008 	.word	0x20000008

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	2000021c 	.word	0x2000021c

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000021c 	.word	0x2000021c

08001ad0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e033      	b.n	8001b4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff f8b0 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d118      	bne.n	8001b40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b16:	f023 0302 	bic.w	r3, r3, #2
 8001b1a:	f043 0202 	orr.w	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa2a 	bl	8001f7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3e:	e001      	b.n	8001b44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Start+0x1a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e0b2      	b.n	8001cd8 <HAL_ADC_Start+0x180>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d018      	beq.n	8001bba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_ADC_Start+0x18c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_ADC_Start+0x190>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9a      	lsrs	r2, r3, #18
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d17a      	bne.n	8001cbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c06:	d106      	bne.n	8001c16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f023 0206 	bic.w	r2, r3, #6
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_ADC_Start+0x194>)
 8001c26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12a      	bne.n	8001c94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_ADC_Start+0x198>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d015      	beq.n	8001c74 <HAL_ADC_Start+0x11c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <HAL_ADC_Start+0x19c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_Start+0x106>
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_ADC_Start+0x194>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_ADC_Start+0x1a0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d136      	bne.n	8001cd6 <HAL_ADC_Start+0x17e>
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_ADC_Start+0x194>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d130      	bne.n	8001cd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d129      	bne.n	8001cd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	e020      	b.n	8001cd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_ADC_Start+0x198>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11b      	bne.n	8001cd6 <HAL_ADC_Start+0x17e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d114      	bne.n	8001cd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	40012100 	.word	0x40012100
 8001cf8:	40012200 	.word	0x40012200

08001cfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1c>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e113      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x244>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d925      	bls.n	8001d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68d9      	ldr	r1, [r3, #12]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	3b1e      	subs	r3, #30
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43da      	mvns	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4403      	add	r3, r0
 8001d82:	3b1e      	subs	r3, #30
 8001d84:	409a      	lsls	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	e022      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6919      	ldr	r1, [r3, #16]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	2207      	movs	r2, #7
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4403      	add	r3, r0
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d824      	bhi.n	8001e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	3b05      	subs	r3, #5
 8001df0:	221f      	movs	r2, #31
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b05      	subs	r3, #5
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
 8001e26:	e04c      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d824      	bhi.n	8001e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b23      	subs	r3, #35	; 0x23
 8001e42:	221f      	movs	r2, #31
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b23      	subs	r3, #35	; 0x23
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
 8001e78:	e023      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b41      	subs	r3, #65	; 0x41
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b41      	subs	r3, #65	; 0x41
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_ADC_ConfigChannel+0x250>)
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <HAL_ADC_ConfigChannel+0x254>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10f      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b12      	cmp	r3, #18
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_ADC_ConfigChannel+0x254>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12b      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x23a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_ADC_ConfigChannel+0x258>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x1f4>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d122      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_ADC_ConfigChannel+0x258>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_ADC_ConfigChannel+0x25c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_ADC_ConfigChannel+0x260>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	0c9a      	lsrs	r2, r3, #18
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f44:	e002      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f9      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	40012000 	.word	0x40012000
 8001f70:	10000012 	.word	0x10000012
 8001f74:	20000004 	.word	0x20000004
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f84:	4b79      	ldr	r3, [pc, #484]	; (800216c <ADC_Init+0x1f0>)
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	021a      	lsls	r2, r3, #8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	4a58      	ldr	r2, [pc, #352]	; (8002170 <ADC_Init+0x1f4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d022      	beq.n	800205a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6899      	ldr	r1, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e00f      	b.n	800207a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002078:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0202 	bic.w	r2, r2, #2
 8002088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
 8002094:	005a      	lsls	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	3b01      	subs	r3, #1
 80020d4:	035a      	lsls	r2, r3, #13
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e007      	b.n	80020f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	3b01      	subs	r3, #1
 800210c:	051a      	lsls	r2, r3, #20
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002132:	025a      	lsls	r2, r3, #9
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	029a      	lsls	r2, r3, #10
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40012300 	.word	0x40012300
 8002170:	0f000001 	.word	0x0f000001

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	; (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
         );
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff8e 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff47 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff5c 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff8e 	bl	800222c <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffb0 	bl	8002294 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e165      	b.n	8002628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8154 	bne.w	8002622 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d005      	beq.n	8002392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	2b02      	cmp	r3, #2
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d017      	beq.n	8002430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d123      	bne.n	8002484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80ae 	beq.w	8002622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_GPIO_Init+0x300>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a5c      	ldr	r2, [pc, #368]	; (8002640 <HAL_GPIO_Init+0x300>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_GPIO_Init+0x300>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_GPIO_Init+0x304>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_GPIO_Init+0x308>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x21a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_GPIO_Init+0x30c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x216>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4d      	ldr	r2, [pc, #308]	; (8002650 <HAL_GPIO_Init+0x310>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x212>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_GPIO_Init+0x314>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <HAL_GPIO_Init+0x318>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x20a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4a      	ldr	r2, [pc, #296]	; (800265c <HAL_GPIO_Init+0x31c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x206>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a49      	ldr	r2, [pc, #292]	; (8002660 <HAL_GPIO_Init+0x320>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x202>
 800253e:	2306      	movs	r3, #6
 8002540:	e00c      	b.n	800255c <HAL_GPIO_Init+0x21c>
 8002542:	2307      	movs	r3, #7
 8002544:	e00a      	b.n	800255c <HAL_GPIO_Init+0x21c>
 8002546:	2305      	movs	r3, #5
 8002548:	e008      	b.n	800255c <HAL_GPIO_Init+0x21c>
 800254a:	2304      	movs	r3, #4
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x21c>
 800254e:	2303      	movs	r3, #3
 8002550:	e004      	b.n	800255c <HAL_GPIO_Init+0x21c>
 8002552:	2302      	movs	r3, #2
 8002554:	e002      	b.n	800255c <HAL_GPIO_Init+0x21c>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x21c>
 800255a:	2300      	movs	r3, #0
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f002 0203 	and.w	r2, r2, #3
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4093      	lsls	r3, r2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800256c:	4935      	ldr	r1, [pc, #212]	; (8002644 <HAL_GPIO_Init+0x304>)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3302      	adds	r3, #2
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_GPIO_Init+0x324>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259e:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_GPIO_Init+0x324>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <HAL_GPIO_Init+0x324>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	f67f ae96 	bls.w	800235c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021400 	.word	0x40021400
 8002660:	40021800 	.word	0x40021800
 8002664:	40013c00 	.word	0x40013c00

08002668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	887b      	ldrh	r3, [r7, #2]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e001      	b.n	800268a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cc      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d90c      	bls.n	8002708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d044      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d119      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e067      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4934      	ldr	r1, [pc, #208]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7ff f97c 	bl	8001ab8 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7ff f978 	bl	8001ab8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e04f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d20c      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f855 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f8dc 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00
 8002888:	40023800 	.word	0x40023800
 800288c:	080079f8 	.word	0x080079f8
 8002890:	20000004 	.word	0x20000004
 8002894:	20000008 	.word	0x20000008

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08007a08 	.word	0x08007a08

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028dc:	f7ff ffdc 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0b5b      	lsrs	r3, r3, #13
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08007a08 	.word	0x08007a08

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b0ae      	sub	sp, #184	; 0xb8
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002926:	4bcb      	ldr	r3, [pc, #812]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b0c      	cmp	r3, #12
 8002930:	f200 8206 	bhi.w	8002d40 <HAL_RCC_GetSysClockFreq+0x440>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	08002971 	.word	0x08002971
 8002940:	08002d41 	.word	0x08002d41
 8002944:	08002d41 	.word	0x08002d41
 8002948:	08002d41 	.word	0x08002d41
 800294c:	08002979 	.word	0x08002979
 8002950:	08002d41 	.word	0x08002d41
 8002954:	08002d41 	.word	0x08002d41
 8002958:	08002d41 	.word	0x08002d41
 800295c:	08002981 	.word	0x08002981
 8002960:	08002d41 	.word	0x08002d41
 8002964:	08002d41 	.word	0x08002d41
 8002968:	08002d41 	.word	0x08002d41
 800296c:	08002b71 	.word	0x08002b71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4bb9      	ldr	r3, [pc, #740]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002976:	e1e7      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002978:	4bb8      	ldr	r3, [pc, #736]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x35c>)
 800297a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800297e:	e1e3      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4bb4      	ldr	r3, [pc, #720]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298c:	4bb1      	ldr	r3, [pc, #708]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d071      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002998:	4bae      	ldr	r3, [pc, #696]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80029a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029be:	4622      	mov	r2, r4
 80029c0:	462b      	mov	r3, r5
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d0:	0150      	lsls	r0, r2, #5
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4621      	mov	r1, r4
 80029d8:	1a51      	subs	r1, r2, r1
 80029da:	6439      	str	r1, [r7, #64]	; 0x40
 80029dc:	4629      	mov	r1, r5
 80029de:	eb63 0301 	sbc.w	r3, r3, r1
 80029e2:	647b      	str	r3, [r7, #68]	; 0x44
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80029f0:	4649      	mov	r1, r9
 80029f2:	018b      	lsls	r3, r1, #6
 80029f4:	4641      	mov	r1, r8
 80029f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fa:	4641      	mov	r1, r8
 80029fc:	018a      	lsls	r2, r1, #6
 80029fe:	4641      	mov	r1, r8
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a04:	4649      	mov	r1, r9
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a18:	4649      	mov	r1, r9
 8002a1a:	00cb      	lsls	r3, r1, #3
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a22:	4641      	mov	r1, r8
 8002a24:	00ca      	lsls	r2, r1, #3
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	462b      	mov	r3, r5
 8002a34:	460a      	mov	r2, r1
 8002a36:	eb42 0303 	adc.w	r3, r2, r3
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a48:	4629      	mov	r1, r5
 8002a4a:	024b      	lsls	r3, r1, #9
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a52:	4621      	mov	r1, r4
 8002a54:	024a      	lsls	r2, r1, #9
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a6c:	f7fd fc20 	bl	80002b0 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a7a:	e067      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a96:	2300      	movs	r3, #0
 8002a98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	0159      	lsls	r1, r3, #5
 8002aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab0:	0150      	lsls	r0, r2, #5
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	1a51      	subs	r1, r2, r1
 8002aba:	62b9      	str	r1, [r7, #40]	; 0x28
 8002abc:	4629      	mov	r1, r5
 8002abe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	018b      	lsls	r3, r1, #6
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ada:	4641      	mov	r1, r8
 8002adc:	018a      	lsls	r2, r1, #6
 8002ade:	4641      	mov	r1, r8
 8002ae0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002afe:	4692      	mov	sl, r2
 8002b00:	469b      	mov	fp, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	eb1a 0303 	adds.w	r3, sl, r3
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	462b      	mov	r3, r5
 8002b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	028b      	lsls	r3, r1, #10
 8002b22:	4621      	mov	r1, r4
 8002b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b28:	4621      	mov	r1, r4
 8002b2a:	028a      	lsls	r2, r1, #10
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b34:	2200      	movs	r2, #0
 8002b36:	673b      	str	r3, [r7, #112]	; 0x70
 8002b38:	677a      	str	r2, [r7, #116]	; 0x74
 8002b3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b3e:	f7fd fbb7 	bl	80002b0 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4613      	mov	r3, r2
 8002b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b6e:	e0eb      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d06b      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	0159      	lsls	r1, r3, #5
 8002bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb6:	0150      	lsls	r0, r2, #5
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	1a51      	subs	r1, r2, r1
 8002bc0:	61b9      	str	r1, [r7, #24]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	018b      	lsls	r3, r1, #6
 8002bda:	4651      	mov	r1, sl
 8002bdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be0:	4651      	mov	r1, sl
 8002be2:	018a      	lsls	r2, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ebb2 0801 	subs.w	r8, r2, r1
 8002bea:	4659      	mov	r1, fp
 8002bec:	eb63 0901 	sbc.w	r9, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c04:	4690      	mov	r8, r2
 8002c06:	4699      	mov	r9, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	eb18 0303 	adds.w	r3, r8, r3
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	462b      	mov	r3, r5
 8002c12:	eb49 0303 	adc.w	r3, r9, r3
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c24:	4629      	mov	r1, r5
 8002c26:	024b      	lsls	r3, r1, #9
 8002c28:	4621      	mov	r1, r4
 8002c2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2e:	4621      	mov	r1, r4
 8002c30:	024a      	lsls	r2, r1, #9
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c44:	f7fd fb34 	bl	80002b0 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c52:	e065      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x420>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c70:	653b      	str	r3, [r7, #80]	; 0x50
 8002c72:	2300      	movs	r3, #0
 8002c74:	657b      	str	r3, [r7, #84]	; 0x54
 8002c76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c7a:	4642      	mov	r2, r8
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4641      	mov	r1, r8
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	4649      	mov	r1, r9
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	1a54      	subs	r4, r2, r1
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	eb63 0501 	sbc.w	r5, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	464b      	mov	r3, r9
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d08:	2200      	movs	r2, #0
 8002d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d12:	f7fd facd 	bl	80002b0 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0f1b      	lsrs	r3, r3, #28
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d3e:	e003      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	37b8      	adds	r7, #184	; 0xb8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400

08002d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e28d      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8083 	beq.w	8002e86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d80:	4b94      	ldr	r3, [pc, #592]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d019      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d8c:	4b91      	ldr	r3, [pc, #580]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d98:	4b8e      	ldr	r3, [pc, #568]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da4:	d00c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d112      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05b      	beq.n	8002e84 <HAL_RCC_OscConfig+0x124>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d157      	bne.n	8002e84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e25a      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x90>
 8002de2:	4b7c      	ldr	r3, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7b      	ldr	r2, [pc, #492]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xcc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0xb4>
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a72      	ldr	r2, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xcc>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6b      	ldr	r2, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fe40 	bl	8001ab8 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fe3c 	bl	8001ab8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e21f      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xdc>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fe2c 	bl	8001ab8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fe28 	bl	8001ab8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e20b      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x104>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d06f      	beq.n	8002f72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e92:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b44      	ldr	r3, [pc, #272]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x186>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1d3      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4937      	ldr	r1, [pc, #220]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f04:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fdd5 	bl	8001ab8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe fdd1 	bl	8001ab8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1b4      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4925      	ldr	r1, [pc, #148]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fdb4 	bl	8001ab8 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe fdb0 	bl	8001ab8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e193      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d036      	beq.n	8002fec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fd94 	bl	8001ab8 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fd90 	bl	8001ab8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e173      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x234>
 8002fb2:	e01b      	b.n	8002fec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe fd7d 	bl	8001ab8 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fd79 	bl	8001ab8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d907      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e15c      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	42470000 	.word	0x42470000
 8002fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b8a      	ldr	r3, [pc, #552]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ea      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8097 	beq.w	8003128 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b83      	ldr	r3, [pc, #524]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b7c      	ldr	r3, [pc, #496]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b79      	ldr	r3, [pc, #484]	; (8003210 <HAL_RCC_OscConfig+0x4b0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x4b0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x4b0>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe fd39 	bl	8001ab8 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe fd35 	bl	8001ab8 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e118      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x4b0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x31e>
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x358>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x340>
 8003086:	4b61      	ldr	r3, [pc, #388]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a60      	ldr	r2, [pc, #384]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5d      	ldr	r2, [pc, #372]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x358>
 80030a0:	4b5a      	ldr	r3, [pc, #360]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a59      	ldr	r2, [pc, #356]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a56      	ldr	r2, [pc, #344]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fcfa 	bl	8001ab8 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fcf6 	bl	8001ab8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0d7      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCC_OscConfig+0x368>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fce4 	bl	8001ab8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fce0 	bl	8001ab8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0c1      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4a3a      	ldr	r2, [pc, #232]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80ad 	beq.w	800328c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d060      	beq.n	8003200 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d145      	bne.n	80031d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b33      	ldr	r3, [pc, #204]	; (8003214 <HAL_RCC_OscConfig+0x4b4>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fcb4 	bl	8001ab8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fcb0 	bl	8001ab8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e093      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	491b      	ldr	r1, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x4b4>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe fc85 	bl	8001ab8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe fc81 	bl	8001ab8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e064      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x452>
 80031d0:	e05c      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCC_OscConfig+0x4b4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fc6e 	bl	8001ab8 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe fc6a 	bl	8001ab8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e04d      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_OscConfig+0x4ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x480>
 80031fe:	e045      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e040      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
 8003214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x538>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d030      	beq.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d129      	bne.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d122      	bne.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003250:	4293      	cmp	r3, r2
 8003252:	d119      	bne.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	3b01      	subs	r3, #1
 8003262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d10f      	bne.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07b      	b.n	80033a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d009      	beq.n	80032d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
 80032c6:	e005      	b.n	80032d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe fa00 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	ea42 0103 	orr.w	r1, r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0104 	and.w	r1, r3, #4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0210 	and.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_SPI_Transmit+0x22>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e126      	b.n	800361e <HAL_SPI_Transmit+0x270>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033d8:	f7fe fb6e 	bl	8001ab8 <HAL_GetTick>
 80033dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f2:	e10b      	b.n	800360c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x52>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003404:	e102      	b.n	800360c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d10f      	bne.n	800346e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d007      	beq.n	800348c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003494:	d14b      	bne.n	800352e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0xf6>
 800349e:	8afb      	ldrh	r3, [r7, #22]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d13e      	bne.n	8003522 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034c8:	e02b      	b.n	8003522 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d112      	bne.n	80034fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80034fc:	e011      	b.n	8003522 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034fe:	f7fe fadb 	bl	8001ab8 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d803      	bhi.n	8003516 <HAL_SPI_Transmit+0x168>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d102      	bne.n	800351c <HAL_SPI_Transmit+0x16e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003520:	e074      	b.n	800360c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ce      	bne.n	80034ca <HAL_SPI_Transmit+0x11c>
 800352c:	e04c      	b.n	80035c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0x18e>
 8003536:	8afb      	ldrh	r3, [r7, #22]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d140      	bne.n	80035be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	7812      	ldrb	r2, [r2, #0]
 8003548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003562:	e02c      	b.n	80035be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d113      	bne.n	800359a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	86da      	strh	r2, [r3, #54]	; 0x36
 8003598:	e011      	b.n	80035be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800359a:	f7fe fa8d 	bl	8001ab8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d803      	bhi.n	80035b2 <HAL_SPI_Transmit+0x204>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Transmit+0x20a>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035bc:	e026      	b.n	800360c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1cd      	bne.n	8003564 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f8b3 	bl	8003738 <SPI_EndRxTxTransaction>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e000      	b.n	800360c <HAL_SPI_Transmit+0x25e>
  }

error:
 800360a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800361c:	7ffb      	ldrb	r3, [r7, #31]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003638:	f7fe fa3e 	bl	8001ab8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	4413      	add	r3, r2
 8003646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003648:	f7fe fa36 	bl	8001ab8 <HAL_GetTick>
 800364c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	015b      	lsls	r3, r3, #5
 8003654:	0d1b      	lsrs	r3, r3, #20
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800365e:	e054      	b.n	800370a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d050      	beq.n	800370a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003668:	f7fe fa26 	bl	8001ab8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	d902      	bls.n	800367e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d13d      	bne.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800368c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003696:	d111      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a0:	d004      	beq.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d107      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c4:	d10f      	bne.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e017      	b.n	800372a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3b01      	subs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	429a      	cmp	r2, r3
 8003726:	d19b      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000004 	.word	0x20000004

08003738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <SPI_EndRxTxTransaction+0x7c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <SPI_EndRxTxTransaction+0x80>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0d5b      	lsrs	r3, r3, #21
 8003750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003762:	d112      	bne.n	800378a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff ff5a 	bl	8003628 <SPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3b01      	subs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d0f2      	beq.n	800378a <SPI_EndRxTxTransaction+0x52>
 80037a4:	e000      	b.n	80037a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80037a6:	bf00      	nop
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000004 	.word	0x20000004
 80037b8:	165e9f81 	.word	0x165e9f81

080037bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e03f      	b.n	800384e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe f890 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f929 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08a      	sub	sp, #40	; 0x28
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d17c      	bne.n	8003970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_Transmit+0x2c>
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e075      	b.n	8003972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Transmit+0x3e>
 8003890:	2302      	movs	r3, #2
 8003892:	e06e      	b.n	8003972 <HAL_UART_Transmit+0x11c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2221      	movs	r2, #33	; 0x21
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038aa:	f7fe f905 	bl	8001ab8 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d108      	bne.n	80038d8 <HAL_UART_Transmit+0x82>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e003      	b.n	80038e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038e8:	e02a      	b.n	8003940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f840 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e036      	b.n	8003972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3302      	adds	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e007      	b.n	8003932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1cf      	bne.n	80038ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2140      	movs	r1, #64	; 0x40
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f810 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b090      	sub	sp, #64	; 0x40
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	e050      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d04c      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x30>
 800399a:	f7fe f88d 	bl	8001ab8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d241      	bcs.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ca:	637a      	str	r2, [r7, #52]	; 0x34
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039fe:	623a      	str	r2, [r7, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69f9      	ldr	r1, [r7, #28]
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d09f      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3740      	adds	r7, #64	; 0x40
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0c0      	sub	sp, #256	; 0x100
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	ea40 0301 	orr.w	r3, r0, r1
 8003a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ab0:	f021 010c 	bic.w	r1, r1, #12
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	6999      	ldr	r1, [r3, #24]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	ea40 0301 	orr.w	r3, r0, r1
 8003ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <UART_SetConfig+0x2cc>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d005      	beq.n	8003af8 <UART_SetConfig+0xa0>
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <UART_SetConfig+0x2d0>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d104      	bne.n	8003b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7fe feee 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b00:	e003      	b.n	8003b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7fe fed5 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	f040 810c 	bne.w	8003d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b32:	415b      	adcs	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	eb12 0801 	adds.w	r8, r2, r1
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb43 0901 	adc.w	r9, r3, r1
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	eb18 0303 	adds.w	r3, r8, r3
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b68:	462b      	mov	r3, r5
 8003b6a:	eb49 0303 	adc.w	r3, r9, r3
 8003b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b86:	460b      	mov	r3, r1
 8003b88:	18db      	adds	r3, r3, r3
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	eb42 0303 	adc.w	r3, r2, r3
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
 8003b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b9c:	f7fc fb88 	bl	80002b0 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf0:	4692      	mov	sl, r2
 8003bf2:	469b      	mov	fp, r3
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	eb4b 0303 	adc.w	r3, fp, r3
 8003c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	18db      	adds	r3, r3, r3
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	4613      	mov	r3, r2
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c32:	f7fc fb3d 	bl	80002b0 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	1acb      	subs	r3, r1, r3
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c54:	fba3 2302 	umull	r2, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c84:	4641      	mov	r1, r8
 8003c86:	1851      	adds	r1, r2, r1
 8003c88:	6339      	str	r1, [r7, #48]	; 0x30
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	414b      	adcs	r3, r1
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	00cb      	lsls	r3, r1, #3
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	00ca      	lsls	r2, r1, #3
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb8:	464b      	mov	r3, r9
 8003cba:	460a      	mov	r2, r1
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	4613      	mov	r3, r2
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cee:	f7fc fadf 	bl	80002b0 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	2164      	movs	r1, #100	; 0x64
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	3332      	adds	r3, #50	; 0x32
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 0207 	and.w	r2, r3, #7
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4422      	add	r2, r4
 8003d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d20:	e105      	b.n	8003f2e <UART_SetConfig+0x4d6>
 8003d22:	bf00      	nop
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	6239      	str	r1, [r7, #32]
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d52:	4641      	mov	r1, r8
 8003d54:	1854      	adds	r4, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb43 0501 	adc.w	r5, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	00eb      	lsls	r3, r5, #3
 8003d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d78:	464b      	mov	r3, r9
 8003d7a:	eb45 0303 	adc.w	r3, r5, r3
 8003d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d9e:	4629      	mov	r1, r5
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	4621      	mov	r1, r4
 8003da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da8:	4621      	mov	r1, r4
 8003daa:	008a      	lsls	r2, r1, #2
 8003dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003db0:	f7fc fa7e 	bl	80002b0 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	011c      	lsls	r4, r3, #4
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	61b9      	str	r1, [r7, #24]
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6139      	str	r1, [r7, #16]
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e46:	4641      	mov	r1, r8
 8003e48:	008a      	lsls	r2, r1, #2
 8003e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e4e:	f7fc fa2f 	bl	80002b0 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	3332      	adds	r3, #50	; 0x32
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e76:	441c      	add	r4, r3
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e80:	677a      	str	r2, [r7, #116]	; 0x74
 8003e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e86:	4642      	mov	r2, r8
 8003e88:	464b      	mov	r3, r9
 8003e8a:	1891      	adds	r1, r2, r2
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	415b      	adcs	r3, r3
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e96:	4641      	mov	r1, r8
 8003e98:	1851      	adds	r1, r2, r1
 8003e9a:	6039      	str	r1, [r7, #0]
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	414b      	adcs	r3, r1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eae:	4659      	mov	r1, fp
 8003eb0:	00cb      	lsls	r3, r1, #3
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb8:	4651      	mov	r1, sl
 8003eba:	00ca      	lsls	r2, r1, #3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
 8003edc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eea:	4649      	mov	r1, r9
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	4641      	mov	r1, r8
 8003ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	008a      	lsls	r2, r1, #2
 8003ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003efc:	f7fc f9d8 	bl	80002b0 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f06:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2164      	movs	r1, #100	; 0x64
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	; 0x32
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4422      	add	r2, r4
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <__NVIC_SetPriority>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f06f 0004 	mvn.w	r0, #4
 8003f9e:	f7ff ffcf 	bl	8003f40 <__NVIC_SetPriority>
#endif
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fba:	f06f 0305 	mvn.w	r3, #5
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e00c      	b.n	8003fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <osKernelInitialize+0x44>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <osKernelInitialize+0x44>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e002      	b.n	8003fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fdc:	687b      	ldr	r3, [r7, #4]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000220 	.word	0x20000220

08003ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff6:	f3ef 8305 	mrs	r3, IPSR
 8003ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8003ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004002:	f06f 0305 	mvn.w	r3, #5
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e010      	b.n	800402c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <osKernelStart+0x48>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d109      	bne.n	8004026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004012:	f7ff ffbf 	bl	8003f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <osKernelStart+0x48>)
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800401c:	f001 f8e2 	bl	80051e4 <vTaskStartScheduler>
      stat = osOK;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e002      	b.n	800402c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800402c:	687b      	ldr	r3, [r7, #4]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000220 	.word	0x20000220

0800403c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <vApplicationGetIdleTaskMemory+0x2c>)
 800404c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a06      	ldr	r2, [pc, #24]	; (800406c <vApplicationGetIdleTaskMemory+0x30>)
 8004052:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000224 	.word	0x20000224
 800406c:	20000280 	.word	0x20000280

08004070 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <vApplicationGetTimerTaskMemory+0x2c>)
 8004080:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004086:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800408e:	601a      	str	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000480 	.word	0x20000480
 80040a0:	200004dc 	.word	0x200004dc

080040a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f103 0208 	add.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f103 0208 	add.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d103      	bne.n	8004166 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e00c      	b.n	8004180 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3308      	adds	r3, #8
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <vListInsert+0x2e>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d2f6      	bcs.n	800416e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6852      	ldr	r2, [r2, #4]
 80041d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d103      	bne.n	80041ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004236:	f002 fa75 	bl	8006724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	441a      	add	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	3b01      	subs	r3, #1
 8004268:	68f9      	ldr	r1, [r7, #12]
 800426a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d114      	bne.n	80042b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01a      	beq.n	80042ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3310      	adds	r3, #16
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fa2d 	bl	80056f8 <xTaskRemoveFromEventList>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <xQueueGenericReset+0xcc>)
 80042a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	e009      	b.n	80042ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3310      	adds	r3, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fef2 	bl	80040a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3324      	adds	r3, #36	; 0x24
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff feed 	bl	80040a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042ca:	f002 fa5b 	bl	8006784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	; 0x38
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <xQueueGenericCreateStatic+0x52>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <xQueueGenericCreateStatic+0x56>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xQueueGenericCreateStatic+0x58>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	623b      	str	r3, [r7, #32]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <xQueueGenericCreateStatic+0x7e>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <xQueueGenericCreateStatic+0x82>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueGenericCreateStatic+0x84>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	61fb      	str	r3, [r7, #28]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800437a:	2350      	movs	r3, #80	; 0x50
 800437c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d00a      	beq.n	800439a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	61bb      	str	r3, [r7, #24]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800439a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f83f 	bl	8004440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3730      	adds	r7, #48	; 0x30
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3350      	adds	r3, #80	; 0x50
 8004404:	4618      	mov	r0, r3
 8004406:	f002 faaf 	bl	8006968 <pvPortMalloc>
 800440a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	3350      	adds	r3, #80	; 0x50
 800441a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004424:	79fa      	ldrb	r2, [r7, #7]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f805 	bl	8004440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004436:	69bb      	ldr	r3, [r7, #24]
	}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e002      	b.n	8004462 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800446e:	2101      	movs	r1, #1
 8004470:	69b8      	ldr	r0, [r7, #24]
 8004472:	f7ff fecb 	bl	800420c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueGenericSend+0x32>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <xQueueGenericSend+0x40>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xQueueGenericSend+0x44>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xQueueGenericSend+0x46>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <xQueueGenericSend+0x60>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSend+0x6e>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <xQueueGenericSend+0x72>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericSend+0x74>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xQueueGenericSend+0x8e>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	623b      	str	r3, [r7, #32]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004516:	f001 faad 	bl	8005a74 <xTaskGetSchedulerState>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <xQueueGenericSend+0x9e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <xQueueGenericSend+0xa2>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueGenericSend+0xa4>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xQueueGenericSend+0xbe>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	61fb      	str	r3, [r7, #28]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004546:	f002 f8ed 	bl	8006724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <xQueueGenericSend+0xd4>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d129      	bne.n	80045b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004562:	f000 fb2f 	bl	8004bc4 <prvCopyDataToQueue>
 8004566:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f8bf 	bl	80056f8 <xTaskRemoveFromEventList>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004580:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <xQueueGenericSend+0x1f8>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	e00a      	b.n	80045a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004598:	4b39      	ldr	r3, [pc, #228]	; (8004680 <xQueueGenericSend+0x1f8>)
 800459a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045a8:	f002 f8ec 	bl	8006784 <vPortExitCritical>
				return pdPASS;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e063      	b.n	8004678 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045b6:	f002 f8e5 	bl	8006784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e05c      	b.n	8004678 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f8f9 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045d2:	f002 f8d7 	bl	8006784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045d6:	f000 fe6b 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045da:	f002 f8a3 	bl	8006724 <vPortEnterCritical>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d103      	bne.n	80045f4 <xQueueGenericSend+0x16c>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d103      	bne.n	800460a <xQueueGenericSend+0x182>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800460a:	f002 f8bb 	bl	8006784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800460e:	1d3a      	adds	r2, r7, #4
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f001 f8e8 	bl	80057ec <xTaskCheckForTimeOut>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d124      	bne.n	800466c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004624:	f000 fbc6 	bl	8004db4 <prvIsQueueFull>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	3310      	adds	r3, #16
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f80e 	bl	8005658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800463c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800463e:	f000 fb51 	bl	8004ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004642:	f000 fe43 	bl	80052cc <xTaskResumeAll>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af7c 	bne.w	8004546 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <xQueueGenericSend+0x1f8>)
 8004650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	e772      	b.n	8004546 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004662:	f000 fb3f 	bl	8004ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004666:	f000 fe31 	bl	80052cc <xTaskResumeAll>
 800466a:	e76c      	b.n	8004546 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800466c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800466e:	f000 fb39 	bl	8004ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004672:	f000 fe2b 	bl	80052cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004676:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004678:	4618      	mov	r0, r3
 800467a:	3738      	adds	r7, #56	; 0x38
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b090      	sub	sp, #64	; 0x40
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <xQueueGenericSendFromISR+0x3c>
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <xQueueGenericSendFromISR+0x40>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <xQueueGenericSendFromISR+0x42>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d103      	bne.n	80046ee <xQueueGenericSendFromISR+0x6a>
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <xQueueGenericSendFromISR+0x6e>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueGenericSendFromISR+0x70>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470e:	f002 f8eb 	bl	80068e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004712:	f3ef 8211 	mrs	r2, BASEPRI
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61fa      	str	r2, [r7, #28]
 8004728:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800472a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <xQueueGenericSendFromISR+0xbc>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d12f      	bne.n	80047a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004756:	f000 fa35 	bl	8004bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800475a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d112      	bne.n	800478a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d016      	beq.n	800479a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	4618      	mov	r0, r3
 8004772:	f000 ffc1 	bl	80056f8 <xTaskRemoveFromEventList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e007      	b.n	800479a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800478a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800478e:	3301      	adds	r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	b25a      	sxtb	r2, r3
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800479a:	2301      	movs	r3, #1
 800479c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800479e:	e001      	b.n	80047a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3740      	adds	r7, #64	; 0x40
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	; 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <xQueueReceive+0x30>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	623b      	str	r3, [r7, #32]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <xQueueReceive+0x3e>
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <xQueueReceive+0x42>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueReceive+0x44>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueReceive+0x5e>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	61fb      	str	r3, [r7, #28]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800481a:	f001 f92b 	bl	8005a74 <xTaskGetSchedulerState>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <xQueueReceive+0x6e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <xQueueReceive+0x72>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueReceive+0x74>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueReceive+0x8e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61bb      	str	r3, [r7, #24]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800484a:	f001 ff6b 	bl	8006724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01f      	beq.n	800489a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485e:	f000 fa1b 	bl	8004c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00f      	beq.n	8004892 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	3310      	adds	r3, #16
 8004876:	4618      	mov	r0, r3
 8004878:	f000 ff3e 	bl	80056f8 <xTaskRemoveFromEventList>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004882:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <xQueueReceive+0x1bc>)
 8004884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004892:	f001 ff77 	bl	8006784 <vPortExitCritical>
				return pdPASS;
 8004896:	2301      	movs	r3, #1
 8004898:	e069      	b.n	800496e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048a0:	f001 ff70 	bl	8006784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e062      	b.n	800496e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ae:	f107 0310 	add.w	r3, r7, #16
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff84 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048bc:	f001 ff62 	bl	8006784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048c0:	f000 fcf6 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048c4:	f001 ff2e 	bl	8006724 <vPortEnterCritical>
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d103      	bne.n	80048de <xQueueReceive+0x122>
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d103      	bne.n	80048f4 <xQueueReceive+0x138>
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f4:	f001 ff46 	bl	8006784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f8:	1d3a      	adds	r2, r7, #4
 80048fa:	f107 0310 	add.w	r3, r7, #16
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ff73 	bl	80057ec <xTaskCheckForTimeOut>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d123      	bne.n	8004954 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800490c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490e:	f000 fa3b 	bl	8004d88 <prvIsQueueEmpty>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d017      	beq.n	8004948 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fe99 	bl	8005658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004928:	f000 f9dc 	bl	8004ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800492c:	f000 fcce 	bl	80052cc <xTaskResumeAll>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d189      	bne.n	800484a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <xQueueReceive+0x1bc>)
 8004938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	e780      	b.n	800484a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494a:	f000 f9cb 	bl	8004ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800494e:	f000 fcbd 	bl	80052cc <xTaskResumeAll>
 8004952:	e77a      	b.n	800484a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004956:	f000 f9c5 	bl	8004ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800495a:	f000 fcb7 	bl	80052cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800495e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004960:	f000 fa12 	bl	8004d88 <prvIsQueueEmpty>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	f43f af6f 	beq.w	800484a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800496c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	; 0x38
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800498e:	2300      	movs	r3, #0
 8004990:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	61fb      	str	r3, [r7, #28]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049cc:	f001 f852 	bl	8005a74 <xTaskGetSchedulerState>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <xQueueSemaphoreTake+0x60>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueSemaphoreTake+0x64>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <xQueueSemaphoreTake+0x66>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61bb      	str	r3, [r7, #24]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fc:	f001 fe92 	bl	8006724 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d024      	beq.n	8004a56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a1c:	f001 f9a0 	bl	8005d60 <pvTaskIncrementMutexHeldCount>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	3310      	adds	r3, #16
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fe60 	bl	80056f8 <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a3e:	4b54      	ldr	r3, [pc, #336]	; (8004b90 <xQueueSemaphoreTake+0x214>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a4e:	f001 fe99 	bl	8006784 <vPortExitCritical>
				return pdPASS;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e097      	b.n	8004b86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d111      	bne.n	8004a80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	617b      	str	r3, [r7, #20]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a78:	f001 fe84 	bl	8006784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e082      	b.n	8004b86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a86:	f107 030c 	add.w	r3, r7, #12
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fe98 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a94:	f001 fe76 	bl	8006784 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a98:	f000 fc0a 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a9c:	f001 fe42 	bl	8006724 <vPortEnterCritical>
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d103      	bne.n	8004ab6 <xQueueSemaphoreTake+0x13a>
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d103      	bne.n	8004acc <xQueueSemaphoreTake+0x150>
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004acc:	f001 fe5a 	bl	8006784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	f107 030c 	add.w	r3, r7, #12
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fe87 	bl	80057ec <xTaskCheckForTimeOut>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d132      	bne.n	8004b4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ae6:	f000 f94f 	bl	8004d88 <prvIsQueueEmpty>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d026      	beq.n	8004b3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004af8:	f001 fe14 	bl	8006724 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 ffd5 	bl	8005ab0 <xTaskPriorityInherit>
 8004b06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b08:	f001 fe3c 	bl	8006784 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	3324      	adds	r3, #36	; 0x24
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd9f 	bl	8005658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b1c:	f000 f8e2 	bl	8004ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b20:	f000 fbd4 	bl	80052cc <xTaskResumeAll>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f47f af68 	bne.w	80049fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <xQueueSemaphoreTake+0x214>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	e75e      	b.n	80049fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b40:	f000 f8d0 	bl	8004ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b44:	f000 fbc2 	bl	80052cc <xTaskResumeAll>
 8004b48:	e758      	b.n	80049fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b4c:	f000 f8ca 	bl	8004ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b50:	f000 fbbc 	bl	80052cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b56:	f000 f917 	bl	8004d88 <prvIsQueueEmpty>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f43f af4d 	beq.w	80049fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004b68:	f001 fddc 	bl	8006724 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b6e:	f000 f811 	bl	8004b94 <prvGetDisinheritPriorityAfterTimeout>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f86e 	bl	8005c5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b80:	f001 fe00 	bl	8006784 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3738      	adds	r7, #56	; 0x38
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e001      	b.n	8004bb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d14d      	bne.n	8004c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ffc6 	bl	8005b80 <xTaskPriorityDisinherit>
 8004bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	e043      	b.n	8004c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d119      	bne.n	8004c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6858      	ldr	r0, [r3, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	f002 f8be 	bl	8006d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d32b      	bcc.n	8004c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	e026      	b.n	8004c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68d8      	ldr	r0, [r3, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	461a      	mov	r2, r3
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	f002 f8a4 	bl	8006d90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	425b      	negs	r3, r3
 8004c52:	441a      	add	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d207      	bcs.n	8004c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	425b      	negs	r3, r3
 8004c6e:	441a      	add	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d105      	bne.n	8004c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c8e:	697b      	ldr	r3, [r7, #20]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d018      	beq.n	8004cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d303      	bcc.n	8004ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68d9      	ldr	r1, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6838      	ldr	r0, [r7, #0]
 8004cd8:	f002 f85a 	bl	8006d90 <memcpy>
	}
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cec:	f001 fd1a 	bl	8006724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cf8:	e011      	b.n	8004d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d012      	beq.n	8004d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fcf6 	bl	80056f8 <xTaskRemoveFromEventList>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d12:	f000 fdcd 	bl	80058b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dce9      	bgt.n	8004cfa <prvUnlockQueue+0x16>
 8004d26:	e000      	b.n	8004d2a <prvUnlockQueue+0x46>
					break;
 8004d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d32:	f001 fd27 	bl	8006784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d36:	f001 fcf5 	bl	8006724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d42:	e011      	b.n	8004d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d012      	beq.n	8004d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3310      	adds	r3, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fcd1 	bl	80056f8 <xTaskRemoveFromEventList>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d5c:	f000 fda8 	bl	80058b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d60:	7bbb      	ldrb	r3, [r7, #14]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dce9      	bgt.n	8004d44 <prvUnlockQueue+0x60>
 8004d70:	e000      	b.n	8004d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	22ff      	movs	r2, #255	; 0xff
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d7c:	f001 fd02 	bl	8006784 <vPortExitCritical>
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d90:	f001 fcc8 	bl	8006724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e001      	b.n	8004da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004da6:	f001 fced 	bl	8006784 <vPortExitCritical>

	return xReturn;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dbc:	f001 fcb2 	bl	8006724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d102      	bne.n	8004dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e001      	b.n	8004dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dd6:	f001 fcd5 	bl	8006784 <vPortExitCritical>

	return xReturn;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e014      	b.n	8004e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004df4:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <vQueueAddToRegistry+0x50>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e00:	490c      	ldr	r1, [pc, #48]	; (8004e34 <vQueueAddToRegistry+0x50>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <vQueueAddToRegistry+0x50>)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e16:	e006      	b.n	8004e26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b07      	cmp	r3, #7
 8004e22:	d9e7      	bls.n	8004df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	200008dc 	.word	0x200008dc

08004e38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e48:	f001 fc6c 	bl	8006724 <vPortEnterCritical>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e52:	b25b      	sxtb	r3, r3
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d103      	bne.n	8004e62 <vQueueWaitForMessageRestricted+0x2a>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d103      	bne.n	8004e78 <vQueueWaitForMessageRestricted+0x40>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e78:	f001 fc84 	bl	8006784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fc07 	bl	80056a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff26 	bl	8004ce4 <prvUnlockQueue>
	}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	; 0x38
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <xTaskCreateStatic+0x2a>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	623b      	str	r3, [r7, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61fb      	str	r3, [r7, #28]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ee6:	235c      	movs	r3, #92	; 0x5c
 8004ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b5c      	cmp	r3, #92	; 0x5c
 8004eee:	d00a      	beq.n	8004f06 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01e      	beq.n	8004f4c <xTaskCreateStatic+0xac>
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f26:	2300      	movs	r3, #0
 8004f28:	9303      	str	r3, [sp, #12]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f850 	bl	8004fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f46:	f000 f8dd 	bl	8005104 <prvAddNewTaskToReadyList>
 8004f4a:	e001      	b.n	8004f50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f50:	697b      	ldr	r3, [r7, #20]
	}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08c      	sub	sp, #48	; 0x30
 8004f5e:	af04      	add	r7, sp, #16
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 fcfa 	bl	8006968 <pvPortMalloc>
 8004f74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f7c:	205c      	movs	r0, #92	; 0x5c
 8004f7e:	f001 fcf3 	bl	8006968 <pvPortMalloc>
 8004f82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f90:	e005      	b.n	8004f9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	f001 fdb4 	bl	8006b00 <vPortFree>
 8004f98:	e001      	b.n	8004f9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f80e 	bl	8004fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fc8:	69f8      	ldr	r0, [r7, #28]
 8004fca:	f000 f89b 	bl	8005104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	e002      	b.n	8004fda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fda:	69bb      	ldr	r3, [r7, #24]
	}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	21a5      	movs	r1, #165	; 0xa5
 8004ffe:	f001 fed5 	bl	8006dac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800500c:	3b01      	subs	r3, #1
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	617b      	str	r3, [r7, #20]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01f      	beq.n	8005082 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e012      	b.n	800506e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	7819      	ldrb	r1, [r3, #0]
 8005050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	3334      	adds	r3, #52	; 0x34
 8005058:	460a      	mov	r2, r1
 800505a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	3301      	adds	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2b0f      	cmp	r3, #15
 8005072:	d9e9      	bls.n	8005048 <prvInitialiseNewTask+0x64>
 8005074:	e000      	b.n	8005078 <prvInitialiseNewTask+0x94>
			{
				break;
 8005076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	e003      	b.n	800508a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2b37      	cmp	r3, #55	; 0x37
 800508e:	d901      	bls.n	8005094 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005090:	2337      	movs	r3, #55	; 0x37
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	2200      	movs	r2, #0
 80050a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	3304      	adds	r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f81a 	bl	80040e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	3318      	adds	r3, #24
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff f815 	bl	80040e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	69b8      	ldr	r0, [r7, #24]
 80050e4:	f001 f9f2 	bl	80064cc <pxPortInitialiseStack>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050fa:	bf00      	nop
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800510c:	f001 fb0a 	bl	8006724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005110:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 8005118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800511a:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005122:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005128:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d110      	bne.n	8005152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005130:	f000 fbe2 	bl	80058f8 <prvInitialiseTaskLists>
 8005134:	e00d      	b.n	8005152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <prvAddNewTaskToReadyList+0xcc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800513e:	4b23      	ldr	r3, [pc, #140]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d802      	bhi.n	8005152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <prvAddNewTaskToReadyList+0xd0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <prvAddNewTaskToReadyList+0xd0>)
 800515a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <prvAddNewTaskToReadyList+0xd0>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <prvAddNewTaskToReadyList+0xd4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <prvAddNewTaskToReadyList+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <prvAddNewTaskToReadyList+0xd4>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a15      	ldr	r2, [pc, #84]	; (80051dc <prvAddNewTaskToReadyList+0xd8>)
 8005186:	441a      	add	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe ffb5 	bl	80040fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005194:	f001 faf6 	bl	8006784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <prvAddNewTaskToReadyList+0xcc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d207      	bcs.n	80051be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <prvAddNewTaskToReadyList+0xdc>)
 80051b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000df0 	.word	0x20000df0
 80051cc:	2000091c 	.word	0x2000091c
 80051d0:	20000dfc 	.word	0x20000dfc
 80051d4:	20000e0c 	.word	0x20000e0c
 80051d8:	20000df8 	.word	0x20000df8
 80051dc:	20000920 	.word	0x20000920
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051f2:	463a      	mov	r2, r7
 80051f4:	1d39      	adds	r1, r7, #4
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe ff1e 	bl	800403c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	9202      	str	r2, [sp, #8]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	2300      	movs	r3, #0
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	2300      	movs	r3, #0
 8005210:	460a      	mov	r2, r1
 8005212:	4921      	ldr	r1, [pc, #132]	; (8005298 <vTaskStartScheduler+0xb4>)
 8005214:	4821      	ldr	r0, [pc, #132]	; (800529c <vTaskStartScheduler+0xb8>)
 8005216:	f7ff fe43 	bl	8004ea0 <xTaskCreateStatic>
 800521a:	4603      	mov	r3, r0
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <vTaskStartScheduler+0xbc>)
 800521e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <vTaskStartScheduler+0xbc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e001      	b.n	8005232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d102      	bne.n	800523e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005238:	f000 fdfa 	bl	8005e30 <xTimerCreateTimerTask>
 800523c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d116      	bne.n	8005272 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	613b      	str	r3, [r7, #16]
}
 8005256:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <vTaskStartScheduler+0xc0>)
 800525a:	f04f 32ff 	mov.w	r2, #4294967295
 800525e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <vTaskStartScheduler+0xc4>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <vTaskStartScheduler+0xc8>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800526c:	f001 f9b8 	bl	80065e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005270:	e00e      	b.n	8005290 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d10a      	bne.n	8005290 <vTaskStartScheduler+0xac>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60fb      	str	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vTaskStartScheduler+0xaa>
}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	080076f0 	.word	0x080076f0
 800529c:	080058c9 	.word	0x080058c9
 80052a0:	20000e14 	.word	0x20000e14
 80052a4:	20000e10 	.word	0x20000e10
 80052a8:	20000dfc 	.word	0x20000dfc
 80052ac:	20000df4 	.word	0x20000df4

080052b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <vTaskSuspendAll+0x18>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <vTaskSuspendAll+0x18>)
 80052bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000e18 	.word	0x20000e18

080052cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052da:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <xTaskResumeAll+0x118>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	603b      	str	r3, [r7, #0]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052f8:	f001 fa14 	bl	8006724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052fc:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <xTaskResumeAll+0x118>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <xTaskResumeAll+0x118>)
 8005304:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <xTaskResumeAll+0x118>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d162      	bne.n	80053d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800530e:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <xTaskResumeAll+0x11c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d05e      	beq.n	80053d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005316:	e02f      	b.n	8005378 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005318:	4b34      	ldr	r3, [pc, #208]	; (80053ec <xTaskResumeAll+0x120>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3318      	adds	r3, #24
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe ff47 	bl	80041b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ff42 	bl	80041b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <xTaskResumeAll+0x124>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <xTaskResumeAll+0x7c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <xTaskResumeAll+0x124>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <xTaskResumeAll+0x128>)
 8005356:	441a      	add	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fecd 	bl	80040fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <xTaskResumeAll+0x12c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <xTaskResumeAll+0x130>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005378:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <xTaskResumeAll+0x120>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1cb      	bne.n	8005318 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005386:	f000 fb55 	bl	8005a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <xTaskResumeAll+0x134>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d010      	beq.n	80053b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005396:	f000 f847 	bl	8005428 <xTaskIncrementTick>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053a0:	4b16      	ldr	r3, [pc, #88]	; (80053fc <xTaskResumeAll+0x130>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f1      	bne.n	8005396 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <xTaskResumeAll+0x134>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053b8:	4b10      	ldr	r3, [pc, #64]	; (80053fc <xTaskResumeAll+0x130>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <xTaskResumeAll+0x138>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d4:	f001 f9d6 	bl	8006784 <vPortExitCritical>

	return xAlreadyYielded;
 80053d8:	68bb      	ldr	r3, [r7, #8]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000e18 	.word	0x20000e18
 80053e8:	20000df0 	.word	0x20000df0
 80053ec:	20000db0 	.word	0x20000db0
 80053f0:	20000df8 	.word	0x20000df8
 80053f4:	20000920 	.word	0x20000920
 80053f8:	2000091c 	.word	0x2000091c
 80053fc:	20000e04 	.word	0x20000e04
 8005400:	20000e00 	.word	0x20000e00
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <xTaskGetTickCount+0x1c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005414:	687b      	ldr	r3, [r7, #4]
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000df4 	.word	0x20000df4

08005428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005432:	4b4f      	ldr	r3, [pc, #316]	; (8005570 <xTaskIncrementTick+0x148>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 808f 	bne.w	800555a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800543c:	4b4d      	ldr	r3, [pc, #308]	; (8005574 <xTaskIncrementTick+0x14c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005444:	4a4b      	ldr	r2, [pc, #300]	; (8005574 <xTaskIncrementTick+0x14c>)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d120      	bne.n	8005492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005450:	4b49      	ldr	r3, [pc, #292]	; (8005578 <xTaskIncrementTick+0x150>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <xTaskIncrementTick+0x48>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	603b      	str	r3, [r7, #0]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xTaskIncrementTick+0x46>
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <xTaskIncrementTick+0x150>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <xTaskIncrementTick+0x154>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <xTaskIncrementTick+0x150>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <xTaskIncrementTick+0x154>)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <xTaskIncrementTick+0x158>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	4a3d      	ldr	r2, [pc, #244]	; (8005580 <xTaskIncrementTick+0x158>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	f000 fad1 	bl	8005a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005492:	4b3c      	ldr	r3, [pc, #240]	; (8005584 <xTaskIncrementTick+0x15c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d349      	bcc.n	8005530 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <xTaskIncrementTick+0x150>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a6:	4b37      	ldr	r3, [pc, #220]	; (8005584 <xTaskIncrementTick+0x15c>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	601a      	str	r2, [r3, #0]
					break;
 80054ae:	e03f      	b.n	8005530 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b0:	4b31      	ldr	r3, [pc, #196]	; (8005578 <xTaskIncrementTick+0x150>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d203      	bcs.n	80054d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054c8:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <xTaskIncrementTick+0x15c>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ce:	e02f      	b.n	8005530 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fe6f 	bl	80041b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3318      	adds	r3, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fe66 	bl	80041b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <xTaskIncrementTick+0x160>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d903      	bls.n	8005500 <xTaskIncrementTick+0xd8>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <xTaskIncrementTick+0x160>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <xTaskIncrementTick+0x164>)
 800550e:	441a      	add	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fe fdf1 	bl	80040fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <xTaskIncrementTick+0x168>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	429a      	cmp	r2, r3
 8005528:	d3b8      	bcc.n	800549c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552e:	e7b5      	b.n	800549c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <xTaskIncrementTick+0x168>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4915      	ldr	r1, [pc, #84]	; (800558c <xTaskIncrementTick+0x164>)
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d901      	bls.n	800554c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <xTaskIncrementTick+0x16c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e004      	b.n	8005564 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskIncrementTick+0x170>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <xTaskIncrementTick+0x170>)
 8005562:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000e18 	.word	0x20000e18
 8005574:	20000df4 	.word	0x20000df4
 8005578:	20000da8 	.word	0x20000da8
 800557c:	20000dac 	.word	0x20000dac
 8005580:	20000e08 	.word	0x20000e08
 8005584:	20000e10 	.word	0x20000e10
 8005588:	20000df8 	.word	0x20000df8
 800558c:	20000920 	.word	0x20000920
 8005590:	2000091c 	.word	0x2000091c
 8005594:	20000e04 	.word	0x20000e04
 8005598:	20000e00 	.word	0x20000e00

0800559c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055a2:	4b28      	ldr	r3, [pc, #160]	; (8005644 <vTaskSwitchContext+0xa8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <vTaskSwitchContext+0xac>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055b0:	e041      	b.n	8005636 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80055b2:	4b25      	ldr	r3, [pc, #148]	; (8005648 <vTaskSwitchContext+0xac>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b8:	4b24      	ldr	r3, [pc, #144]	; (800564c <vTaskSwitchContext+0xb0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e010      	b.n	80055e2 <vTaskSwitchContext+0x46>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <vTaskSwitchContext+0x40>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	607b      	str	r3, [r7, #4]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <vTaskSwitchContext+0x3e>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	491b      	ldr	r1, [pc, #108]	; (8005650 <vTaskSwitchContext+0xb4>)
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0e4      	beq.n	80055c0 <vTaskSwitchContext+0x24>
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <vTaskSwitchContext+0xb4>)
 8005602:	4413      	add	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3308      	adds	r3, #8
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <vTaskSwitchContext+0x8a>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a09      	ldr	r2, [pc, #36]	; (8005654 <vTaskSwitchContext+0xb8>)
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	4a06      	ldr	r2, [pc, #24]	; (800564c <vTaskSwitchContext+0xb0>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6013      	str	r3, [r2, #0]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000e18 	.word	0x20000e18
 8005648:	20000e04 	.word	0x20000e04
 800564c:	20000df8 	.word	0x20000df8
 8005650:	20000920 	.word	0x20000920
 8005654:	2000091c 	.word	0x2000091c

08005658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800567e:	4b07      	ldr	r3, [pc, #28]	; (800569c <vTaskPlaceOnEventList+0x44>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3318      	adds	r3, #24
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fe fd5d 	bl	8004146 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800568c:	2101      	movs	r1, #1
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f000 fb7a 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	2000091c 	.word	0x2000091c

080056a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	617b      	str	r3, [r7, #20]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3318      	adds	r3, #24
 80056ce:	4619      	mov	r1, r3
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7fe fd14 	bl	80040fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	68b8      	ldr	r0, [r7, #8]
 80056e6:	f000 fb4f 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
	}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000091c 	.word	0x2000091c

080056f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3318      	adds	r3, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fd45 	bl	80041b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <xTaskRemoveFromEventList+0xb0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11d      	bne.n	8005772 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3304      	adds	r3, #4
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fd3c 	bl	80041b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4b19      	ldr	r3, [pc, #100]	; (80057ac <xTaskRemoveFromEventList+0xb4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d903      	bls.n	8005754 <xTaskRemoveFromEventList+0x5c>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <xTaskRemoveFromEventList+0xb4>)
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <xTaskRemoveFromEventList+0xb8>)
 8005762:	441a      	add	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7fe fcc7 	bl	80040fe <vListInsertEnd>
 8005770:	e005      	b.n	800577e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3318      	adds	r3, #24
 8005776:	4619      	mov	r1, r3
 8005778:	480e      	ldr	r0, [pc, #56]	; (80057b4 <xTaskRemoveFromEventList+0xbc>)
 800577a:	f7fe fcc0 	bl	80040fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <xTaskRemoveFromEventList+0xc0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	429a      	cmp	r2, r3
 800578a:	d905      	bls.n	8005798 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <xTaskRemoveFromEventList+0xc4>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e001      	b.n	800579c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000e18 	.word	0x20000e18
 80057ac:	20000df8 	.word	0x20000df8
 80057b0:	20000920 	.word	0x20000920
 80057b4:	20000db0 	.word	0x20000db0
 80057b8:	2000091c 	.word	0x2000091c
 80057bc:	20000e04 	.word	0x20000e04

080057c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <vTaskInternalSetTimeOutState+0x24>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <vTaskInternalSetTimeOutState+0x28>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000e08 	.word	0x20000e08
 80057e8:	20000df4 	.word	0x20000df4

080057ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	613b      	str	r3, [r7, #16]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800582e:	f000 ff79 	bl	8006724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <xTaskCheckForTimeOut+0xbc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d102      	bne.n	8005852 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e023      	b.n	800589a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <xTaskCheckForTimeOut+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d007      	beq.n	800586e <xTaskCheckForTimeOut+0x82>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e015      	b.n	800589a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	d20b      	bcs.n	8005890 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff9b 	bl	80057c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e004      	b.n	800589a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f000 ff73 	bl	8006784 <vPortExitCritical>

	return xReturn;
 800589e:	69fb      	ldr	r3, [r7, #28]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000df4 	.word	0x20000df4
 80058ac:	20000e08 	.word	0x20000e08

080058b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <vTaskMissedYield+0x14>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000e04 	.word	0x20000e04

080058c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058d0:	f000 f852 	bl	8005978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <prvIdleTask+0x28>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d9f9      	bls.n	80058d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <prvIdleTask+0x2c>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058ec:	e7f0      	b.n	80058d0 <prvIdleTask+0x8>
 80058ee:	bf00      	nop
 80058f0:	20000920 	.word	0x20000920
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	e00c      	b.n	800591e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <prvInitialiseTaskLists+0x60>)
 8005910:	4413      	add	r3, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fbc6 	bl	80040a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3301      	adds	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b37      	cmp	r3, #55	; 0x37
 8005922:	d9ef      	bls.n	8005904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <prvInitialiseTaskLists+0x64>)
 8005926:	f7fe fbbd 	bl	80040a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800592a:	480d      	ldr	r0, [pc, #52]	; (8005960 <prvInitialiseTaskLists+0x68>)
 800592c:	f7fe fbba 	bl	80040a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005930:	480c      	ldr	r0, [pc, #48]	; (8005964 <prvInitialiseTaskLists+0x6c>)
 8005932:	f7fe fbb7 	bl	80040a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005936:	480c      	ldr	r0, [pc, #48]	; (8005968 <prvInitialiseTaskLists+0x70>)
 8005938:	f7fe fbb4 	bl	80040a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800593c:	480b      	ldr	r0, [pc, #44]	; (800596c <prvInitialiseTaskLists+0x74>)
 800593e:	f7fe fbb1 	bl	80040a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <prvInitialiseTaskLists+0x78>)
 8005944:	4a05      	ldr	r2, [pc, #20]	; (800595c <prvInitialiseTaskLists+0x64>)
 8005946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <prvInitialiseTaskLists+0x7c>)
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <prvInitialiseTaskLists+0x68>)
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000920 	.word	0x20000920
 800595c:	20000d80 	.word	0x20000d80
 8005960:	20000d94 	.word	0x20000d94
 8005964:	20000db0 	.word	0x20000db0
 8005968:	20000dc4 	.word	0x20000dc4
 800596c:	20000ddc 	.word	0x20000ddc
 8005970:	20000da8 	.word	0x20000da8
 8005974:	20000dac 	.word	0x20000dac

08005978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800597e:	e019      	b.n	80059b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005980:	f000 fed0 	bl	8006724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005984:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <prvCheckTasksWaitingTermination+0x50>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fc11 	bl	80041b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <prvCheckTasksWaitingTermination+0x54>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <prvCheckTasksWaitingTermination+0x54>)
 800599e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059aa:	f000 feeb 	bl	8006784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f810 	bl	80059d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e1      	bne.n	8005980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000dc4 	.word	0x20000dc4
 80059cc:	20000df0 	.word	0x20000df0
 80059d0:	20000dd8 	.word	0x20000dd8

080059d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 f888 	bl	8006b00 <vPortFree>
				vPortFree( pxTCB );
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f885 	bl	8006b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059f6:	e018      	b.n	8005a2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d103      	bne.n	8005a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 f87c 	bl	8006b00 <vPortFree>
	}
 8005a08:	e00f      	b.n	8005a2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d00a      	beq.n	8005a2a <prvDeleteTCB+0x56>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <prvDeleteTCB+0x54>
	}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <prvResetNextTaskUnblockTime+0x38>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <prvResetNextTaskUnblockTime+0x3c>)
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a4c:	e008      	b.n	8005a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <prvResetNextTaskUnblockTime+0x38>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <prvResetNextTaskUnblockTime+0x3c>)
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000da8 	.word	0x20000da8
 8005a70:	20000e10 	.word	0x20000e10

08005a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <xTaskGetSchedulerState+0x34>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a82:	2301      	movs	r3, #1
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	e008      	b.n	8005a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <xTaskGetSchedulerState+0x38>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a90:	2302      	movs	r3, #2
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	e001      	b.n	8005a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a9a:	687b      	ldr	r3, [r7, #4]
	}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	20000dfc 	.word	0x20000dfc
 8005aac:	20000e18 	.word	0x20000e18

08005ab0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d051      	beq.n	8005b6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <xTaskPriorityInherit+0xc4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d241      	bcs.n	8005b58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db06      	blt.n	8005aea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005adc:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <xTaskPriorityInherit+0xc4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <xTaskPriorityInherit+0xc8>)
 8005afc:	4413      	add	r3, r2
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d122      	bne.n	8005b48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe fb56 	bl	80041b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <xTaskPriorityInherit+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4b18      	ldr	r3, [pc, #96]	; (8005b7c <xTaskPriorityInherit+0xcc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <xTaskPriorityInherit+0x7a>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <xTaskPriorityInherit+0xcc>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <xTaskPriorityInherit+0xc8>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe fadc 	bl	80040fe <vListInsertEnd>
 8005b46:	e004      	b.n	8005b52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <xTaskPriorityInherit+0xc4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e008      	b.n	8005b6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <xTaskPriorityInherit+0xc4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d201      	bcs.n	8005b6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	2000091c 	.word	0x2000091c
 8005b78:	20000920 	.word	0x20000920
 8005b7c:	20000df8 	.word	0x20000df8

08005b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d056      	beq.n	8005c44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <xTaskPriorityDisinherit+0xd0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d00a      	beq.n	8005bb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	1e5a      	subs	r2, r3, #1
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d02c      	beq.n	8005c44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d128      	bne.n	8005c44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe fade 	bl	80041b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <xTaskPriorityDisinherit+0xd4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <xTaskPriorityDisinherit+0xa4>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a0c      	ldr	r2, [pc, #48]	; (8005c54 <xTaskPriorityDisinherit+0xd4>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <xTaskPriorityDisinherit+0xd8>)
 8005c32:	441a      	add	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fe fa5f 	bl	80040fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c44:	697b      	ldr	r3, [r7, #20]
	}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	2000091c 	.word	0x2000091c
 8005c54:	20000df8 	.word	0x20000df8
 8005c58:	20000920 	.word	0x20000920

08005c5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d06a      	beq.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d902      	bls.n	8005ca2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e002      	b.n	8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d04b      	beq.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d146      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d10a      	bne.n	8005cdc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60bb      	str	r3, [r7, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db04      	blt.n	8005cfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6959      	ldr	r1, [r3, #20]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005d0a:	4413      	add	r3, r2
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	d11c      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe fa4f 	bl	80041b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d903      	bls.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	; (8005d5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005d3c:	441a      	add	r2, r3
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fe f9da 	bl	80040fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d4a:	bf00      	nop
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000091c 	.word	0x2000091c
 8005d58:	20000920 	.word	0x20000920
 8005d5c:	20000df8 	.word	0x20000df8

08005d60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d72:	3201      	adds	r2, #1
 8005d74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005d76:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d78:	681b      	ldr	r3, [r3, #0]
	}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	2000091c 	.word	0x2000091c

08005d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fa0a 	bl	80041b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d10a      	bne.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4819      	ldr	r0, [pc, #100]	; (8005e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dbc:	f7fe f99f 	bl	80040fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dc0:	e026      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d209      	bcs.n	8005dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe f9ad 	bl	8004146 <vListInsert>
}
 8005dec:	e010      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe f9a3 	bl	8004146 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d202      	bcs.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000df4 	.word	0x20000df4
 8005e1c:	2000091c 	.word	0x2000091c
 8005e20:	20000ddc 	.word	0x20000ddc
 8005e24:	20000dac 	.word	0x20000dac
 8005e28:	20000da8 	.word	0x20000da8
 8005e2c:	20000e10 	.word	0x20000e10

08005e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e3a:	f000 fb07 	bl	800644c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <xTimerCreateTimerTask+0x80>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d021      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e4e:	1d3a      	adds	r2, r7, #4
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f909 	bl	8004070 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	460a      	mov	r2, r1
 8005e70:	4910      	ldr	r1, [pc, #64]	; (8005eb4 <xTimerCreateTimerTask+0x84>)
 8005e72:	4811      	ldr	r0, [pc, #68]	; (8005eb8 <xTimerCreateTimerTask+0x88>)
 8005e74:	f7ff f814 	bl	8004ea0 <xTaskCreateStatic>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <xTimerCreateTimerTask+0x8c>)
 8005e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <xTimerCreateTimerTask+0x8c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e86:	2301      	movs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000e4c 	.word	0x20000e4c
 8005eb4:	080076f8 	.word	0x080076f8
 8005eb8:	08005ff5 	.word	0x08005ff5
 8005ebc:	20000e50 	.word	0x20000e50

08005ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	; 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	623b      	str	r3, [r7, #32]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eee:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <xTimerGenericCommand+0x98>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d02a      	beq.n	8005f4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	dc18      	bgt.n	8005f3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f08:	f7ff fdb4 	bl	8005a74 <xTaskGetSchedulerState>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d109      	bne.n	8005f26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <xTimerGenericCommand+0x98>)
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f107 0110 	add.w	r1, r7, #16
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1e:	f7fe fab3 	bl	8004488 <xQueueGenericSend>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24
 8005f24:	e012      	b.n	8005f4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <xTimerGenericCommand+0x98>)
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f107 0110 	add.w	r1, r7, #16
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2200      	movs	r2, #0
 8005f32:	f7fe faa9 	bl	8004488 <xQueueGenericSend>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24
 8005f38:	e008      	b.n	8005f4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <xTimerGenericCommand+0x98>)
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	f107 0110 	add.w	r1, r7, #16
 8005f42:	2300      	movs	r3, #0
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	f7fe fb9d 	bl	8004684 <xQueueGenericSendFromISR>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3728      	adds	r7, #40	; 0x28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000e4c 	.word	0x20000e4c

08005f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f66:	4b22      	ldr	r3, [pc, #136]	; (8005ff0 <prvProcessExpiredTimer+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe f91f 	bl	80041b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d022      	beq.n	8005fce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	18d1      	adds	r1, r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6978      	ldr	r0, [r7, #20]
 8005f96:	f000 f8d1 	bl	800613c <prvInsertTimerInActiveList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01f      	beq.n	8005fe0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7ff ff88 	bl	8005ec0 <xTimerGenericCommand>
 8005fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d113      	bne.n	8005fe0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	6978      	ldr	r0, [r7, #20]
 8005fe6:	4798      	blx	r3
}
 8005fe8:	bf00      	nop
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000e44 	.word	0x20000e44

08005ff4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ffc:	f107 0308 	add.w	r3, r7, #8
 8006000:	4618      	mov	r0, r3
 8006002:	f000 f857 	bl	80060b4 <prvGetNextExpireTime>
 8006006:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4619      	mov	r1, r3
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f803 	bl	8006018 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006012:	f000 f8d5 	bl	80061c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006016:	e7f1      	b.n	8005ffc <prvTimerTask+0x8>

08006018 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006022:	f7ff f945 	bl	80052b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f866 	bl	80060fc <prvSampleTimeNow>
 8006030:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d130      	bne.n	800609a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <prvProcessTimerOrBlockTask+0x3c>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	429a      	cmp	r2, r3
 8006044:	d806      	bhi.n	8006054 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006046:	f7ff f941 	bl	80052cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff ff85 	bl	8005f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006052:	e024      	b.n	800609e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <prvProcessTimerOrBlockTask+0x90>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <prvProcessTimerOrBlockTask+0x50>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <prvProcessTimerOrBlockTask+0x52>
 8006068:	2300      	movs	r3, #0
 800606a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <prvProcessTimerOrBlockTask+0x94>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	f7fe fedd 	bl	8004e38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800607e:	f7ff f925 	bl	80052cc <xTaskResumeAll>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006088:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <prvProcessTimerOrBlockTask+0x98>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
}
 8006098:	e001      	b.n	800609e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800609a:	f7ff f917 	bl	80052cc <xTaskResumeAll>
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000e48 	.word	0x20000e48
 80060ac:	20000e4c 	.word	0x20000e4c
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060bc:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <prvGetNextExpireTime+0x44>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <prvGetNextExpireTime+0x16>
 80060c6:	2201      	movs	r2, #1
 80060c8:	e000      	b.n	80060cc <prvGetNextExpireTime+0x18>
 80060ca:	2200      	movs	r2, #0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <prvGetNextExpireTime+0x44>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e001      	b.n	80060e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060e8:	68fb      	ldr	r3, [r7, #12]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000e44 	.word	0x20000e44

080060fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006104:	f7ff f980 	bl	8005408 <xTaskGetTickCount>
 8006108:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <prvSampleTimeNow+0x3c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	429a      	cmp	r2, r3
 8006112:	d205      	bcs.n	8006120 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006114:	f000 f936 	bl	8006384 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e002      	b.n	8006126 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006126:	4a04      	ldr	r2, [pc, #16]	; (8006138 <prvSampleTimeNow+0x3c>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000e54 	.word	0x20000e54

0800613c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d812      	bhi.n	8006188 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e01b      	b.n	80061ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006176:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <prvInsertTimerInActiveList+0x7c>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7fd ffe0 	bl	8004146 <vListInsert>
 8006186:	e012      	b.n	80061ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d206      	bcs.n	800619e <prvInsertTimerInActiveList+0x62>
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d302      	bcc.n	800619e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e007      	b.n	80061ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <prvInsertTimerInActiveList+0x80>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f7fd ffcc 	bl	8004146 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061ae:	697b      	ldr	r3, [r7, #20]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000e48 	.word	0x20000e48
 80061bc:	20000e44 	.word	0x20000e44

080061c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08e      	sub	sp, #56	; 0x38
 80061c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061c6:	e0ca      	b.n	800635e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	da18      	bge.n	8006200 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061ce:	1d3b      	adds	r3, r7, #4
 80061d0:	3304      	adds	r3, #4
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	61fb      	str	r3, [r7, #28]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f6:	6850      	ldr	r0, [r2, #4]
 80061f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fa:	6892      	ldr	r2, [r2, #8]
 80061fc:	4611      	mov	r1, r2
 80061fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f2c0 80aa 	blt.w	800635c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	3304      	adds	r3, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f7fd ffcd 	bl	80041b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800621e:	463b      	mov	r3, r7
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ff6b 	bl	80060fc <prvSampleTimeNow>
 8006226:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b09      	cmp	r3, #9
 800622c:	f200 8097 	bhi.w	800635e <prvProcessReceivedCommands+0x19e>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <prvProcessReceivedCommands+0x78>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	08006261 	.word	0x08006261
 800623c:	08006261 	.word	0x08006261
 8006240:	08006261 	.word	0x08006261
 8006244:	080062d5 	.word	0x080062d5
 8006248:	080062e9 	.word	0x080062e9
 800624c:	08006333 	.word	0x08006333
 8006250:	08006261 	.word	0x08006261
 8006254:	08006261 	.word	0x08006261
 8006258:	080062d5 	.word	0x080062d5
 800625c:	080062e9 	.word	0x080062e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	b2da      	uxtb	r2, r3
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	18d1      	adds	r1, r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006280:	f7ff ff5c 	bl	800613c <prvInsertTimerInActiveList>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d069      	beq.n	800635e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006290:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d05e      	beq.n	800635e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	441a      	add	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2300      	movs	r3, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b2:	f7ff fe05 	bl	8005ec0 <xTimerGenericCommand>
 80062b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d14f      	bne.n	800635e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	61bb      	str	r3, [r7, #24]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062e6:	e03a      	b.n	800635e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	617b      	str	r3, [r7, #20]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	18d1      	adds	r1, r2, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632c:	f7ff ff06 	bl	800613c <prvInsertTimerInActiveList>
					break;
 8006330:	e015      	b.n	800635e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006342:	f000 fbdd 	bl	8006b00 <vPortFree>
 8006346:	e00a      	b.n	800635e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800635a:	e000      	b.n	800635e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800635c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800635e:	4b08      	ldr	r3, [pc, #32]	; (8006380 <prvProcessReceivedCommands+0x1c0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	1d39      	adds	r1, r7, #4
 8006364:	2200      	movs	r2, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fa28 	bl	80047bc <xQueueReceive>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	f47f af2a 	bne.w	80061c8 <prvProcessReceivedCommands+0x8>
	}
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	3730      	adds	r7, #48	; 0x30
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000e4c 	.word	0x20000e4c

08006384 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800638a:	e048      	b.n	800641e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638c:	4b2d      	ldr	r3, [pc, #180]	; (8006444 <prvSwitchTimerLists+0xc0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <prvSwitchTimerLists+0xc0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fd ff07 	bl	80041b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02e      	beq.n	800641e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4413      	add	r3, r2
 80063c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d90e      	bls.n	80063f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063de:	4b19      	ldr	r3, [pc, #100]	; (8006444 <prvSwitchTimerLists+0xc0>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7fd feac 	bl	8004146 <vListInsert>
 80063ee:	e016      	b.n	800641e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	2100      	movs	r1, #0
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fd60 	bl	8005ec0 <xTimerGenericCommand>
 8006400:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	603b      	str	r3, [r7, #0]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <prvSwitchTimerLists+0xc0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1b1      	bne.n	800638c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <prvSwitchTimerLists+0xc0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <prvSwitchTimerLists+0xc4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a04      	ldr	r2, [pc, #16]	; (8006444 <prvSwitchTimerLists+0xc0>)
 8006434:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006436:	4a04      	ldr	r2, [pc, #16]	; (8006448 <prvSwitchTimerLists+0xc4>)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000e44 	.word	0x20000e44
 8006448:	20000e48 	.word	0x20000e48

0800644c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006452:	f000 f967 	bl	8006724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006456:	4b15      	ldr	r3, [pc, #84]	; (80064ac <prvCheckForValidListAndQueue+0x60>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d120      	bne.n	80064a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800645e:	4814      	ldr	r0, [pc, #80]	; (80064b0 <prvCheckForValidListAndQueue+0x64>)
 8006460:	f7fd fe20 	bl	80040a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006464:	4813      	ldr	r0, [pc, #76]	; (80064b4 <prvCheckForValidListAndQueue+0x68>)
 8006466:	f7fd fe1d 	bl	80040a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <prvCheckForValidListAndQueue+0x6c>)
 800646c:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <prvCheckForValidListAndQueue+0x64>)
 800646e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006470:	4b12      	ldr	r3, [pc, #72]	; (80064bc <prvCheckForValidListAndQueue+0x70>)
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <prvCheckForValidListAndQueue+0x68>)
 8006474:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <prvCheckForValidListAndQueue+0x74>)
 800647c:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <prvCheckForValidListAndQueue+0x78>)
 800647e:	2110      	movs	r1, #16
 8006480:	200a      	movs	r0, #10
 8006482:	f7fd ff2b 	bl	80042dc <xQueueGenericCreateStatic>
 8006486:	4603      	mov	r3, r0
 8006488:	4a08      	ldr	r2, [pc, #32]	; (80064ac <prvCheckForValidListAndQueue+0x60>)
 800648a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <prvCheckForValidListAndQueue+0x60>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <prvCheckForValidListAndQueue+0x60>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	490b      	ldr	r1, [pc, #44]	; (80064c8 <prvCheckForValidListAndQueue+0x7c>)
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fca2 	bl	8004de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a0:	f000 f970 	bl	8006784 <vPortExitCritical>
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000e4c 	.word	0x20000e4c
 80064b0:	20000e1c 	.word	0x20000e1c
 80064b4:	20000e30 	.word	0x20000e30
 80064b8:	20000e44 	.word	0x20000e44
 80064bc:	20000e48 	.word	0x20000e48
 80064c0:	20000ef8 	.word	0x20000ef8
 80064c4:	20000e58 	.word	0x20000e58
 80064c8:	08007700 	.word	0x08007700

080064cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b04      	subs	r3, #4
 80064dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3b04      	subs	r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064fc:	4a0c      	ldr	r2, [pc, #48]	; (8006530 <pxPortInitialiseStack+0x64>)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3b14      	subs	r3, #20
 8006506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3b04      	subs	r3, #4
 8006512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f06f 0202 	mvn.w	r2, #2
 800651a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3b20      	subs	r3, #32
 8006520:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	08006535 	.word	0x08006535

08006534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <prvTaskExitError+0x54>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d00a      	beq.n	800655e <prvTaskExitError+0x2a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <prvTaskExitError+0x28>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60bb      	str	r3, [r7, #8]
}
 8006570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006572:	bf00      	nop
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0fc      	beq.n	8006574 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20000010 	.word	0x20000010
 800658c:	00000000 	.word	0x00000000

08006590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <pxCurrentTCBConst2>)
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	6808      	ldr	r0, [r1, #0]
 8006596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	f380 8809 	msr	PSP, r0
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8811 	msr	BASEPRI, r0
 80065aa:	4770      	bx	lr
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst2>:
 80065b0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065b8:	4808      	ldr	r0, [pc, #32]	; (80065dc <prvPortStartFirstTask+0x24>)
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	f380 8808 	msr	MSP, r0
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8814 	msr	CONTROL, r0
 80065ca:	b662      	cpsie	i
 80065cc:	b661      	cpsie	f
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	df00      	svc	0
 80065d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065da:	bf00      	nop
 80065dc:	e000ed08 	.word	0xe000ed08

080065e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065e6:	4b46      	ldr	r3, [pc, #280]	; (8006700 <xPortStartScheduler+0x120>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a46      	ldr	r2, [pc, #280]	; (8006704 <xPortStartScheduler+0x124>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10a      	bne.n	8006606 <xPortStartScheduler+0x26>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	613b      	str	r3, [r7, #16]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006606:	4b3e      	ldr	r3, [pc, #248]	; (8006700 <xPortStartScheduler+0x120>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a3f      	ldr	r2, [pc, #252]	; (8006708 <xPortStartScheduler+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10a      	bne.n	8006626 <xPortStartScheduler+0x46>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006626:	4b39      	ldr	r3, [pc, #228]	; (800670c <xPortStartScheduler+0x12c>)
 8006628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006648:	b2da      	uxtb	r2, r3
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <xPortStartScheduler+0x130>)
 800664c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800664e:	4b31      	ldr	r3, [pc, #196]	; (8006714 <xPortStartScheduler+0x134>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006654:	e009      	b.n	800666a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006656:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <xPortStartScheduler+0x134>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <xPortStartScheduler+0x134>)
 800665e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b80      	cmp	r3, #128	; 0x80
 8006674:	d0ef      	beq.n	8006656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <xPortStartScheduler+0x134>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1c3 0307 	rsb	r3, r3, #7
 800667e:	2b04      	cmp	r3, #4
 8006680:	d00a      	beq.n	8006698 <xPortStartScheduler+0xb8>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60bb      	str	r3, [r7, #8]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006698:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <xPortStartScheduler+0x134>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <xPortStartScheduler+0x134>)
 80066a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066a2:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <xPortStartScheduler+0x134>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066aa:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <xPortStartScheduler+0x134>)
 80066ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <xPortStartScheduler+0x138>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a17      	ldr	r2, [pc, #92]	; (8006718 <xPortStartScheduler+0x138>)
 80066bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <xPortStartScheduler+0x138>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a14      	ldr	r2, [pc, #80]	; (8006718 <xPortStartScheduler+0x138>)
 80066c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066ce:	f000 f8dd 	bl	800688c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <xPortStartScheduler+0x13c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066d8:	f000 f8fc 	bl	80068d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066dc:	4b10      	ldr	r3, [pc, #64]	; (8006720 <xPortStartScheduler+0x140>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0f      	ldr	r2, [pc, #60]	; (8006720 <xPortStartScheduler+0x140>)
 80066e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066e8:	f7ff ff66 	bl	80065b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066ec:	f7fe ff56 	bl	800559c <vTaskSwitchContext>
	prvTaskExitError();
 80066f0:	f7ff ff20 	bl	8006534 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	e000ed00 	.word	0xe000ed00
 8006704:	410fc271 	.word	0x410fc271
 8006708:	410fc270 	.word	0x410fc270
 800670c:	e000e400 	.word	0xe000e400
 8006710:	20000f48 	.word	0x20000f48
 8006714:	20000f4c 	.word	0x20000f4c
 8006718:	e000ed20 	.word	0xe000ed20
 800671c:	20000010 	.word	0x20000010
 8006720:	e000ef34 	.word	0xe000ef34

08006724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	607b      	str	r3, [r7, #4]
}
 800673c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <vPortEnterCritical+0x58>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3301      	adds	r3, #1
 8006744:	4a0d      	ldr	r2, [pc, #52]	; (800677c <vPortEnterCritical+0x58>)
 8006746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <vPortEnterCritical+0x58>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d10f      	bne.n	8006770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortEnterCritical+0x5c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <vPortEnterCritical+0x4c>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	603b      	str	r3, [r7, #0]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <vPortEnterCritical+0x4a>
	}
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000010 	.word	0x20000010
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800678a:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <vPortExitCritical+0x50>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <vPortExitCritical+0x24>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	607b      	str	r3, [r7, #4]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <vPortExitCritical+0x50>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <vPortExitCritical+0x50>)
 80067b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <vPortExitCritical+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <vPortExitCritical+0x42>
 80067ba:	2300      	movs	r3, #0
 80067bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f383 8811 	msr	BASEPRI, r3
}
 80067c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000010 	.word	0x20000010
	...

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f01e 0f10 	tst.w	lr, #16
 80067f0:	bf08      	it	eq
 80067f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006804:	f380 8811 	msr	BASEPRI, r0
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f7fe fec4 	bl	800559c <vTaskSwitchContext>
 8006814:	f04f 0000 	mov.w	r0, #0
 8006818:	f380 8811 	msr	BASEPRI, r0
 800681c:	bc09      	pop	{r0, r3}
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	6808      	ldr	r0, [r1, #0]
 8006822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006826:	f01e 0f10 	tst.w	lr, #16
 800682a:	bf08      	it	eq
 800682c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006830:	f380 8809 	msr	PSP, r0
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst>:
 8006840:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	607b      	str	r3, [r7, #4]
}
 8006860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006862:	f7fe fde1 	bl	8005428 <xTaskIncrementTick>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <xPortSysTickHandler+0x40>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortSetupTimerInterrupt+0x34>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <vPortSetupTimerInterrupt+0x38>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <vPortSetupTimerInterrupt+0x3c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <vPortSetupTimerInterrupt+0x40>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <vPortSetupTimerInterrupt+0x44>)
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <vPortSetupTimerInterrupt+0x34>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010
 80068c4:	e000e018 	.word	0xe000e018
 80068c8:	20000004 	.word	0x20000004
 80068cc:	10624dd3 	.word	0x10624dd3
 80068d0:	e000e014 	.word	0xe000e014

080068d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068e4 <vPortEnableVFP+0x10>
 80068d8:	6801      	ldr	r1, [r0, #0]
 80068da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068de:	6001      	str	r1, [r0, #0]
 80068e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068e2:	bf00      	nop
 80068e4:	e000ed88 	.word	0xe000ed88

080068e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068ee:	f3ef 8305 	mrs	r3, IPSR
 80068f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d914      	bls.n	8006924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <vPortValidateInterruptPriority+0x70>)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <vPortValidateInterruptPriority+0x74>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	7afa      	ldrb	r2, [r7, #11]
 800690a:	429a      	cmp	r2, r3
 800690c:	d20a      	bcs.n	8006924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <vPortValidateInterruptPriority+0x78>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <vPortValidateInterruptPriority+0x7c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d90a      	bls.n	800694a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	603b      	str	r3, [r7, #0]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <vPortValidateInterruptPriority+0x60>
	}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	e000e3f0 	.word	0xe000e3f0
 800695c:	20000f48 	.word	0x20000f48
 8006960:	e000ed0c 	.word	0xe000ed0c
 8006964:	20000f4c 	.word	0x20000f4c

08006968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006974:	f7fe fc9c 	bl	80052b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006978:	4b5b      	ldr	r3, [pc, #364]	; (8006ae8 <pvPortMalloc+0x180>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006980:	f000 f920 	bl	8006bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <pvPortMalloc+0x184>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8093 	bne.w	8006ab8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01d      	beq.n	80069d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006998:	2208      	movs	r2, #8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d014      	beq.n	80069d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f023 0307 	bic.w	r3, r3, #7
 80069b0:	3308      	adds	r3, #8
 80069b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <pvPortMalloc+0x6c>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	617b      	str	r3, [r7, #20]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d06e      	beq.n	8006ab8 <pvPortMalloc+0x150>
 80069da:	4b45      	ldr	r3, [pc, #276]	; (8006af0 <pvPortMalloc+0x188>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d869      	bhi.n	8006ab8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069e4:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <pvPortMalloc+0x18c>)
 80069e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <pvPortMalloc+0x18c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ee:	e004      	b.n	80069fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d903      	bls.n	8006a0c <pvPortMalloc+0xa4>
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f1      	bne.n	80069f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <pvPortMalloc+0x180>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d050      	beq.n	8006ab8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	4413      	add	r3, r2
 8006a1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	2308      	movs	r3, #8
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d91f      	bls.n	8006a78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <pvPortMalloc+0xf8>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	613b      	str	r3, [r7, #16]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a72:	69b8      	ldr	r0, [r7, #24]
 8006a74:	f000 f908 	bl	8006c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <pvPortMalloc+0x188>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <pvPortMalloc+0x188>)
 8006a84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a86:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <pvPortMalloc+0x188>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <pvPortMalloc+0x190>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d203      	bcs.n	8006a9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <pvPortMalloc+0x188>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <pvPortMalloc+0x190>)
 8006a98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <pvPortMalloc+0x184>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <pvPortMalloc+0x194>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <pvPortMalloc+0x194>)
 8006ab6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ab8:	f7fe fc08 	bl	80052cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <pvPortMalloc+0x174>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	60fb      	str	r3, [r7, #12]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <pvPortMalloc+0x172>
	return pvReturn;
 8006adc:	69fb      	ldr	r3, [r7, #28]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3728      	adds	r7, #40	; 0x28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20004b58 	.word	0x20004b58
 8006aec:	20004b6c 	.word	0x20004b6c
 8006af0:	20004b5c 	.word	0x20004b5c
 8006af4:	20004b50 	.word	0x20004b50
 8006af8:	20004b60 	.word	0x20004b60
 8006afc:	20004b64 	.word	0x20004b64

08006b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d04d      	beq.n	8006bae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b12:	2308      	movs	r3, #8
 8006b14:	425b      	negs	r3, r3
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <vPortFree+0xb8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <vPortFree+0x44>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60fb      	str	r3, [r7, #12]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <vPortFree+0x62>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60bb      	str	r3, [r7, #8]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <vPortFree+0xb8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01e      	beq.n	8006bae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11a      	bne.n	8006bae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <vPortFree+0xb8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	401a      	ands	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b88:	f7fe fb92 	bl	80052b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <vPortFree+0xbc>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <vPortFree+0xbc>)
 8006b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f000 f874 	bl	8006c88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ba0:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <vPortFree+0xc0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a06      	ldr	r2, [pc, #24]	; (8006bc0 <vPortFree+0xc0>)
 8006ba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006baa:	f7fe fb8f 	bl	80052cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20004b6c 	.word	0x20004b6c
 8006bbc:	20004b5c 	.word	0x20004b5c
 8006bc0:	20004b68 	.word	0x20004b68

08006bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bd0:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <prvHeapInit+0xac>)
 8006bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00c      	beq.n	8006bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3307      	adds	r3, #7
 8006be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0307 	bic.w	r3, r3, #7
 8006bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <prvHeapInit+0xac>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <prvHeapInit+0xb0>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <prvHeapInit+0xb0>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c10:	2208      	movs	r2, #8
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0307 	bic.w	r3, r3, #7
 8006c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <prvHeapInit+0xb4>)
 8006c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <prvHeapInit+0xb4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <prvHeapInit+0xb4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <prvHeapInit+0xb4>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <prvHeapInit+0xb8>)
 8006c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <prvHeapInit+0xbc>)
 8006c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <prvHeapInit+0xc0>)
 8006c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	20000f50 	.word	0x20000f50
 8006c74:	20004b50 	.word	0x20004b50
 8006c78:	20004b58 	.word	0x20004b58
 8006c7c:	20004b60 	.word	0x20004b60
 8006c80:	20004b5c 	.word	0x20004b5c
 8006c84:	20004b6c 	.word	0x20004b6c

08006c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <prvInsertBlockIntoFreeList+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e002      	b.n	8006c9c <prvInsertBlockIntoFreeList+0x14>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d8f7      	bhi.n	8006c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d108      	bne.n	8006cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	441a      	add	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d118      	bne.n	8006d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d00d      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e008      	b.n	8006d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d06:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <prvInsertBlockIntoFreeList+0xb0>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e003      	b.n	8006d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d002      	beq.n	8006d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20004b50 	.word	0x20004b50
 8006d38:	20004b58 	.word	0x20004b58

08006d3c <__errno>:
 8006d3c:	4b01      	ldr	r3, [pc, #4]	; (8006d44 <__errno+0x8>)
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000014 	.word	0x20000014

08006d48 <__libc_init_array>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4d0d      	ldr	r5, [pc, #52]	; (8006d80 <__libc_init_array+0x38>)
 8006d4c:	4c0d      	ldr	r4, [pc, #52]	; (8006d84 <__libc_init_array+0x3c>)
 8006d4e:	1b64      	subs	r4, r4, r5
 8006d50:	10a4      	asrs	r4, r4, #2
 8006d52:	2600      	movs	r6, #0
 8006d54:	42a6      	cmp	r6, r4
 8006d56:	d109      	bne.n	8006d6c <__libc_init_array+0x24>
 8006d58:	4d0b      	ldr	r5, [pc, #44]	; (8006d88 <__libc_init_array+0x40>)
 8006d5a:	4c0c      	ldr	r4, [pc, #48]	; (8006d8c <__libc_init_array+0x44>)
 8006d5c:	f000 fc8e 	bl	800767c <_init>
 8006d60:	1b64      	subs	r4, r4, r5
 8006d62:	10a4      	asrs	r4, r4, #2
 8006d64:	2600      	movs	r6, #0
 8006d66:	42a6      	cmp	r6, r4
 8006d68:	d105      	bne.n	8006d76 <__libc_init_array+0x2e>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d70:	4798      	blx	r3
 8006d72:	3601      	adds	r6, #1
 8006d74:	e7ee      	b.n	8006d54 <__libc_init_array+0xc>
 8006d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7a:	4798      	blx	r3
 8006d7c:	3601      	adds	r6, #1
 8006d7e:	e7f2      	b.n	8006d66 <__libc_init_array+0x1e>
 8006d80:	08007a4c 	.word	0x08007a4c
 8006d84:	08007a4c 	.word	0x08007a4c
 8006d88:	08007a4c 	.word	0x08007a4c
 8006d8c:	08007a50 	.word	0x08007a50

08006d90 <memcpy>:
 8006d90:	440a      	add	r2, r1
 8006d92:	4291      	cmp	r1, r2
 8006d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d98:	d100      	bne.n	8006d9c <memcpy+0xc>
 8006d9a:	4770      	bx	lr
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da6:	4291      	cmp	r1, r2
 8006da8:	d1f9      	bne.n	8006d9e <memcpy+0xe>
 8006daa:	bd10      	pop	{r4, pc}

08006dac <memset>:
 8006dac:	4402      	add	r2, r0
 8006dae:	4603      	mov	r3, r0
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d100      	bne.n	8006db6 <memset+0xa>
 8006db4:	4770      	bx	lr
 8006db6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dba:	e7f9      	b.n	8006db0 <memset+0x4>

08006dbc <siprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b500      	push	{lr}
 8006dc0:	b09c      	sub	sp, #112	; 0x70
 8006dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9006      	str	r0, [sp, #24]
 8006dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dcc:	4809      	ldr	r0, [pc, #36]	; (8006df4 <siprintf+0x38>)
 8006dce:	9107      	str	r1, [sp, #28]
 8006dd0:	9104      	str	r1, [sp, #16]
 8006dd2:	4909      	ldr	r1, [pc, #36]	; (8006df8 <siprintf+0x3c>)
 8006dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd8:	9105      	str	r1, [sp, #20]
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	a902      	add	r1, sp, #8
 8006de0:	f000 f868 	bl	8006eb4 <_svfiprintf_r>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	b01c      	add	sp, #112	; 0x70
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b003      	add	sp, #12
 8006df2:	4770      	bx	lr
 8006df4:	20000014 	.word	0x20000014
 8006df8:	ffff0208 	.word	0xffff0208

08006dfc <__ssputs_r>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	688e      	ldr	r6, [r1, #8]
 8006e02:	429e      	cmp	r6, r3
 8006e04:	4682      	mov	sl, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	4690      	mov	r8, r2
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	d838      	bhi.n	8006e80 <__ssputs_r+0x84>
 8006e0e:	898a      	ldrh	r2, [r1, #12]
 8006e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e14:	d032      	beq.n	8006e7c <__ssputs_r+0x80>
 8006e16:	6825      	ldr	r5, [r4, #0]
 8006e18:	6909      	ldr	r1, [r1, #16]
 8006e1a:	eba5 0901 	sub.w	r9, r5, r1
 8006e1e:	6965      	ldr	r5, [r4, #20]
 8006e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e28:	3301      	adds	r3, #1
 8006e2a:	444b      	add	r3, r9
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	bf38      	it	cc
 8006e32:	461d      	movcc	r5, r3
 8006e34:	0553      	lsls	r3, r2, #21
 8006e36:	d531      	bpl.n	8006e9c <__ssputs_r+0xa0>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f000 fb55 	bl	80074e8 <_malloc_r>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	b950      	cbnz	r0, 8006e58 <__ssputs_r+0x5c>
 8006e42:	230c      	movs	r3, #12
 8006e44:	f8ca 3000 	str.w	r3, [sl]
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	f7ff ff98 	bl	8006d90 <memcpy>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	6126      	str	r6, [r4, #16]
 8006e6e:	6165      	str	r5, [r4, #20]
 8006e70:	444e      	add	r6, r9
 8006e72:	eba5 0509 	sub.w	r5, r5, r9
 8006e76:	6026      	str	r6, [r4, #0]
 8006e78:	60a5      	str	r5, [r4, #8]
 8006e7a:	463e      	mov	r6, r7
 8006e7c:	42be      	cmp	r6, r7
 8006e7e:	d900      	bls.n	8006e82 <__ssputs_r+0x86>
 8006e80:	463e      	mov	r6, r7
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	f000 faa8 	bl	80073dc <memmove>
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	1b9b      	subs	r3, r3, r6
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4433      	add	r3, r6
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7db      	b.n	8006e54 <__ssputs_r+0x58>
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	f000 fb97 	bl	80075d0 <_realloc_r>
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1e1      	bne.n	8006e6c <__ssputs_r+0x70>
 8006ea8:	6921      	ldr	r1, [r4, #16]
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f000 fab0 	bl	8007410 <_free_r>
 8006eb0:	e7c7      	b.n	8006e42 <__ssputs_r+0x46>
	...

08006eb4 <_svfiprintf_r>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	4698      	mov	r8, r3
 8006eba:	898b      	ldrh	r3, [r1, #12]
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	b09d      	sub	sp, #116	; 0x74
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	d50e      	bpl.n	8006ee6 <_svfiprintf_r+0x32>
 8006ec8:	690b      	ldr	r3, [r1, #16]
 8006eca:	b963      	cbnz	r3, 8006ee6 <_svfiprintf_r+0x32>
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	f000 fb0b 	bl	80074e8 <_malloc_r>
 8006ed2:	6028      	str	r0, [r5, #0]
 8006ed4:	6128      	str	r0, [r5, #16]
 8006ed6:	b920      	cbnz	r0, 8006ee2 <_svfiprintf_r+0x2e>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	e0d1      	b.n	8007086 <_svfiprintf_r+0x1d2>
 8006ee2:	2340      	movs	r3, #64	; 0x40
 8006ee4:	616b      	str	r3, [r5, #20]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eea:	2320      	movs	r3, #32
 8006eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef4:	2330      	movs	r3, #48	; 0x30
 8006ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070a0 <_svfiprintf_r+0x1ec>
 8006efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006efe:	f04f 0901 	mov.w	r9, #1
 8006f02:	4623      	mov	r3, r4
 8006f04:	469a      	mov	sl, r3
 8006f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0a:	b10a      	cbz	r2, 8006f10 <_svfiprintf_r+0x5c>
 8006f0c:	2a25      	cmp	r2, #37	; 0x25
 8006f0e:	d1f9      	bne.n	8006f04 <_svfiprintf_r+0x50>
 8006f10:	ebba 0b04 	subs.w	fp, sl, r4
 8006f14:	d00b      	beq.n	8006f2e <_svfiprintf_r+0x7a>
 8006f16:	465b      	mov	r3, fp
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff ff6d 	bl	8006dfc <__ssputs_r>
 8006f22:	3001      	adds	r0, #1
 8006f24:	f000 80aa 	beq.w	800707c <_svfiprintf_r+0x1c8>
 8006f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f2a:	445a      	add	r2, fp
 8006f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80a2 	beq.w	800707c <_svfiprintf_r+0x1c8>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f42:	f10a 0a01 	add.w	sl, sl, #1
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f50:	4654      	mov	r4, sl
 8006f52:	2205      	movs	r2, #5
 8006f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f58:	4851      	ldr	r0, [pc, #324]	; (80070a0 <_svfiprintf_r+0x1ec>)
 8006f5a:	f7f9 f959 	bl	8000210 <memchr>
 8006f5e:	9a04      	ldr	r2, [sp, #16]
 8006f60:	b9d8      	cbnz	r0, 8006f9a <_svfiprintf_r+0xe6>
 8006f62:	06d0      	lsls	r0, r2, #27
 8006f64:	bf44      	itt	mi
 8006f66:	2320      	movmi	r3, #32
 8006f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f6c:	0711      	lsls	r1, r2, #28
 8006f6e:	bf44      	itt	mi
 8006f70:	232b      	movmi	r3, #43	; 0x2b
 8006f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f76:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f7c:	d015      	beq.n	8006faa <_svfiprintf_r+0xf6>
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	4654      	mov	r4, sl
 8006f82:	2000      	movs	r0, #0
 8006f84:	f04f 0c0a 	mov.w	ip, #10
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8e:	3b30      	subs	r3, #48	; 0x30
 8006f90:	2b09      	cmp	r3, #9
 8006f92:	d94e      	bls.n	8007032 <_svfiprintf_r+0x17e>
 8006f94:	b1b0      	cbz	r0, 8006fc4 <_svfiprintf_r+0x110>
 8006f96:	9207      	str	r2, [sp, #28]
 8006f98:	e014      	b.n	8006fc4 <_svfiprintf_r+0x110>
 8006f9a:	eba0 0308 	sub.w	r3, r0, r8
 8006f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	46a2      	mov	sl, r4
 8006fa8:	e7d2      	b.n	8006f50 <_svfiprintf_r+0x9c>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	1d19      	adds	r1, r3, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	9103      	str	r1, [sp, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bfbb      	ittet	lt
 8006fb6:	425b      	neglt	r3, r3
 8006fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fbc:	9307      	strge	r3, [sp, #28]
 8006fbe:	9307      	strlt	r3, [sp, #28]
 8006fc0:	bfb8      	it	lt
 8006fc2:	9204      	strlt	r2, [sp, #16]
 8006fc4:	7823      	ldrb	r3, [r4, #0]
 8006fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc8:	d10c      	bne.n	8006fe4 <_svfiprintf_r+0x130>
 8006fca:	7863      	ldrb	r3, [r4, #1]
 8006fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fce:	d135      	bne.n	800703c <_svfiprintf_r+0x188>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1d1a      	adds	r2, r3, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	9203      	str	r2, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfb8      	it	lt
 8006fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe0:	3402      	adds	r4, #2
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070b0 <_svfiprintf_r+0x1fc>
 8006fe8:	7821      	ldrb	r1, [r4, #0]
 8006fea:	2203      	movs	r2, #3
 8006fec:	4650      	mov	r0, sl
 8006fee:	f7f9 f90f 	bl	8000210 <memchr>
 8006ff2:	b140      	cbz	r0, 8007006 <_svfiprintf_r+0x152>
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	eba0 000a 	sub.w	r0, r0, sl
 8006ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	4303      	orrs	r3, r0
 8007002:	3401      	adds	r4, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700a:	4826      	ldr	r0, [pc, #152]	; (80070a4 <_svfiprintf_r+0x1f0>)
 800700c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007010:	2206      	movs	r2, #6
 8007012:	f7f9 f8fd 	bl	8000210 <memchr>
 8007016:	2800      	cmp	r0, #0
 8007018:	d038      	beq.n	800708c <_svfiprintf_r+0x1d8>
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <_svfiprintf_r+0x1f4>)
 800701c:	bb1b      	cbnz	r3, 8007066 <_svfiprintf_r+0x1b2>
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	3307      	adds	r3, #7
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	3308      	adds	r3, #8
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	4433      	add	r3, r6
 800702e:	9309      	str	r3, [sp, #36]	; 0x24
 8007030:	e767      	b.n	8006f02 <_svfiprintf_r+0x4e>
 8007032:	fb0c 3202 	mla	r2, ip, r2, r3
 8007036:	460c      	mov	r4, r1
 8007038:	2001      	movs	r0, #1
 800703a:	e7a5      	b.n	8006f88 <_svfiprintf_r+0xd4>
 800703c:	2300      	movs	r3, #0
 800703e:	3401      	adds	r4, #1
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	4619      	mov	r1, r3
 8007044:	f04f 0c0a 	mov.w	ip, #10
 8007048:	4620      	mov	r0, r4
 800704a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800704e:	3a30      	subs	r2, #48	; 0x30
 8007050:	2a09      	cmp	r2, #9
 8007052:	d903      	bls.n	800705c <_svfiprintf_r+0x1a8>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0c5      	beq.n	8006fe4 <_svfiprintf_r+0x130>
 8007058:	9105      	str	r1, [sp, #20]
 800705a:	e7c3      	b.n	8006fe4 <_svfiprintf_r+0x130>
 800705c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007060:	4604      	mov	r4, r0
 8007062:	2301      	movs	r3, #1
 8007064:	e7f0      	b.n	8007048 <_svfiprintf_r+0x194>
 8007066:	ab03      	add	r3, sp, #12
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	462a      	mov	r2, r5
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <_svfiprintf_r+0x1f8>)
 800706e:	a904      	add	r1, sp, #16
 8007070:	4638      	mov	r0, r7
 8007072:	f3af 8000 	nop.w
 8007076:	1c42      	adds	r2, r0, #1
 8007078:	4606      	mov	r6, r0
 800707a:	d1d6      	bne.n	800702a <_svfiprintf_r+0x176>
 800707c:	89ab      	ldrh	r3, [r5, #12]
 800707e:	065b      	lsls	r3, r3, #25
 8007080:	f53f af2c 	bmi.w	8006edc <_svfiprintf_r+0x28>
 8007084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007086:	b01d      	add	sp, #116	; 0x74
 8007088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708c:	ab03      	add	r3, sp, #12
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	462a      	mov	r2, r5
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <_svfiprintf_r+0x1f8>)
 8007094:	a904      	add	r1, sp, #16
 8007096:	4638      	mov	r0, r7
 8007098:	f000 f87a 	bl	8007190 <_printf_i>
 800709c:	e7eb      	b.n	8007076 <_svfiprintf_r+0x1c2>
 800709e:	bf00      	nop
 80070a0:	08007a10 	.word	0x08007a10
 80070a4:	08007a1a 	.word	0x08007a1a
 80070a8:	00000000 	.word	0x00000000
 80070ac:	08006dfd 	.word	0x08006dfd
 80070b0:	08007a16 	.word	0x08007a16

080070b4 <_printf_common>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	4616      	mov	r6, r2
 80070ba:	4699      	mov	r9, r3
 80070bc:	688a      	ldr	r2, [r1, #8]
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bfb8      	it	lt
 80070c8:	4613      	movlt	r3, r2
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070d0:	4607      	mov	r7, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	b10a      	cbz	r2, 80070da <_printf_common+0x26>
 80070d6:	3301      	adds	r3, #1
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	0699      	lsls	r1, r3, #26
 80070de:	bf42      	ittt	mi
 80070e0:	6833      	ldrmi	r3, [r6, #0]
 80070e2:	3302      	addmi	r3, #2
 80070e4:	6033      	strmi	r3, [r6, #0]
 80070e6:	6825      	ldr	r5, [r4, #0]
 80070e8:	f015 0506 	ands.w	r5, r5, #6
 80070ec:	d106      	bne.n	80070fc <_printf_common+0x48>
 80070ee:	f104 0a19 	add.w	sl, r4, #25
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	6832      	ldr	r2, [r6, #0]
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dc26      	bgt.n	800714a <_printf_common+0x96>
 80070fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007100:	1e13      	subs	r3, r2, #0
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	bf18      	it	ne
 8007106:	2301      	movne	r3, #1
 8007108:	0692      	lsls	r2, r2, #26
 800710a:	d42b      	bmi.n	8007164 <_printf_common+0xb0>
 800710c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007110:	4649      	mov	r1, r9
 8007112:	4638      	mov	r0, r7
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d01e      	beq.n	8007158 <_printf_common+0xa4>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	68e5      	ldr	r5, [r4, #12]
 800711e:	6832      	ldr	r2, [r6, #0]
 8007120:	f003 0306 	and.w	r3, r3, #6
 8007124:	2b04      	cmp	r3, #4
 8007126:	bf08      	it	eq
 8007128:	1aad      	subeq	r5, r5, r2
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	bf0c      	ite	eq
 8007130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007134:	2500      	movne	r5, #0
 8007136:	4293      	cmp	r3, r2
 8007138:	bfc4      	itt	gt
 800713a:	1a9b      	subgt	r3, r3, r2
 800713c:	18ed      	addgt	r5, r5, r3
 800713e:	2600      	movs	r6, #0
 8007140:	341a      	adds	r4, #26
 8007142:	42b5      	cmp	r5, r6
 8007144:	d11a      	bne.n	800717c <_printf_common+0xc8>
 8007146:	2000      	movs	r0, #0
 8007148:	e008      	b.n	800715c <_printf_common+0xa8>
 800714a:	2301      	movs	r3, #1
 800714c:	4652      	mov	r2, sl
 800714e:	4649      	mov	r1, r9
 8007150:	4638      	mov	r0, r7
 8007152:	47c0      	blx	r8
 8007154:	3001      	adds	r0, #1
 8007156:	d103      	bne.n	8007160 <_printf_common+0xac>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	3501      	adds	r5, #1
 8007162:	e7c6      	b.n	80070f2 <_printf_common+0x3e>
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	2030      	movs	r0, #48	; 0x30
 800716a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716e:	4422      	add	r2, r4
 8007170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007178:	3302      	adds	r3, #2
 800717a:	e7c7      	b.n	800710c <_printf_common+0x58>
 800717c:	2301      	movs	r3, #1
 800717e:	4622      	mov	r2, r4
 8007180:	4649      	mov	r1, r9
 8007182:	4638      	mov	r0, r7
 8007184:	47c0      	blx	r8
 8007186:	3001      	adds	r0, #1
 8007188:	d0e6      	beq.n	8007158 <_printf_common+0xa4>
 800718a:	3601      	adds	r6, #1
 800718c:	e7d9      	b.n	8007142 <_printf_common+0x8e>
	...

08007190 <_printf_i>:
 8007190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	7e0f      	ldrb	r7, [r1, #24]
 8007196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007198:	2f78      	cmp	r7, #120	; 0x78
 800719a:	4691      	mov	r9, r2
 800719c:	4680      	mov	r8, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	469a      	mov	sl, r3
 80071a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071a6:	d807      	bhi.n	80071b8 <_printf_i+0x28>
 80071a8:	2f62      	cmp	r7, #98	; 0x62
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x32>
 80071ac:	2f00      	cmp	r7, #0
 80071ae:	f000 80d8 	beq.w	8007362 <_printf_i+0x1d2>
 80071b2:	2f58      	cmp	r7, #88	; 0x58
 80071b4:	f000 80a3 	beq.w	80072fe <_printf_i+0x16e>
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071c0:	e03a      	b.n	8007238 <_printf_i+0xa8>
 80071c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c6:	2b15      	cmp	r3, #21
 80071c8:	d8f6      	bhi.n	80071b8 <_printf_i+0x28>
 80071ca:	a101      	add	r1, pc, #4	; (adr r1, 80071d0 <_printf_i+0x40>)
 80071cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071d0:	08007229 	.word	0x08007229
 80071d4:	0800723d 	.word	0x0800723d
 80071d8:	080071b9 	.word	0x080071b9
 80071dc:	080071b9 	.word	0x080071b9
 80071e0:	080071b9 	.word	0x080071b9
 80071e4:	080071b9 	.word	0x080071b9
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080071b9 	.word	0x080071b9
 80071f0:	080071b9 	.word	0x080071b9
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	08007349 	.word	0x08007349
 8007200:	0800726d 	.word	0x0800726d
 8007204:	0800732b 	.word	0x0800732b
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	0800736b 	.word	0x0800736b
 8007214:	080071b9 	.word	0x080071b9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	08007333 	.word	0x08007333
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	602a      	str	r2, [r5, #0]
 8007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007238:	2301      	movs	r3, #1
 800723a:	e0a3      	b.n	8007384 <_printf_i+0x1f4>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	6829      	ldr	r1, [r5, #0]
 8007240:	0606      	lsls	r6, r0, #24
 8007242:	f101 0304 	add.w	r3, r1, #4
 8007246:	d50a      	bpl.n	800725e <_printf_i+0xce>
 8007248:	680e      	ldr	r6, [r1, #0]
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	2e00      	cmp	r6, #0
 800724e:	da03      	bge.n	8007258 <_printf_i+0xc8>
 8007250:	232d      	movs	r3, #45	; 0x2d
 8007252:	4276      	negs	r6, r6
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	485e      	ldr	r0, [pc, #376]	; (80073d4 <_printf_i+0x244>)
 800725a:	230a      	movs	r3, #10
 800725c:	e019      	b.n	8007292 <_printf_i+0x102>
 800725e:	680e      	ldr	r6, [r1, #0]
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007266:	bf18      	it	ne
 8007268:	b236      	sxthne	r6, r6
 800726a:	e7ef      	b.n	800724c <_printf_i+0xbc>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	1d19      	adds	r1, r3, #4
 8007272:	6029      	str	r1, [r5, #0]
 8007274:	0601      	lsls	r1, r0, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0xec>
 8007278:	681e      	ldr	r6, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0xf2>
 800727c:	0646      	lsls	r6, r0, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0xe8>
 8007280:	881e      	ldrh	r6, [r3, #0]
 8007282:	4854      	ldr	r0, [pc, #336]	; (80073d4 <_printf_i+0x244>)
 8007284:	2f6f      	cmp	r7, #111	; 0x6f
 8007286:	bf0c      	ite	eq
 8007288:	2308      	moveq	r3, #8
 800728a:	230a      	movne	r3, #10
 800728c:	2100      	movs	r1, #0
 800728e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007292:	6865      	ldr	r5, [r4, #4]
 8007294:	60a5      	str	r5, [r4, #8]
 8007296:	2d00      	cmp	r5, #0
 8007298:	bfa2      	ittt	ge
 800729a:	6821      	ldrge	r1, [r4, #0]
 800729c:	f021 0104 	bicge.w	r1, r1, #4
 80072a0:	6021      	strge	r1, [r4, #0]
 80072a2:	b90e      	cbnz	r6, 80072a8 <_printf_i+0x118>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	d04d      	beq.n	8007344 <_printf_i+0x1b4>
 80072a8:	4615      	mov	r5, r2
 80072aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ae:	fb03 6711 	mls	r7, r3, r1, r6
 80072b2:	5dc7      	ldrb	r7, [r0, r7]
 80072b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072b8:	4637      	mov	r7, r6
 80072ba:	42bb      	cmp	r3, r7
 80072bc:	460e      	mov	r6, r1
 80072be:	d9f4      	bls.n	80072aa <_printf_i+0x11a>
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d10b      	bne.n	80072dc <_printf_i+0x14c>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07de      	lsls	r6, r3, #31
 80072c8:	d508      	bpl.n	80072dc <_printf_i+0x14c>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	6861      	ldr	r1, [r4, #4]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	bfde      	ittt	le
 80072d2:	2330      	movle	r3, #48	; 0x30
 80072d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072dc:	1b52      	subs	r2, r2, r5
 80072de:	6122      	str	r2, [r4, #16]
 80072e0:	f8cd a000 	str.w	sl, [sp]
 80072e4:	464b      	mov	r3, r9
 80072e6:	aa03      	add	r2, sp, #12
 80072e8:	4621      	mov	r1, r4
 80072ea:	4640      	mov	r0, r8
 80072ec:	f7ff fee2 	bl	80070b4 <_printf_common>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d14c      	bne.n	800738e <_printf_i+0x1fe>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	b004      	add	sp, #16
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	4835      	ldr	r0, [pc, #212]	; (80073d4 <_printf_i+0x244>)
 8007300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f851 6b04 	ldr.w	r6, [r1], #4
 800730c:	6029      	str	r1, [r5, #0]
 800730e:	061d      	lsls	r5, r3, #24
 8007310:	d514      	bpl.n	800733c <_printf_i+0x1ac>
 8007312:	07df      	lsls	r7, r3, #31
 8007314:	bf44      	itt	mi
 8007316:	f043 0320 	orrmi.w	r3, r3, #32
 800731a:	6023      	strmi	r3, [r4, #0]
 800731c:	b91e      	cbnz	r6, 8007326 <_printf_i+0x196>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	f023 0320 	bic.w	r3, r3, #32
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2310      	movs	r3, #16
 8007328:	e7b0      	b.n	800728c <_printf_i+0xfc>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f043 0320 	orr.w	r3, r3, #32
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	2378      	movs	r3, #120	; 0x78
 8007334:	4828      	ldr	r0, [pc, #160]	; (80073d8 <_printf_i+0x248>)
 8007336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800733a:	e7e3      	b.n	8007304 <_printf_i+0x174>
 800733c:	0659      	lsls	r1, r3, #25
 800733e:	bf48      	it	mi
 8007340:	b2b6      	uxthmi	r6, r6
 8007342:	e7e6      	b.n	8007312 <_printf_i+0x182>
 8007344:	4615      	mov	r5, r2
 8007346:	e7bb      	b.n	80072c0 <_printf_i+0x130>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	6826      	ldr	r6, [r4, #0]
 800734c:	6961      	ldr	r1, [r4, #20]
 800734e:	1d18      	adds	r0, r3, #4
 8007350:	6028      	str	r0, [r5, #0]
 8007352:	0635      	lsls	r5, r6, #24
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	d501      	bpl.n	800735c <_printf_i+0x1cc>
 8007358:	6019      	str	r1, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0x1d2>
 800735c:	0670      	lsls	r0, r6, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0x1c8>
 8007360:	8019      	strh	r1, [r3, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	4615      	mov	r5, r2
 8007368:	e7ba      	b.n	80072e0 <_printf_i+0x150>
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	602a      	str	r2, [r5, #0]
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	2100      	movs	r1, #0
 8007376:	4628      	mov	r0, r5
 8007378:	f7f8 ff4a 	bl	8000210 <memchr>
 800737c:	b108      	cbz	r0, 8007382 <_printf_i+0x1f2>
 800737e:	1b40      	subs	r0, r0, r5
 8007380:	6060      	str	r0, [r4, #4]
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	2300      	movs	r3, #0
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	e7a8      	b.n	80072e0 <_printf_i+0x150>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	462a      	mov	r2, r5
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	47d0      	blx	sl
 8007398:	3001      	adds	r0, #1
 800739a:	d0ab      	beq.n	80072f4 <_printf_i+0x164>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	079b      	lsls	r3, r3, #30
 80073a0:	d413      	bmi.n	80073ca <_printf_i+0x23a>
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	4298      	cmp	r0, r3
 80073a8:	bfb8      	it	lt
 80073aa:	4618      	movlt	r0, r3
 80073ac:	e7a4      	b.n	80072f8 <_printf_i+0x168>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4632      	mov	r2, r6
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	47d0      	blx	sl
 80073b8:	3001      	adds	r0, #1
 80073ba:	d09b      	beq.n	80072f4 <_printf_i+0x164>
 80073bc:	3501      	adds	r5, #1
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	9903      	ldr	r1, [sp, #12]
 80073c2:	1a5b      	subs	r3, r3, r1
 80073c4:	42ab      	cmp	r3, r5
 80073c6:	dcf2      	bgt.n	80073ae <_printf_i+0x21e>
 80073c8:	e7eb      	b.n	80073a2 <_printf_i+0x212>
 80073ca:	2500      	movs	r5, #0
 80073cc:	f104 0619 	add.w	r6, r4, #25
 80073d0:	e7f5      	b.n	80073be <_printf_i+0x22e>
 80073d2:	bf00      	nop
 80073d4:	08007a21 	.word	0x08007a21
 80073d8:	08007a32 	.word	0x08007a32

080073dc <memmove>:
 80073dc:	4288      	cmp	r0, r1
 80073de:	b510      	push	{r4, lr}
 80073e0:	eb01 0402 	add.w	r4, r1, r2
 80073e4:	d902      	bls.n	80073ec <memmove+0x10>
 80073e6:	4284      	cmp	r4, r0
 80073e8:	4623      	mov	r3, r4
 80073ea:	d807      	bhi.n	80073fc <memmove+0x20>
 80073ec:	1e43      	subs	r3, r0, #1
 80073ee:	42a1      	cmp	r1, r4
 80073f0:	d008      	beq.n	8007404 <memmove+0x28>
 80073f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073fa:	e7f8      	b.n	80073ee <memmove+0x12>
 80073fc:	4402      	add	r2, r0
 80073fe:	4601      	mov	r1, r0
 8007400:	428a      	cmp	r2, r1
 8007402:	d100      	bne.n	8007406 <memmove+0x2a>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800740e:	e7f7      	b.n	8007400 <memmove+0x24>

08007410 <_free_r>:
 8007410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007412:	2900      	cmp	r1, #0
 8007414:	d044      	beq.n	80074a0 <_free_r+0x90>
 8007416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741a:	9001      	str	r0, [sp, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f1a1 0404 	sub.w	r4, r1, #4
 8007422:	bfb8      	it	lt
 8007424:	18e4      	addlt	r4, r4, r3
 8007426:	f000 f913 	bl	8007650 <__malloc_lock>
 800742a:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <_free_r+0x94>)
 800742c:	9801      	ldr	r0, [sp, #4]
 800742e:	6813      	ldr	r3, [r2, #0]
 8007430:	b933      	cbnz	r3, 8007440 <_free_r+0x30>
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	6014      	str	r4, [r2, #0]
 8007436:	b003      	add	sp, #12
 8007438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800743c:	f000 b90e 	b.w	800765c <__malloc_unlock>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d908      	bls.n	8007456 <_free_r+0x46>
 8007444:	6825      	ldr	r5, [r4, #0]
 8007446:	1961      	adds	r1, r4, r5
 8007448:	428b      	cmp	r3, r1
 800744a:	bf01      	itttt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	1949      	addeq	r1, r1, r5
 8007452:	6021      	streq	r1, [r4, #0]
 8007454:	e7ed      	b.n	8007432 <_free_r+0x22>
 8007456:	461a      	mov	r2, r3
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	b10b      	cbz	r3, 8007460 <_free_r+0x50>
 800745c:	42a3      	cmp	r3, r4
 800745e:	d9fa      	bls.n	8007456 <_free_r+0x46>
 8007460:	6811      	ldr	r1, [r2, #0]
 8007462:	1855      	adds	r5, r2, r1
 8007464:	42a5      	cmp	r5, r4
 8007466:	d10b      	bne.n	8007480 <_free_r+0x70>
 8007468:	6824      	ldr	r4, [r4, #0]
 800746a:	4421      	add	r1, r4
 800746c:	1854      	adds	r4, r2, r1
 800746e:	42a3      	cmp	r3, r4
 8007470:	6011      	str	r1, [r2, #0]
 8007472:	d1e0      	bne.n	8007436 <_free_r+0x26>
 8007474:	681c      	ldr	r4, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	6053      	str	r3, [r2, #4]
 800747a:	4421      	add	r1, r4
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	e7da      	b.n	8007436 <_free_r+0x26>
 8007480:	d902      	bls.n	8007488 <_free_r+0x78>
 8007482:	230c      	movs	r3, #12
 8007484:	6003      	str	r3, [r0, #0]
 8007486:	e7d6      	b.n	8007436 <_free_r+0x26>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	1961      	adds	r1, r4, r5
 800748c:	428b      	cmp	r3, r1
 800748e:	bf04      	itt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	6063      	str	r3, [r4, #4]
 8007496:	bf04      	itt	eq
 8007498:	1949      	addeq	r1, r1, r5
 800749a:	6021      	streq	r1, [r4, #0]
 800749c:	6054      	str	r4, [r2, #4]
 800749e:	e7ca      	b.n	8007436 <_free_r+0x26>
 80074a0:	b003      	add	sp, #12
 80074a2:	bd30      	pop	{r4, r5, pc}
 80074a4:	20004b70 	.word	0x20004b70

080074a8 <sbrk_aligned>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	4e0e      	ldr	r6, [pc, #56]	; (80074e4 <sbrk_aligned+0x3c>)
 80074ac:	460c      	mov	r4, r1
 80074ae:	6831      	ldr	r1, [r6, #0]
 80074b0:	4605      	mov	r5, r0
 80074b2:	b911      	cbnz	r1, 80074ba <sbrk_aligned+0x12>
 80074b4:	f000 f8bc 	bl	8007630 <_sbrk_r>
 80074b8:	6030      	str	r0, [r6, #0]
 80074ba:	4621      	mov	r1, r4
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f8b7 	bl	8007630 <_sbrk_r>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	d00a      	beq.n	80074dc <sbrk_aligned+0x34>
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d007      	beq.n	80074e0 <sbrk_aligned+0x38>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f8ac 	bl	8007630 <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d101      	bne.n	80074e0 <sbrk_aligned+0x38>
 80074dc:	f04f 34ff 	mov.w	r4, #4294967295
 80074e0:	4620      	mov	r0, r4
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	20004b74 	.word	0x20004b74

080074e8 <_malloc_r>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	1ccd      	adds	r5, r1, #3
 80074ee:	f025 0503 	bic.w	r5, r5, #3
 80074f2:	3508      	adds	r5, #8
 80074f4:	2d0c      	cmp	r5, #12
 80074f6:	bf38      	it	cc
 80074f8:	250c      	movcc	r5, #12
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	4607      	mov	r7, r0
 80074fe:	db01      	blt.n	8007504 <_malloc_r+0x1c>
 8007500:	42a9      	cmp	r1, r5
 8007502:	d905      	bls.n	8007510 <_malloc_r+0x28>
 8007504:	230c      	movs	r3, #12
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	2600      	movs	r6, #0
 800750a:	4630      	mov	r0, r6
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007510:	4e2e      	ldr	r6, [pc, #184]	; (80075cc <_malloc_r+0xe4>)
 8007512:	f000 f89d 	bl	8007650 <__malloc_lock>
 8007516:	6833      	ldr	r3, [r6, #0]
 8007518:	461c      	mov	r4, r3
 800751a:	bb34      	cbnz	r4, 800756a <_malloc_r+0x82>
 800751c:	4629      	mov	r1, r5
 800751e:	4638      	mov	r0, r7
 8007520:	f7ff ffc2 	bl	80074a8 <sbrk_aligned>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	4604      	mov	r4, r0
 8007528:	d14d      	bne.n	80075c6 <_malloc_r+0xde>
 800752a:	6834      	ldr	r4, [r6, #0]
 800752c:	4626      	mov	r6, r4
 800752e:	2e00      	cmp	r6, #0
 8007530:	d140      	bne.n	80075b4 <_malloc_r+0xcc>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	4631      	mov	r1, r6
 8007536:	4638      	mov	r0, r7
 8007538:	eb04 0803 	add.w	r8, r4, r3
 800753c:	f000 f878 	bl	8007630 <_sbrk_r>
 8007540:	4580      	cmp	r8, r0
 8007542:	d13a      	bne.n	80075ba <_malloc_r+0xd2>
 8007544:	6821      	ldr	r1, [r4, #0]
 8007546:	3503      	adds	r5, #3
 8007548:	1a6d      	subs	r5, r5, r1
 800754a:	f025 0503 	bic.w	r5, r5, #3
 800754e:	3508      	adds	r5, #8
 8007550:	2d0c      	cmp	r5, #12
 8007552:	bf38      	it	cc
 8007554:	250c      	movcc	r5, #12
 8007556:	4629      	mov	r1, r5
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ffa5 	bl	80074a8 <sbrk_aligned>
 800755e:	3001      	adds	r0, #1
 8007560:	d02b      	beq.n	80075ba <_malloc_r+0xd2>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	442b      	add	r3, r5
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	e00e      	b.n	8007588 <_malloc_r+0xa0>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	1b52      	subs	r2, r2, r5
 800756e:	d41e      	bmi.n	80075ae <_malloc_r+0xc6>
 8007570:	2a0b      	cmp	r2, #11
 8007572:	d916      	bls.n	80075a2 <_malloc_r+0xba>
 8007574:	1961      	adds	r1, r4, r5
 8007576:	42a3      	cmp	r3, r4
 8007578:	6025      	str	r5, [r4, #0]
 800757a:	bf18      	it	ne
 800757c:	6059      	strne	r1, [r3, #4]
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	bf08      	it	eq
 8007582:	6031      	streq	r1, [r6, #0]
 8007584:	5162      	str	r2, [r4, r5]
 8007586:	604b      	str	r3, [r1, #4]
 8007588:	4638      	mov	r0, r7
 800758a:	f104 060b 	add.w	r6, r4, #11
 800758e:	f000 f865 	bl	800765c <__malloc_unlock>
 8007592:	f026 0607 	bic.w	r6, r6, #7
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	1af2      	subs	r2, r6, r3
 800759a:	d0b6      	beq.n	800750a <_malloc_r+0x22>
 800759c:	1b9b      	subs	r3, r3, r6
 800759e:	50a3      	str	r3, [r4, r2]
 80075a0:	e7b3      	b.n	800750a <_malloc_r+0x22>
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	bf0c      	ite	eq
 80075a8:	6032      	streq	r2, [r6, #0]
 80075aa:	605a      	strne	r2, [r3, #4]
 80075ac:	e7ec      	b.n	8007588 <_malloc_r+0xa0>
 80075ae:	4623      	mov	r3, r4
 80075b0:	6864      	ldr	r4, [r4, #4]
 80075b2:	e7b2      	b.n	800751a <_malloc_r+0x32>
 80075b4:	4634      	mov	r4, r6
 80075b6:	6876      	ldr	r6, [r6, #4]
 80075b8:	e7b9      	b.n	800752e <_malloc_r+0x46>
 80075ba:	230c      	movs	r3, #12
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4638      	mov	r0, r7
 80075c0:	f000 f84c 	bl	800765c <__malloc_unlock>
 80075c4:	e7a1      	b.n	800750a <_malloc_r+0x22>
 80075c6:	6025      	str	r5, [r4, #0]
 80075c8:	e7de      	b.n	8007588 <_malloc_r+0xa0>
 80075ca:	bf00      	nop
 80075cc:	20004b70 	.word	0x20004b70

080075d0 <_realloc_r>:
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	4680      	mov	r8, r0
 80075d6:	4614      	mov	r4, r2
 80075d8:	460e      	mov	r6, r1
 80075da:	b921      	cbnz	r1, 80075e6 <_realloc_r+0x16>
 80075dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e0:	4611      	mov	r1, r2
 80075e2:	f7ff bf81 	b.w	80074e8 <_malloc_r>
 80075e6:	b92a      	cbnz	r2, 80075f4 <_realloc_r+0x24>
 80075e8:	f7ff ff12 	bl	8007410 <_free_r>
 80075ec:	4625      	mov	r5, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	f000 f838 	bl	8007668 <_malloc_usable_size_r>
 80075f8:	4284      	cmp	r4, r0
 80075fa:	4607      	mov	r7, r0
 80075fc:	d802      	bhi.n	8007604 <_realloc_r+0x34>
 80075fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007602:	d812      	bhi.n	800762a <_realloc_r+0x5a>
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff ff6e 	bl	80074e8 <_malloc_r>
 800760c:	4605      	mov	r5, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	d0ed      	beq.n	80075ee <_realloc_r+0x1e>
 8007612:	42bc      	cmp	r4, r7
 8007614:	4622      	mov	r2, r4
 8007616:	4631      	mov	r1, r6
 8007618:	bf28      	it	cs
 800761a:	463a      	movcs	r2, r7
 800761c:	f7ff fbb8 	bl	8006d90 <memcpy>
 8007620:	4631      	mov	r1, r6
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fef4 	bl	8007410 <_free_r>
 8007628:	e7e1      	b.n	80075ee <_realloc_r+0x1e>
 800762a:	4635      	mov	r5, r6
 800762c:	e7df      	b.n	80075ee <_realloc_r+0x1e>
	...

08007630 <_sbrk_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_sbrk_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fa f8f2 	bl	8001824 <_sbrk>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_sbrk_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_sbrk_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20004b78 	.word	0x20004b78

08007650 <__malloc_lock>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__malloc_lock+0x8>)
 8007652:	f000 b811 	b.w	8007678 <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	20004b7c 	.word	0x20004b7c

0800765c <__malloc_unlock>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__malloc_unlock+0x8>)
 800765e:	f000 b80c 	b.w	800767a <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	20004b7c 	.word	0x20004b7c

08007668 <_malloc_usable_size_r>:
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f18      	subs	r0, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfbc      	itt	lt
 8007672:	580b      	ldrlt	r3, [r1, r0]
 8007674:	18c0      	addlt	r0, r0, r3
 8007676:	4770      	bx	lr

08007678 <__retarget_lock_acquire_recursive>:
 8007678:	4770      	bx	lr

0800767a <__retarget_lock_release_recursive>:
 800767a:	4770      	bx	lr

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
