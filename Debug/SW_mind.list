
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d20  08005d20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a2c  20000078  08005da0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aa4  08005da0  00024aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153bd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333e  00000000  00000000  00035465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000387a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043c7  00000000  00000000  0003a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ea3  00000000  00000000  0003ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a96  00000000  00000000  00053b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001275b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  00127600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c8c 	.word	0x08005c8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005c8c 	.word	0x08005c8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <MX_GPIO_Init+0x108>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a3a      	ldr	r2, [pc, #232]	; (80006cc <MX_GPIO_Init+0x108>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <MX_GPIO_Init+0x108>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <MX_GPIO_Init+0x108>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <MX_GPIO_Init+0x108>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_GPIO_Init+0x108>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_GPIO_Init+0x108>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <MX_GPIO_Init+0x108>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_GPIO_Init+0x108>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_GPIO_Init+0x108>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a25      	ldr	r2, [pc, #148]	; (80006cc <MX_GPIO_Init+0x108>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_GPIO_Init+0x108>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800064a:	2200      	movs	r2, #0
 800064c:	f24e 0142 	movw	r1, #57410	; 0xe042
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <MX_GPIO_Init+0x10c>)
 8000652:	f000 ff53 	bl	80014fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <MX_GPIO_Init+0x110>)
 800066e:	f000 fd99 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000672:	f24e 0342 	movw	r3, #57410	; 0xe042
 8000676:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x10c>)
 800068c:	f000 fd8a 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000690:	f241 0304 	movw	r3, #4100	; 0x1004
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <MX_GPIO_Init+0x10c>)
 80006a6:	f000 fd7d 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_GPIO_Init+0x114>)
 80006c0:	f000 fd70 	bl	80011a4 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020000 	.word	0x40020000

080006dc <scanRows>:

volatile uint8_t wyj = 0b00000001;
volatile uint32_t counter = 0;
volatile uint8_t wej = 0;

uint8_t scanRows(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	if(wej == 0)
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <scanRows+0x174>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11c      	bne.n	8000724 <scanRows+0x48>
	{
	        if(counter == 10000)
 80006ea:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <scanRows+0x178>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d111      	bne.n	800071a <scanRows+0x3e>
	        {
	            counter = 0;
 80006f6:	4b57      	ldr	r3, [pc, #348]	; (8000854 <scanRows+0x178>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
	            wyj = wyj * 2;
 80006fc:	4b56      	ldr	r3, [pc, #344]	; (8000858 <scanRows+0x17c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b54      	ldr	r3, [pc, #336]	; (8000858 <scanRows+0x17c>)
 8000708:	701a      	strb	r2, [r3, #0]
	            if(wyj > 8)
 800070a:	4b53      	ldr	r3, [pc, #332]	; (8000858 <scanRows+0x17c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b08      	cmp	r3, #8
 8000712:	d902      	bls.n	800071a <scanRows+0x3e>
	            {
	                wyj = 1;
 8000714:	4b50      	ldr	r3, [pc, #320]	; (8000858 <scanRows+0x17c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	            }
	        }
	        counter = counter + 1;
 800071a:	4b4e      	ldr	r3, [pc, #312]	; (8000854 <scanRows+0x178>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a4c      	ldr	r2, [pc, #304]	; (8000854 <scanRows+0x178>)
 8000722:	6013      	str	r3, [r2, #0]
	}

	switch(wyj) {
 8000724:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <scanRows+0x17c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	3b01      	subs	r3, #1
 800072c:	2b07      	cmp	r3, #7
 800072e:	d873      	bhi.n	8000818 <scanRows+0x13c>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <scanRows+0x5c>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000759 	.word	0x08000759
 800073c:	08000789 	.word	0x08000789
 8000740:	08000819 	.word	0x08000819
 8000744:	080007b9 	.word	0x080007b9
 8000748:	08000819 	.word	0x08000819
 800074c:	08000819 	.word	0x08000819
 8000750:	08000819 	.word	0x08000819
 8000754:	080007e9 	.word	0x080007e9
	  case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2102      	movs	r1, #2
 800075c:	483f      	ldr	r0, [pc, #252]	; (800085c <scanRows+0x180>)
 800075e:	f000 fecd 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	483c      	ldr	r0, [pc, #240]	; (800085c <scanRows+0x180>)
 800076a:	f000 fec7 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4839      	ldr	r0, [pc, #228]	; (800085c <scanRows+0x180>)
 8000776:	f000 fec1 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4836      	ldr	r0, [pc, #216]	; (800085c <scanRows+0x180>)
 8000782:	f000 febb 	bl	80014fc <HAL_GPIO_WritePin>
	    break;
 8000786:	e05e      	b.n	8000846 <scanRows+0x16a>
	  case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2102      	movs	r1, #2
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <scanRows+0x180>)
 800078e:	f000 feb5 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4830      	ldr	r0, [pc, #192]	; (800085c <scanRows+0x180>)
 800079a:	f000 feaf 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	482d      	ldr	r0, [pc, #180]	; (800085c <scanRows+0x180>)
 80007a6:	f000 fea9 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b0:	482a      	ldr	r0, [pc, #168]	; (800085c <scanRows+0x180>)
 80007b2:	f000 fea3 	bl	80014fc <HAL_GPIO_WritePin>
	    break;
 80007b6:	e046      	b.n	8000846 <scanRows+0x16a>
	  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4827      	ldr	r0, [pc, #156]	; (800085c <scanRows+0x180>)
 80007be:	f000 fe9d 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <scanRows+0x180>)
 80007ca:	f000 fe97 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <scanRows+0x180>)
 80007d6:	f000 fe91 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	481e      	ldr	r0, [pc, #120]	; (800085c <scanRows+0x180>)
 80007e2:	f000 fe8b 	bl	80014fc <HAL_GPIO_WritePin>
	    break;
 80007e6:	e02e      	b.n	8000846 <scanRows+0x16a>
	  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <scanRows+0x180>)
 80007ee:	f000 fe85 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <scanRows+0x180>)
 80007fa:	f000 fe7f 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <scanRows+0x180>)
 8000806:	f000 fe79 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <scanRows+0x180>)
 8000812:	f000 fe73 	bl	80014fc <HAL_GPIO_WritePin>
	    break;
 8000816:	e016      	b.n	8000846 <scanRows+0x16a>

	  default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <scanRows+0x180>)
 800081e:	f000 fe6d 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <scanRows+0x180>)
 800082a:	f000 fe67 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <scanRows+0x180>)
 8000836:	f000 fe61 	bl	80014fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <scanRows+0x180>)
 8000842:	f000 fe5b 	bl	80014fc <HAL_GPIO_WritePin>
	}
	return wyj;
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <scanRows+0x17c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000098 	.word	0x20000098
 8000854:	20000094 	.word	0x20000094
 8000858:	20000000 	.word	0x20000000
 800085c:	40020400 	.word	0x40020400

08000860 <readCols>:

uint8_t readCols(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8000864:	2104      	movs	r1, #4
 8000866:	481c      	ldr	r0, [pc, #112]	; (80008d8 <readCols+0x78>)
 8000868:	f000 fe30 	bl	80014cc <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <readCols+0x1c>
		wej = 1;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <readCols+0x7c>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
		return 0b0001;
 8000878:	2301      	movs	r3, #1
 800087a:	e02a      	b.n	80008d2 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 800087c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <readCols+0x78>)
 8000882:	f000 fe23 	bl	80014cc <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d004      	beq.n	8000896 <readCols+0x36>
		wej = 2;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <readCols+0x7c>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]
		return 0b0010;
 8000892:	2302      	movs	r3, #2
 8000894:	e01d      	b.n	80008d2 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8000896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <readCols+0x80>)
 800089c:	f000 fe16 	bl	80014cc <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <readCols+0x50>
		wej = 4;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <readCols+0x7c>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	701a      	strb	r2, [r3, #0]
		return 0b0100;
 80008ac:	2304      	movs	r3, #4
 80008ae:	e010      	b.n	80008d2 <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 80008b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <readCols+0x80>)
 80008b6:	f000 fe09 	bl	80014cc <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <readCols+0x6a>
		wej = 8;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <readCols+0x7c>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	701a      	strb	r2, [r3, #0]
		return 0b1000;
 80008c6:	2308      	movs	r3, #8
 80008c8:	e003      	b.n	80008d2 <readCols+0x72>
	}
	wej = 0;
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <readCols+0x7c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40020400 	.word	0x40020400
 80008dc:	20000098 	.word	0x20000098
 80008e0:	40020000 	.word	0x40020000

080008e4 <decode>:

uint8_t decode(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	scanRows();
 80008ea:	f7ff fef7 	bl	80006dc <scanRows>
	uint8_t cols = readCols();
 80008ee:	f7ff ffb7 	bl	8000860 <readCols>
 80008f2:	4603      	mov	r3, r0
 80008f4:	717b      	strb	r3, [r7, #5]
	uint8_t rows = wyj;
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <decode+0xd4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	713b      	strb	r3, [r7, #4]
	uint8_t rejMS = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	71fb      	strb	r3, [r7, #7]
	uint8_t rejLS = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	71bb      	strb	r3, [r7, #6]

	if(cols != 0)
 8000904:	797b      	ldrb	r3, [r7, #5]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d051      	beq.n	80009ae <decode+0xca>
	{
	        switch(rows){
 800090a:	793b      	ldrb	r3, [r7, #4]
 800090c:	3b01      	subs	r3, #1
 800090e:	2b07      	cmp	r3, #7
 8000910:	d81e      	bhi.n	8000950 <decode+0x6c>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <decode+0x34>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000939 	.word	0x08000939
 800091c:	0800093f 	.word	0x0800093f
 8000920:	08000951 	.word	0x08000951
 8000924:	08000945 	.word	0x08000945
 8000928:	08000951 	.word	0x08000951
 800092c:	08000951 	.word	0x08000951
 8000930:	08000951 	.word	0x08000951
 8000934:	0800094b 	.word	0x0800094b
				case 1 :
					rejMS = 0b0000;
 8000938:	2300      	movs	r3, #0
 800093a:	71fb      	strb	r3, [r7, #7]
					break;
 800093c:	e00a      	b.n	8000954 <decode+0x70>
				case 2 :
					rejMS = 0b0100;
 800093e:	2304      	movs	r3, #4
 8000940:	71fb      	strb	r3, [r7, #7]
					break;
 8000942:	e007      	b.n	8000954 <decode+0x70>
				case 4 :
					rejMS = 0b1000;
 8000944:	2308      	movs	r3, #8
 8000946:	71fb      	strb	r3, [r7, #7]
					break;
 8000948:	e004      	b.n	8000954 <decode+0x70>
				case 8 :
					rejMS = 0b1100;
 800094a:	230c      	movs	r3, #12
 800094c:	71fb      	strb	r3, [r7, #7]
					break;
 800094e:	e001      	b.n	8000954 <decode+0x70>
				default: rejMS = 0b00;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]
	        }

	        switch(cols){
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	3b01      	subs	r3, #1
 8000958:	2b07      	cmp	r3, #7
 800095a:	d81f      	bhi.n	800099c <decode+0xb8>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <decode+0x80>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000985 	.word	0x08000985
 8000968:	0800098b 	.word	0x0800098b
 800096c:	0800099d 	.word	0x0800099d
 8000970:	08000991 	.word	0x08000991
 8000974:	0800099d 	.word	0x0800099d
 8000978:	0800099d 	.word	0x0800099d
 800097c:	0800099d 	.word	0x0800099d
 8000980:	08000997 	.word	0x08000997
				case 1 :
					rejLS = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	71bb      	strb	r3, [r7, #6]
					break;
 8000988:	e00a      	b.n	80009a0 <decode+0xbc>
				case 2 :
					rejLS = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	71bb      	strb	r3, [r7, #6]
					break;
 800098e:	e007      	b.n	80009a0 <decode+0xbc>
				case 4 :
					rejLS = 0b10;
 8000990:	2302      	movs	r3, #2
 8000992:	71bb      	strb	r3, [r7, #6]
					break;
 8000994:	e004      	b.n	80009a0 <decode+0xbc>
				case 8 :
					rejLS = 0b11;
 8000996:	2303      	movs	r3, #3
 8000998:	71bb      	strb	r3, [r7, #6]
					break;
 800099a:	e001      	b.n	80009a0 <decode+0xbc>
				default: rejLS = 0b00;
 800099c:	2300      	movs	r3, #0
 800099e:	71bb      	strb	r3, [r7, #6]
	        }
		return rejMS + rejLS + 1;
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	e000      	b.n	80009b0 <decode+0xcc>
	}

	return 0;
 80009ae:	2300      	movs	r3, #0

}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000

080009bc <ObslugaKlawiatury>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ObslugaKlawiatury( void * pvParameters )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	uint8_t keycode = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
	uint8_t old_keycode[4] = {0,0,0,0};
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
	uint8_t counter = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75bb      	strb	r3, [r7, #22]
	char *kod = '0';
 80009d0:	2330      	movs	r3, #48	; 0x30
 80009d2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//scanRows();
		//old_keycode = keycode;
		if (counter%4 == 0) old_keycode[counter/4] = keycode;
 80009d4:	7dbb      	ldrb	r3, [r7, #22]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d107      	bne.n	80009f0 <ObslugaKlawiatury+0x34>
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3318      	adds	r3, #24
 80009e8:	443b      	add	r3, r7
 80009ea:	7dfa      	ldrb	r2, [r7, #23]
 80009ec:	f803 2c08 	strb.w	r2, [r3, #-8]
		keycode = decode();
 80009f0:	f7ff ff78 	bl	80008e4 <decode>
 80009f4:	4603      	mov	r3, r0
 80009f6:	75fb      	strb	r3, [r7, #23]
		// insert keycode into buffer/queue/semafor
		//xQueueSendToFront(keypadBuffer, keycode, 10);
		if(keycode != 0 && old_keycode[0] == 0 && old_keycode[1] == 0 && old_keycode[2] == 0 && old_keycode[3] == 0) //obsługa drgań styków
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d025      	beq.n	8000a4a <ObslugaKlawiatury+0x8e>
 80009fe:	7c3b      	ldrb	r3, [r7, #16]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d122      	bne.n	8000a4a <ObslugaKlawiatury+0x8e>
 8000a04:	7c7b      	ldrb	r3, [r7, #17]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11f      	bne.n	8000a4a <ObslugaKlawiatury+0x8e>
 8000a0a:	7cbb      	ldrb	r3, [r7, #18]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11c      	bne.n	8000a4a <ObslugaKlawiatury+0x8e>
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d119      	bne.n	8000a4a <ObslugaKlawiatury+0x8e>
		{
			  xQueue = xQueueCreate( 10, sizeof(uint8_t));
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f002 fa00 	bl	8002e20 <xQueueGenericCreate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <ObslugaKlawiatury+0x98>)
 8000a24:	6013      	str	r3, [r2, #0]

			  if(xQueue != 0)
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <ObslugaKlawiatury+0x98>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00d      	beq.n	8000a4a <ObslugaKlawiatury+0x8e>
			  {
				  sprintf(&kod, "%01d", keycode);
 8000a2e:	7dfa      	ldrb	r2, [r7, #23]
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <ObslugaKlawiatury+0x9c>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fcc8 	bl	80053cc <siprintf>
				  HAL_UART_Transmit(&huart2, &kod, 2, 10);
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	230a      	movs	r3, #10
 8000a42:	2202      	movs	r2, #2
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <ObslugaKlawiatury+0xa0>)
 8000a46:	f001 fc31 	bl	80022ac <HAL_UART_Transmit>
			  // Queue was not created and must not be used.
			  }
		};

		if(counter = 16) counter = 0;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	75bb      	strb	r3, [r7, #22]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	75bb      	strb	r3, [r7, #22]
	{
 8000a52:	e7bf      	b.n	80009d4 <ObslugaKlawiatury+0x18>
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	08005ca4 	.word	0x08005ca4
 8000a5c:	200000fc 	.word	0x200000fc

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 fa45 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f81d 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff fda9 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 f9a3 	bl	8000dbc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a76:	f000 f88b 	bl	8000b90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	4905      	ldr	r1, [pc, #20]	; (8000aa0 <main+0x40>)
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <main+0x44>)
 8000a8c:	f002 fe6b 	bl	8003766 <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a90:	f001 ffb4 	bl	80029fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a94:	f7ff fd8e 	bl	80005b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a98:	f001 ffd4 	bl	8002a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <main+0x3c>
 8000a9e:	bf00      	nop
 8000aa0:	08005cac 	.word	0x08005cac
 8000aa4:	080009bd 	.word	0x080009bd

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	; 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 fc80 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <SystemClock_Config+0xd4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <SystemClock_Config+0xd4>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemClock_Config+0xd4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <SystemClock_Config+0xd8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <SystemClock_Config+0xd8>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemClock_Config+0xd8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b10:	2310      	movs	r3, #16
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b26:	2304      	movs	r3, #4
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f844 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b42:	f000 f81f 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fce4 	bl	8001530 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b6e:	f000 f809 	bl	8000b84 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_SPI1_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bc4:	2228      	movs	r2, #40	; 0x28
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000be2:	f001 fa8d 	bl	8002100 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bec:	f7ff ffca 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000a0 	.word	0x200000a0
 8000bf8:	40013000 	.word	0x40013000

08000bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 fa97 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 fa3e 	bl	8001152 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f940 	bl	8000f98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d18:	f003 fab2 	bl	8004280 <xTaskGetSchedulerState>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d001      	beq.n	8000d26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d22:	f004 f899 	bl	8004e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f004 faf6 	bl	800534c <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200000f8 	.word	0x200000f8
 8000d94:	20004aa8 	.word	0x20004aa8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART2_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f001 fa0d 	bl	8002212 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f7ff fec1 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000fc 	.word	0x200000fc
 8000e0c:	40004400 	.word	0x40004400

08000e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12b      	bne.n	8000e8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e86:	f000 f98d 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ff65 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f004 fa43 	bl	8005358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fdc5 	bl	8000a60 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ee4:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 8000ee8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000eec:	20004aa4 	.word	0x20004aa4

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f90d 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff feb0 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f917 	bl	800118a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f8ed 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	20000008 	.word	0x20000008

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	20000140 	.word	0x20000140

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000140 	.word	0x20000140

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff47 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5c 	bl	8001020 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb0 	bl	80010f8 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	e165      	b.n	800148c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8154 	bne.w	8001486 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d005      	beq.n	80011f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d130      	bne.n	8001258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 0201 	and.w	r2, r3, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b03      	cmp	r3, #3
 8001262:	d017      	beq.n	8001294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d123      	bne.n	80012e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	69b9      	ldr	r1, [r7, #24]
 80012e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0203 	and.w	r2, r3, #3
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80ae 	beq.w	8001486 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a5c      	ldr	r2, [pc, #368]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001346:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_GPIO_Init+0x304>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x308>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_GPIO_Init+0x30c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x310>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x20a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x206>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x202>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00c      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e00a      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x21c>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x304>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <HAL_GPIO_Init+0x324>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x324>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x324>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_GPIO_Init+0x324>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f ae96 	bls.w	80011c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001518:	e003      	b.n	8001522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cc      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d90c      	bls.n	800156c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b8      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800158e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	494d      	ldr	r1, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d044      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d119      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e07f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e067      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4934      	ldr	r1, [pc, #208]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fcce 	bl	8000fc0 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff fcca 	bl	8000fc0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d20c      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e032      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f855 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490a      	ldr	r1, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fc2e 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08005ccc 	.word	0x08005ccc
 80016f4:	20000004 	.word	0x20000004
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_GetHCLKFreq+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001718:	f7ff fff0 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 800171c:	4602      	mov	r2, r0
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	4903      	ldr	r1, [pc, #12]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800172a:	5ccb      	ldrb	r3, [r1, r3]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	08005cdc 	.word	0x08005cdc

0800173c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001740:	f7ff ffdc 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	0b5b      	lsrs	r3, r3, #13
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	08005cdc 	.word	0x08005cdc

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b0ae      	sub	sp, #184	; 0xb8
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178a:	4bcb      	ldr	r3, [pc, #812]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b0c      	cmp	r3, #12
 8001794:	f200 8206 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x440>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017d5 	.word	0x080017d5
 80017a4:	08001ba5 	.word	0x08001ba5
 80017a8:	08001ba5 	.word	0x08001ba5
 80017ac:	08001ba5 	.word	0x08001ba5
 80017b0:	080017dd 	.word	0x080017dd
 80017b4:	08001ba5 	.word	0x08001ba5
 80017b8:	08001ba5 	.word	0x08001ba5
 80017bc:	08001ba5 	.word	0x08001ba5
 80017c0:	080017e5 	.word	0x080017e5
 80017c4:	08001ba5 	.word	0x08001ba5
 80017c8:	08001ba5 	.word	0x08001ba5
 80017cc:	08001ba5 	.word	0x08001ba5
 80017d0:	080019d5 	.word	0x080019d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4bb9      	ldr	r3, [pc, #740]	; (8001abc <HAL_RCC_GetSysClockFreq+0x358>)
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80017da:	e1e7      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4bb8      	ldr	r3, [pc, #736]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017e2:	e1e3      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4bb4      	ldr	r3, [pc, #720]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	4bb1      	ldr	r3, [pc, #708]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d071      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4bae      	ldr	r3, [pc, #696]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001808:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800180c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800181e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001822:	4622      	mov	r2, r4
 8001824:	462b      	mov	r3, r5
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0159      	lsls	r1, r3, #5
 8001830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001834:	0150      	lsls	r0, r2, #5
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4621      	mov	r1, r4
 800183c:	1a51      	subs	r1, r2, r1
 800183e:	6439      	str	r1, [r7, #64]	; 0x40
 8001840:	4629      	mov	r1, r5
 8001842:	eb63 0301 	sbc.w	r3, r3, r1
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001854:	4649      	mov	r1, r9
 8001856:	018b      	lsls	r3, r1, #6
 8001858:	4641      	mov	r1, r8
 800185a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185e:	4641      	mov	r1, r8
 8001860:	018a      	lsls	r2, r1, #6
 8001862:	4641      	mov	r1, r8
 8001864:	1a51      	subs	r1, r2, r1
 8001866:	63b9      	str	r1, [r7, #56]	; 0x38
 8001868:	4649      	mov	r1, r9
 800186a:	eb63 0301 	sbc.w	r3, r3, r1
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800187c:	4649      	mov	r1, r9
 800187e:	00cb      	lsls	r3, r1, #3
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001886:	4641      	mov	r1, r8
 8001888:	00ca      	lsls	r2, r1, #3
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4603      	mov	r3, r0
 8001890:	4622      	mov	r2, r4
 8001892:	189b      	adds	r3, r3, r2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
 8001896:	462b      	mov	r3, r5
 8001898:	460a      	mov	r2, r1
 800189a:	eb42 0303 	adc.w	r3, r2, r3
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ac:	4629      	mov	r1, r5
 80018ae:	024b      	lsls	r3, r1, #9
 80018b0:	4621      	mov	r1, r4
 80018b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b6:	4621      	mov	r1, r4
 80018b8:	024a      	lsls	r2, r1, #9
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80018cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80018d0:	f7fe fcee 	bl	80002b0 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018de:	e067      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80018fa:	2300      	movs	r3, #0
 80018fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001934:	4649      	mov	r1, r9
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4641      	mov	r1, r8
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4641      	mov	r1, r8
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4641      	mov	r1, r8
 8001944:	ebb2 0a01 	subs.w	sl, r2, r1
 8001948:	4649      	mov	r1, r9
 800194a:	eb63 0b01 	sbc.w	fp, r3, r1
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800195a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800195e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001962:	4692      	mov	sl, r2
 8001964:	469b      	mov	fp, r3
 8001966:	4623      	mov	r3, r4
 8001968:	eb1a 0303 	adds.w	r3, sl, r3
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	462b      	mov	r3, r5
 8001970:	eb4b 0303 	adc.w	r3, fp, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001982:	4629      	mov	r1, r5
 8001984:	028b      	lsls	r3, r1, #10
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800198c:	4621      	mov	r1, r4
 800198e:	028a      	lsls	r2, r1, #10
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001998:	2200      	movs	r2, #0
 800199a:	673b      	str	r3, [r7, #112]	; 0x70
 800199c:	677a      	str	r2, [r7, #116]	; 0x74
 800199e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019a2:	f7fe fc85 	bl	80002b0 <__aeabi_uldivmod>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4613      	mov	r3, r2
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80019c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019d2:	e0eb      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d06b      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	2200      	movs	r2, #0
 80019f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80019f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001a00:	2300      	movs	r3, #0
 8001a02:	667b      	str	r3, [r7, #100]	; 0x64
 8001a04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a08:	4622      	mov	r2, r4
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	f04f 0000 	mov.w	r0, #0
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	0159      	lsls	r1, r3, #5
 8001a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1a:	0150      	lsls	r0, r2, #5
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4621      	mov	r1, r4
 8001a22:	1a51      	subs	r1, r2, r1
 8001a24:	61b9      	str	r1, [r7, #24]
 8001a26:	4629      	mov	r1, r5
 8001a28:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a3a:	4659      	mov	r1, fp
 8001a3c:	018b      	lsls	r3, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a44:	4651      	mov	r1, sl
 8001a46:	018a      	lsls	r2, r1, #6
 8001a48:	4651      	mov	r1, sl
 8001a4a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4e:	4659      	mov	r1, fp
 8001a50:	eb63 0901 	sbc.w	r9, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	eb18 0303 	adds.w	r3, r8, r3
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	462b      	mov	r3, r5
 8001a76:	eb49 0303 	adc.w	r3, r9, r3
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	024b      	lsls	r3, r1, #9
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a92:	4621      	mov	r1, r4
 8001a94:	024a      	lsls	r2, r1, #9
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aa2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001aa8:	f7fe fc02 	bl	80002b0 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ab6:	e065      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x420>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	4611      	mov	r1, r2
 8001ad0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8001ada:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ade:	4642      	mov	r2, r8
 8001ae0:	464b      	mov	r3, r9
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4641      	mov	r1, r8
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	4649      	mov	r1, r9
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b10:	4659      	mov	r1, fp
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4651      	mov	r1, sl
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	1a54      	subs	r4, r2, r1
 8001b22:	4659      	mov	r1, fp
 8001b24:	eb63 0501 	sbc.w	r5, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b76:	f7fe fb9b 	bl	80002b0 <__aeabi_uldivmod>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0f1b      	lsrs	r3, r3, #28
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ba2:	e003      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	37b8      	adds	r7, #184	; 0xb8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	00f42400 	.word	0x00f42400

08001bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e28d      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8083 	beq.w	8001cea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001be4:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d019      	beq.n	8001c24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bf0:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bfc:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x124>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e25a      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x90>
 8001c46:	4b7c      	ldr	r3, [pc, #496]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7b      	ldr	r2, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xcc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xb4>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a75      	ldr	r2, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a72      	ldr	r2, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xcc>
 8001c78:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6b      	ldr	r2, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f992 	bl	8000fc0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f98e 	bl	8000fc0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e21f      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xdc>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f97e 	bl	8000fc0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f97a 	bl	8000fc0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e20b      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x104>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cf6:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d017      	beq.n	8001d32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d02:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x186>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1d3      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4937      	ldr	r1, [pc, #220]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f927 	bl	8000fc0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff f923 	bl	8000fc0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1b4      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4925      	ldr	r1, [pc, #148]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f906 	bl	8000fc0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff f902 	bl	8000fc0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e193      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d036      	beq.n	8001e50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f8e6 	bl	8000fc0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff f8e2 	bl	8000fc0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e173      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x234>
 8001e16:	e01b      	b.n	8001e50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f8cf 	bl	8000fc0 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	e00e      	b.n	8001e44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff f8cb 	bl	8000fc0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d907      	bls.n	8001e44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e15c      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	42470000 	.word	0x42470000
 8001e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b8a      	ldr	r3, [pc, #552]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ea      	bne.n	8001e26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8097 	beq.w	8001f8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b83      	ldr	r3, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a75      	ldr	r2, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f88b 	bl	8000fc0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff f887 	bl	8000fc0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e118      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x31e>
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x358>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x340>
 8001eea:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0x358>
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a59      	ldr	r2, [pc, #356]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a56      	ldr	r2, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff f84c 	bl	8000fc0 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f848 	bl	8000fc0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0d7      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ee      	beq.n	8001f2c <HAL_RCC_OscConfig+0x368>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff f836 	bl	8000fc0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff f832 	bl	8000fc0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0c1      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ee      	bne.n	8001f58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4a3a      	ldr	r2, [pc, #232]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80ad 	beq.w	80020f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d060      	beq.n	8002064 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d145      	bne.n	8002036 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x4b4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f806 	bl	8000fc0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f802 	bl	8000fc0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e093      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	071b      	lsls	r3, r3, #28
 8002002:	491b      	ldr	r1, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4b4>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe ffd7 	bl	8000fc0 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe ffd3 	bl	8000fc0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e064      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x452>
 8002034:	e05c      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x4b4>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe ffc0 	bl	8000fc0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ffbc 	bl	8000fc0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e04d      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x480>
 8002062:	e045      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e040      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_RCC_OscConfig+0x538>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d030      	beq.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d129      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d122      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d119      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10f      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07b      	b.n	800220a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d009      	beq.n	8002138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
 800212a:	e005      	b.n	8002138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fd52 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0104 	and.w	r1, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0210 	and.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e03f      	b.n	80022a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fde9 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2224      	movs	r2, #36	; 0x24
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f928 	bl	80024ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800226a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800227a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d17c      	bne.n	80023c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Transmit+0x2c>
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e075      	b.n	80023c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Transmit+0x3e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e06e      	b.n	80023c8 <HAL_UART_Transmit+0x11c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2221      	movs	r2, #33	; 0x21
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002300:	f7fe fe5e 	bl	8000fc0 <HAL_GetTick>
 8002304:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d108      	bne.n	800232e <HAL_UART_Transmit+0x82>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e003      	b.n	8002336 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800233e:	e02a      	b.n	8002396 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f840 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e036      	b.n	80023c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800236e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	3302      	adds	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e007      	b.n	8002388 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1cf      	bne.n	8002340 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f810 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e006      	b.n	80023c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
  }
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b090      	sub	sp, #64	; 0x40
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e0:	e050      	b.n	8002484 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d04c      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f0:	f7fe fde6 	bl	8000fc0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d241      	bcs.n	8002484 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	e853 3f00 	ldrex	r3, [r3]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002420:	637a      	str	r2, [r7, #52]	; 0x34
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002428:	e841 2300 	strex	r3, r2, [r1]
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e5      	bne.n	8002400 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3314      	adds	r3, #20
 800243a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	e853 3f00 	ldrex	r3, [r3]
 8002442:	613b      	str	r3, [r7, #16]
   return(result);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3314      	adds	r3, #20
 8002452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002454:	623a      	str	r2, [r7, #32]
 8002456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002458:	69f9      	ldr	r1, [r7, #28]
 800245a:	6a3a      	ldr	r2, [r7, #32]
 800245c:	e841 2300 	strex	r3, r2, [r1]
 8002460:	61bb      	str	r3, [r7, #24]
   return(result);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e5      	bne.n	8002434 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e00f      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d09f      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3740      	adds	r7, #64	; 0x40
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b0:	b0c0      	sub	sp, #256	; 0x100
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	ea40 0301 	orr.w	r3, r0, r1
 80024d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002504:	f021 010c 	bic.w	r1, r1, #12
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002512:	430b      	orrs	r3, r1
 8002514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002526:	6999      	ldr	r1, [r3, #24]
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	ea40 0301 	orr.w	r3, r0, r1
 8002532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <UART_SetConfig+0x2cc>)
 800253c:	429a      	cmp	r2, r3
 800253e:	d005      	beq.n	800254c <UART_SetConfig+0xa0>
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <UART_SetConfig+0x2d0>)
 8002548:	429a      	cmp	r2, r3
 800254a:	d104      	bne.n	8002556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800254c:	f7ff f8f6 	bl	800173c <HAL_RCC_GetPCLK2Freq>
 8002550:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002554:	e003      	b.n	800255e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002556:	f7ff f8dd 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 800255a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002568:	f040 810c 	bne.w	8002784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800256c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002570:	2200      	movs	r2, #0
 8002572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002576:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800257a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800257e:	4622      	mov	r2, r4
 8002580:	462b      	mov	r3, r5
 8002582:	1891      	adds	r1, r2, r2
 8002584:	65b9      	str	r1, [r7, #88]	; 0x58
 8002586:	415b      	adcs	r3, r3
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800258e:	4621      	mov	r1, r4
 8002590:	eb12 0801 	adds.w	r8, r2, r1
 8002594:	4629      	mov	r1, r5
 8002596:	eb43 0901 	adc.w	r9, r3, r1
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ae:	4690      	mov	r8, r2
 80025b0:	4699      	mov	r9, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	eb18 0303 	adds.w	r3, r8, r3
 80025b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025bc:	462b      	mov	r3, r5
 80025be:	eb49 0303 	adc.w	r3, r9, r3
 80025c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025da:	460b      	mov	r3, r1
 80025dc:	18db      	adds	r3, r3, r3
 80025de:	653b      	str	r3, [r7, #80]	; 0x50
 80025e0:	4613      	mov	r3, r2
 80025e2:	eb42 0303 	adc.w	r3, r2, r3
 80025e6:	657b      	str	r3, [r7, #84]	; 0x54
 80025e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025f0:	f7fd fe5e 	bl	80002b0 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <UART_SetConfig+0x2d4>)
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	011c      	lsls	r4, r3, #4
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800260c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	64b9      	str	r1, [r7, #72]	; 0x48
 800261c:	415b      	adcs	r3, r3
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002624:	4641      	mov	r1, r8
 8002626:	eb12 0a01 	adds.w	sl, r2, r1
 800262a:	4649      	mov	r1, r9
 800262c:	eb43 0b01 	adc.w	fp, r3, r1
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800263c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002644:	4692      	mov	sl, r2
 8002646:	469b      	mov	fp, r3
 8002648:	4643      	mov	r3, r8
 800264a:	eb1a 0303 	adds.w	r3, sl, r3
 800264e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002652:	464b      	mov	r3, r9
 8002654:	eb4b 0303 	adc.w	r3, fp, r3
 8002658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002668:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800266c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002670:	460b      	mov	r3, r1
 8002672:	18db      	adds	r3, r3, r3
 8002674:	643b      	str	r3, [r7, #64]	; 0x40
 8002676:	4613      	mov	r3, r2
 8002678:	eb42 0303 	adc.w	r3, r2, r3
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
 800267e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002686:	f7fd fe13 	bl	80002b0 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4611      	mov	r1, r2
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <UART_SetConfig+0x2d4>)
 8002692:	fba3 2301 	umull	r2, r3, r3, r1
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2264      	movs	r2, #100	; 0x64
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	1acb      	subs	r3, r1, r3
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <UART_SetConfig+0x2d4>)
 80026a8:	fba3 2302 	umull	r2, r3, r3, r2
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b4:	441c      	add	r4, r3
 80026b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026c8:	4642      	mov	r2, r8
 80026ca:	464b      	mov	r3, r9
 80026cc:	1891      	adds	r1, r2, r2
 80026ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80026d0:	415b      	adcs	r3, r3
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d8:	4641      	mov	r1, r8
 80026da:	1851      	adds	r1, r2, r1
 80026dc:	6339      	str	r1, [r7, #48]	; 0x30
 80026de:	4649      	mov	r1, r9
 80026e0:	414b      	adcs	r3, r1
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026f0:	4659      	mov	r1, fp
 80026f2:	00cb      	lsls	r3, r1, #3
 80026f4:	4651      	mov	r1, sl
 80026f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fa:	4651      	mov	r1, sl
 80026fc:	00ca      	lsls	r2, r1, #3
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	4603      	mov	r3, r0
 8002704:	4642      	mov	r2, r8
 8002706:	189b      	adds	r3, r3, r2
 8002708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800270c:	464b      	mov	r3, r9
 800270e:	460a      	mov	r2, r1
 8002710:	eb42 0303 	adc.w	r3, r2, r3
 8002714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002724:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800272c:	460b      	mov	r3, r1
 800272e:	18db      	adds	r3, r3, r3
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	4613      	mov	r3, r2
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002742:	f7fd fdb5 	bl	80002b0 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <UART_SetConfig+0x2d4>)
 800274c:	fba3 1302 	umull	r1, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	2164      	movs	r1, #100	; 0x64
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3332      	adds	r3, #50	; 0x32
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <UART_SetConfig+0x2d4>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	f003 0207 	and.w	r2, r3, #7
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4422      	add	r2, r4
 8002772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002774:	e105      	b.n	8002982 <UART_SetConfig+0x4d6>
 8002776:	bf00      	nop
 8002778:	40011000 	.word	0x40011000
 800277c:	40011400 	.word	0x40011400
 8002780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800278e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002796:	4642      	mov	r2, r8
 8002798:	464b      	mov	r3, r9
 800279a:	1891      	adds	r1, r2, r2
 800279c:	6239      	str	r1, [r7, #32]
 800279e:	415b      	adcs	r3, r3
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a6:	4641      	mov	r1, r8
 80027a8:	1854      	adds	r4, r2, r1
 80027aa:	4649      	mov	r1, r9
 80027ac:	eb43 0501 	adc.w	r5, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	00eb      	lsls	r3, r5, #3
 80027ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027be:	00e2      	lsls	r2, r4, #3
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	18e3      	adds	r3, r4, r3
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027cc:	464b      	mov	r3, r9
 80027ce:	eb45 0303 	adc.w	r3, r5, r3
 80027d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027f2:	4629      	mov	r1, r5
 80027f4:	008b      	lsls	r3, r1, #2
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027fc:	4621      	mov	r1, r4
 80027fe:	008a      	lsls	r2, r1, #2
 8002800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002804:	f7fd fd54 	bl	80002b0 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <UART_SetConfig+0x4e4>)
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	011c      	lsls	r4, r3, #4
 8002816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002820:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	1891      	adds	r1, r2, r2
 800282e:	61b9      	str	r1, [r7, #24]
 8002830:	415b      	adcs	r3, r3
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002838:	4641      	mov	r1, r8
 800283a:	1851      	adds	r1, r2, r1
 800283c:	6139      	str	r1, [r7, #16]
 800283e:	4649      	mov	r1, r9
 8002840:	414b      	adcs	r3, r1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002850:	4659      	mov	r1, fp
 8002852:	00cb      	lsls	r3, r1, #3
 8002854:	4651      	mov	r1, sl
 8002856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285a:	4651      	mov	r1, sl
 800285c:	00ca      	lsls	r2, r1, #3
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	4603      	mov	r3, r0
 8002864:	4642      	mov	r2, r8
 8002866:	189b      	adds	r3, r3, r2
 8002868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800286c:	464b      	mov	r3, r9
 800286e:	460a      	mov	r2, r1
 8002870:	eb42 0303 	adc.w	r3, r2, r3
 8002874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	67bb      	str	r3, [r7, #120]	; 0x78
 8002882:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002890:	4649      	mov	r1, r9
 8002892:	008b      	lsls	r3, r1, #2
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289a:	4641      	mov	r1, r8
 800289c:	008a      	lsls	r2, r1, #2
 800289e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028a2:	f7fd fd05 	bl	80002b0 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <UART_SetConfig+0x4e4>)
 80028ac:	fba3 1302 	umull	r1, r3, r3, r2
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	2164      	movs	r1, #100	; 0x64
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	3332      	adds	r3, #50	; 0x32
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <UART_SetConfig+0x4e4>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ca:	441c      	add	r4, r3
 80028cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d0:	2200      	movs	r2, #0
 80028d2:	673b      	str	r3, [r7, #112]	; 0x70
 80028d4:	677a      	str	r2, [r7, #116]	; 0x74
 80028d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028da:	4642      	mov	r2, r8
 80028dc:	464b      	mov	r3, r9
 80028de:	1891      	adds	r1, r2, r2
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	415b      	adcs	r3, r3
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ea:	4641      	mov	r1, r8
 80028ec:	1851      	adds	r1, r2, r1
 80028ee:	6039      	str	r1, [r7, #0]
 80028f0:	4649      	mov	r1, r9
 80028f2:	414b      	adcs	r3, r1
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002902:	4659      	mov	r1, fp
 8002904:	00cb      	lsls	r3, r1, #3
 8002906:	4651      	mov	r1, sl
 8002908:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290c:	4651      	mov	r1, sl
 800290e:	00ca      	lsls	r2, r1, #3
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	4603      	mov	r3, r0
 8002916:	4642      	mov	r2, r8
 8002918:	189b      	adds	r3, r3, r2
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
 800291c:	464b      	mov	r3, r9
 800291e:	460a      	mov	r2, r1
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	663b      	str	r3, [r7, #96]	; 0x60
 8002930:	667a      	str	r2, [r7, #100]	; 0x64
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800293e:	4649      	mov	r1, r9
 8002940:	008b      	lsls	r3, r1, #2
 8002942:	4641      	mov	r1, r8
 8002944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002948:	4641      	mov	r1, r8
 800294a:	008a      	lsls	r2, r1, #2
 800294c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002950:	f7fd fcae 	bl	80002b0 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <UART_SetConfig+0x4e4>)
 800295a:	fba3 1302 	umull	r1, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	4a08      	ldr	r2, [pc, #32]	; (8002990 <UART_SetConfig+0x4e4>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	f003 020f 	and.w	r2, r3, #15
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4422      	add	r2, r4
 8002980:	609a      	str	r2, [r3, #8]
}
 8002982:	bf00      	nop
 8002984:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	51eb851f 	.word	0x51eb851f

08002994 <__NVIC_SetPriority>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029ec:	2100      	movs	r1, #0
 80029ee:	f06f 0004 	mvn.w	r0, #4
 80029f2:	f7ff ffcf 	bl	8002994 <__NVIC_SetPriority>
#endif
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a02:	f3ef 8305 	mrs	r3, IPSR
 8002a06:	603b      	str	r3, [r7, #0]
  return(result);
 8002a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a0e:	f06f 0305 	mvn.w	r3, #5
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	e00c      	b.n	8002a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <osKernelInitialize+0x44>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <osKernelInitialize+0x44>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	e002      	b.n	8002a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000144 	.word	0x20000144

08002a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4a:	f3ef 8305 	mrs	r3, IPSR
 8002a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a56:	f06f 0305 	mvn.w	r3, #5
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	e010      	b.n	8002a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <osKernelStart+0x48>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d109      	bne.n	8002a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a66:	f7ff ffbf 	bl	80029e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <osKernelStart+0x48>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a70:	f000 ffbe 	bl	80039f0 <vTaskStartScheduler>
      stat = osOK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	e002      	b.n	8002a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000144 	.word	0x20000144

08002a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a07      	ldr	r2, [pc, #28]	; (8002abc <vApplicationGetIdleTaskMemory+0x2c>)
 8002aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8002aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000148 	.word	0x20000148
 8002ac0:	200001a4 	.word	0x200001a4

08002ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <vApplicationGetTimerTaskMemory+0x30>)
 8002ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	200003a4 	.word	0x200003a4
 8002af4:	20000400 	.word	0x20000400

08002af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f103 0208 	add.w	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 0208 	add.w	r2, r3, #8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f103 0208 	add.w	r2, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d103      	bne.n	8002bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e00c      	b.n	8002bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e002      	b.n	8002bc8 <vListInsert+0x2e>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d2f6      	bcs.n	8002bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6852      	ldr	r2, [r2, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d103      	bne.n	8002c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c8a:	f002 f853 	bl	8004d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	68f9      	ldr	r1, [r7, #12]
 8002cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d114      	bne.n	8002d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01a      	beq.n	8002d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3310      	adds	r3, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 f909 	bl	8003f04 <xTaskRemoveFromEventList>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <xQueueGenericReset+0xcc>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	e009      	b.n	8002d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3310      	adds	r3, #16
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fef2 	bl	8002af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3324      	adds	r3, #36	; 0x24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff feed 	bl	8002af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d1e:	f002 f839 	bl	8004d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	; 0x38
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <xQueueGenericCreateStatic+0x52>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <xQueueGenericCreateStatic+0x56>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericCreateStatic+0x58>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <xQueueGenericCreateStatic+0x7e>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericCreateStatic+0x82>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericCreateStatic+0x84>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61fb      	str	r3, [r7, #28]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dce:	2350      	movs	r3, #80	; 0x50
 8002dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b50      	cmp	r3, #80	; 0x50
 8002dd6:	d00a      	beq.n	8002dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	61bb      	str	r3, [r7, #24]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f83f 	bl	8002e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3730      	adds	r7, #48	; 0x30
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	613b      	str	r3, [r7, #16]
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3350      	adds	r3, #80	; 0x50
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 f88d 	bl	8004f78 <pvPortMalloc>
 8002e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d011      	beq.n	8002e8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3350      	adds	r3, #80	; 0x50
 8002e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e78:	79fa      	ldrb	r2, [r7, #7]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f805 	bl	8002e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e002      	b.n	8002eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	69b8      	ldr	r0, [r7, #24]
 8002ec6:	f7ff fecb 	bl	8002c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xQueueGenericSend+0x32>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <xQueueGenericSend+0x40>
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <xQueueGenericSend+0x44>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <xQueueGenericSend+0x46>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <xQueueGenericSend+0x60>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f38:	bf00      	nop
 8002f3a:	e7fe      	b.n	8002f3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d103      	bne.n	8002f4a <xQueueGenericSend+0x6e>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <xQueueGenericSend+0x72>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <xQueueGenericSend+0x74>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <xQueueGenericSend+0x8e>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	623b      	str	r3, [r7, #32]
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f6a:	f001 f989 	bl	8004280 <xTaskGetSchedulerState>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <xQueueGenericSend+0x9e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSend+0xa2>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSend+0xa4>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61fb      	str	r3, [r7, #28]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f9a:	f001 fecb 	bl	8004d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <xQueueGenericSend+0xd4>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d129      	bne.n	8003004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb6:	f000 fa0b 	bl	80033d0 <prvCopyDataToQueue>
 8002fba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 ff9b 	bl	8003f04 <xTaskRemoveFromEventList>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <xQueueGenericSend+0x1f8>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	e00a      	b.n	8002ffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fec:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <xQueueGenericSend+0x1f8>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ffc:	f001 feca 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 8003000:	2301      	movs	r3, #1
 8003002:	e063      	b.n	80030cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800300a:	f001 fec3 	bl	8004d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800300e:	2300      	movs	r3, #0
 8003010:	e05c      	b.n	80030cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4618      	mov	r0, r3
 800301e:	f000 ffd5 	bl	8003fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003022:	2301      	movs	r3, #1
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003026:	f001 feb5 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800302a:	f000 fd47 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800302e:	f001 fe81 	bl	8004d34 <vPortEnterCritical>
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003038:	b25b      	sxtb	r3, r3
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d103      	bne.n	8003048 <xQueueGenericSend+0x16c>
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	b25b      	sxtb	r3, r3
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d103      	bne.n	800305e <xQueueGenericSend+0x182>
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800305e:	f001 fe99 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003062:	1d3a      	adds	r2, r7, #4
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffc4 	bl	8003ff8 <xTaskCheckForTimeOut>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d124      	bne.n	80030c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003078:	f000 faa2 	bl	80035c0 <prvIsQueueFull>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	3310      	adds	r3, #16
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f000 feea 	bl	8003e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003092:	f000 fa2d 	bl	80034f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003096:	f000 fd1f 	bl	8003ad8 <xTaskResumeAll>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f af7c 	bne.w	8002f9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <xQueueGenericSend+0x1f8>)
 80030a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	e772      	b.n	8002f9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b6:	f000 fa1b 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ba:	f000 fd0d 	bl	8003ad8 <xTaskResumeAll>
 80030be:	e76c      	b.n	8002f9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c2:	f000 fa15 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030c6:	f000 fd07 	bl	8003ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3738      	adds	r7, #56	; 0x38
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b090      	sub	sp, #64	; 0x40
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <xQueueGenericSendFromISR+0x3c>
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <xQueueGenericSendFromISR+0x40>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <xQueueGenericSendFromISR+0x42>
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d103      	bne.n	8003142 <xQueueGenericSendFromISR+0x6a>
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <xQueueGenericSendFromISR+0x6e>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <xQueueGenericSendFromISR+0x70>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	623b      	str	r3, [r7, #32]
}
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003162:	f001 fec9 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003166:	f3ef 8211 	mrs	r2, BASEPRI
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61fa      	str	r2, [r7, #28]
 800317c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800317e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <xQueueGenericSendFromISR+0xbc>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d12f      	bne.n	80031f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800319a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031aa:	f000 f911 	bl	80033d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d112      	bne.n	80031de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d016      	beq.n	80031ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	3324      	adds	r3, #36	; 0x24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fe9d 	bl	8003f04 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031ee:	2301      	movs	r3, #1
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031f2:	e001      	b.n	80031f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003206:	4618      	mov	r0, r3
 8003208:	3740      	adds	r7, #64	; 0x40
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <xQueueReceive+0x30>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	623b      	str	r3, [r7, #32]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <xQueueReceive+0x3e>
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <xQueueReceive+0x42>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueReceive+0x44>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xQueueReceive+0x5e>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61fb      	str	r3, [r7, #28]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326e:	f001 f807 	bl	8004280 <xTaskGetSchedulerState>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xQueueReceive+0x6e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueReceive+0x72>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueReceive+0x74>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueReceive+0x8e>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61bb      	str	r3, [r7, #24]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800329e:	f001 fd49 	bl	8004d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01f      	beq.n	80032ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b2:	f000 f8f7 	bl	80034a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00f      	beq.n	80032e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	3310      	adds	r3, #16
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fe1a 	bl	8003f04 <xTaskRemoveFromEventList>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <xQueueReceive+0x1bc>)
 80032d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032e6:	f001 fd55 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e069      	b.n	80033c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032f4:	f001 fd4e 	bl	8004d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e062      	b.n	80033c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fe60 	bl	8003fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003310:	f001 fd40 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003314:	f000 fbd2 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003318:	f001 fd0c 	bl	8004d34 <vPortEnterCritical>
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003322:	b25b      	sxtb	r3, r3
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d103      	bne.n	8003332 <xQueueReceive+0x122>
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003338:	b25b      	sxtb	r3, r3
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d103      	bne.n	8003348 <xQueueReceive+0x138>
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003348:	f001 fd24 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800334c:	1d3a      	adds	r2, r7, #4
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fe4f 	bl	8003ff8 <xTaskCheckForTimeOut>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d123      	bne.n	80033a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f000 f917 	bl	8003594 <prvIsQueueEmpty>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	3324      	adds	r3, #36	; 0x24
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd75 	bl	8003e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800337a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800337c:	f000 f8b8 	bl	80034f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003380:	f000 fbaa 	bl	8003ad8 <xTaskResumeAll>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d189      	bne.n	800329e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <xQueueReceive+0x1bc>)
 800338c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	e780      	b.n	800329e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800339c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800339e:	f000 f8a7 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033a2:	f000 fb99 	bl	8003ad8 <xTaskResumeAll>
 80033a6:	e77a      	b.n	800329e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033aa:	f000 f8a1 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033ae:	f000 fb93 	bl	8003ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b4:	f000 f8ee 	bl	8003594 <prvIsQueueEmpty>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f43f af6f 	beq.w	800329e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3730      	adds	r7, #48	; 0x30
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14d      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff5e 	bl	80042bc <xTaskPriorityDisinherit>
 8003400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e043      	b.n	8003492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d119      	bne.n	8003444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6858      	ldr	r0, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	f001 ffc0 	bl	80053a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d32b      	bcc.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e026      	b.n	8003492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68d8      	ldr	r0, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	f001 ffa6 	bl	80053a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	425b      	negs	r3, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d207      	bcs.n	8003480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d105      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	3b01      	subs	r3, #1
 8003490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d303      	bcc.n	80034d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68d9      	ldr	r1, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	461a      	mov	r2, r3
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f001 ff5c 	bl	80053a0 <memcpy>
	}
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034f8:	f001 fc1c 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003504:	e011      	b.n	800352a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3324      	adds	r3, #36	; 0x24
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fcf6 	bl	8003f04 <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800351e:	f000 fdcd 	bl	80040bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3b01      	subs	r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dce9      	bgt.n	8003506 <prvUnlockQueue+0x16>
 8003532:	e000      	b.n	8003536 <prvUnlockQueue+0x46>
					break;
 8003534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fc29 	bl	8004d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003542:	f001 fbf7 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800354c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800354e:	e011      	b.n	8003574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fcd1 	bl	8003f04 <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003568:	f000 fda8 	bl	80040bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	3b01      	subs	r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dce9      	bgt.n	8003550 <prvUnlockQueue+0x60>
 800357c:	e000      	b.n	8003580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800357e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003588:	f001 fc04 	bl	8004d94 <vPortExitCritical>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800359c:	f001 fbca 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e001      	b.n	80035b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035b2:	f001 fbef 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c8:	f001 fbb4 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d102      	bne.n	80035de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e001      	b.n	80035e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fbd7 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e014      	b.n	800362a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003600:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <vQueueAddToRegistry+0x50>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <vQueueAddToRegistry+0x50>)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <vQueueAddToRegistry+0x50>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003622:	e006      	b.n	8003632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b07      	cmp	r3, #7
 800362e:	d9e7      	bls.n	8003600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000800 	.word	0x20000800

08003644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003654:	f001 fb6e 	bl	8004d34 <vPortEnterCritical>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d103      	bne.n	800366e <vQueueWaitForMessageRestricted+0x2a>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003674:	b25b      	sxtb	r3, r3
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d103      	bne.n	8003684 <vQueueWaitForMessageRestricted+0x40>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003684:	f001 fb86 	bl	8004d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fc07 	bl	8003eac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff26 	bl	80034f0 <prvUnlockQueue>
	}
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08e      	sub	sp, #56	; 0x38
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	623b      	str	r3, [r7, #32]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61fb      	str	r3, [r7, #28]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036f2:	235c      	movs	r3, #92	; 0x5c
 80036f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b5c      	cmp	r3, #92	; 0x5c
 80036fa:	d00a      	beq.n	8003712 <xTaskCreateStatic+0x66>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003712:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01e      	beq.n	8003758 <xTaskCreateStatic+0xac>
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003732:	2300      	movs	r3, #0
 8003734:	9303      	str	r3, [sp, #12]
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	9302      	str	r3, [sp, #8]
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f850 	bl	80037f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003752:	f000 f8dd 	bl	8003910 <prvAddNewTaskToReadyList>
 8003756:	e001      	b.n	800375c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800375c:	697b      	ldr	r3, [r7, #20]
	}
 800375e:	4618      	mov	r0, r3
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003766:	b580      	push	{r7, lr}
 8003768:	b08c      	sub	sp, #48	; 0x30
 800376a:	af04      	add	r7, sp, #16
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fbfc 	bl	8004f78 <pvPortMalloc>
 8003780:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003788:	205c      	movs	r0, #92	; 0x5c
 800378a:	f001 fbf5 	bl	8004f78 <pvPortMalloc>
 800378e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
 800379c:	e005      	b.n	80037aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f001 fcb6 	bl	8005110 <vPortFree>
 80037a4:	e001      	b.n	80037aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9303      	str	r3, [sp, #12]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f80e 	bl	80037f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d4:	69f8      	ldr	r0, [r7, #28]
 80037d6:	f000 f89b 	bl	8003910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e002      	b.n	80037e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037e6:	69bb      	ldr	r3, [r7, #24]
	}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	21a5      	movs	r1, #165	; 0xa5
 800380a:	f001 fdd7 	bl	80053bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003818:	3b01      	subs	r3, #1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	617b      	str	r3, [r7, #20]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01f      	beq.n	800388e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e012      	b.n	800387a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	7819      	ldrb	r1, [r3, #0]
 800385c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	3334      	adds	r3, #52	; 0x34
 8003864:	460a      	mov	r2, r1
 8003866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d006      	beq.n	8003882 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3301      	adds	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b0f      	cmp	r3, #15
 800387e:	d9e9      	bls.n	8003854 <prvInitialiseNewTask+0x64>
 8003880:	e000      	b.n	8003884 <prvInitialiseNewTask+0x94>
			{
				break;
 8003882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388c:	e003      	b.n	8003896 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2b37      	cmp	r3, #55	; 0x37
 800389a:	d901      	bls.n	80038a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800389c:	2337      	movs	r3, #55	; 0x37
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	2200      	movs	r2, #0
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f93e 	bl	8002b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	3318      	adds	r3, #24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f939 	bl	8002b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	69b8      	ldr	r0, [r7, #24]
 80038f0:	f001 f8f4 	bl	8004adc <pxPortInitialiseStack>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003906:	bf00      	nop
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003918:	f001 fa0c 	bl	8004d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <prvAddNewTaskToReadyList+0xc4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <prvAddNewTaskToReadyList+0xc4>)
 8003924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <prvAddNewTaskToReadyList+0xc8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800392e:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <prvAddNewTaskToReadyList+0xc8>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <prvAddNewTaskToReadyList+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d110      	bne.n	800395e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800393c:	f000 fbe2 	bl	8004104 <prvInitialiseTaskLists>
 8003940:	e00d      	b.n	800395e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <prvAddNewTaskToReadyList+0xcc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <prvAddNewTaskToReadyList+0xc8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	429a      	cmp	r2, r3
 8003956:	d802      	bhi.n	800395e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <prvAddNewTaskToReadyList+0xc8>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <prvAddNewTaskToReadyList+0xd0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <prvAddNewTaskToReadyList+0xd0>)
 8003966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <prvAddNewTaskToReadyList+0xd0>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <prvAddNewTaskToReadyList+0xd4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d903      	bls.n	8003984 <prvAddNewTaskToReadyList+0x74>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <prvAddNewTaskToReadyList+0xd4>)
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <prvAddNewTaskToReadyList+0xd8>)
 8003992:	441a      	add	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff f8d9 	bl	8002b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039a0:	f001 f9f8 	bl	8004d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <prvAddNewTaskToReadyList+0xcc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <prvAddNewTaskToReadyList+0xc8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d207      	bcs.n	80039ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <prvAddNewTaskToReadyList+0xdc>)
 80039bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000d14 	.word	0x20000d14
 80039d8:	20000840 	.word	0x20000840
 80039dc:	20000d20 	.word	0x20000d20
 80039e0:	20000d30 	.word	0x20000d30
 80039e4:	20000d1c 	.word	0x20000d1c
 80039e8:	20000844 	.word	0x20000844
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039fe:	463a      	mov	r2, r7
 8003a00:	1d39      	adds	r1, r7, #4
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f842 	bl	8002a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	9202      	str	r2, [sp, #8]
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	4921      	ldr	r1, [pc, #132]	; (8003aa4 <vTaskStartScheduler+0xb4>)
 8003a20:	4821      	ldr	r0, [pc, #132]	; (8003aa8 <vTaskStartScheduler+0xb8>)
 8003a22:	f7ff fe43 	bl	80036ac <xTaskCreateStatic>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <vTaskStartScheduler+0xbc>)
 8003a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <vTaskStartScheduler+0xbc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e001      	b.n	8003a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a44:	f000 fcfc 	bl	8004440 <xTimerCreateTimerTask>
 8003a48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d116      	bne.n	8003a7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
}
 8003a62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <vTaskStartScheduler+0xc0>)
 8003a66:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <vTaskStartScheduler+0xc4>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <vTaskStartScheduler+0xc8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a78:	f001 f8ba 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a7c:	e00e      	b.n	8003a9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d10a      	bne.n	8003a9c <vTaskStartScheduler+0xac>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60fb      	str	r3, [r7, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <vTaskStartScheduler+0xaa>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	08005cb4 	.word	0x08005cb4
 8003aa8:	080040d5 	.word	0x080040d5
 8003aac:	20000d38 	.word	0x20000d38
 8003ab0:	20000d34 	.word	0x20000d34
 8003ab4:	20000d20 	.word	0x20000d20
 8003ab8:	20000d18 	.word	0x20000d18

08003abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	20000d3c 	.word	0x20000d3c

08003ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <xTaskResumeAll+0x2c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	603b      	str	r3, [r7, #0]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b04:	f001 f916 	bl	8004d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d162      	bne.n	8003be0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <xTaskResumeAll+0x11c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d05e      	beq.n	8003be0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b22:	e02f      	b.n	8003b84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f86b 	bl	8002c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff f866 	bl	8002c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <xTaskResumeAll+0x124>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d903      	bls.n	8003b54 <xTaskResumeAll+0x7c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <xTaskResumeAll+0x124>)
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <xTaskResumeAll+0x128>)
 8003b62:	441a      	add	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f7fe fff1 	bl	8002b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <xTaskResumeAll+0x12c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <xTaskResumeAll+0x130>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1cb      	bne.n	8003b24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b92:	f000 fb55 	bl	8004240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <xTaskResumeAll+0x134>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ba2:	f000 f847 	bl	8003c34 <xTaskIncrementTick>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <xTaskResumeAll+0x130>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f1      	bne.n	8003ba2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <xTaskResumeAll+0x134>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <xTaskResumeAll+0x130>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <xTaskResumeAll+0x138>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003be0:	f001 f8d8 	bl	8004d94 <vPortExitCritical>

	return xAlreadyYielded;
 8003be4:	68bb      	ldr	r3, [r7, #8]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000d3c 	.word	0x20000d3c
 8003bf4:	20000d14 	.word	0x20000d14
 8003bf8:	20000cd4 	.word	0x20000cd4
 8003bfc:	20000d1c 	.word	0x20000d1c
 8003c00:	20000844 	.word	0x20000844
 8003c04:	20000840 	.word	0x20000840
 8003c08:	20000d28 	.word	0x20000d28
 8003c0c:	20000d24 	.word	0x20000d24
 8003c10:	e000ed04 	.word	0xe000ed04

08003c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <xTaskGetTickCount+0x1c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c20:	687b      	ldr	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000d18 	.word	0x20000d18

08003c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <xTaskIncrementTick+0x148>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 808f 	bne.w	8003d66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d120      	bne.n	8003c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c5c:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	603b      	str	r3, [r7, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskIncrementTick+0x46>
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	f000 fad1 	bl	8004240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c9e:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d349      	bcc.n	8003d3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	601a      	str	r2, [r3, #0]
					break;
 8003cba:	e03f      	b.n	8003d3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d203      	bcs.n	8003cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cda:	e02f      	b.n	8003d3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe ff93 	bl	8002c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe ff8a 	bl	8002c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d903      	bls.n	8003d0c <xTaskIncrementTick+0xd8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fe ff15 	bl	8002b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <xTaskIncrementTick+0x168>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3b8      	bcc.n	8003ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3a:	e7b5      	b.n	8003ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <xTaskIncrementTick+0x168>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	4915      	ldr	r1, [pc, #84]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d901      	bls.n	8003d58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <xTaskIncrementTick+0x16c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e004      	b.n	8003d70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xTaskIncrementTick+0x170>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <xTaskIncrementTick+0x170>)
 8003d6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d70:	697b      	ldr	r3, [r7, #20]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000d3c 	.word	0x20000d3c
 8003d80:	20000d18 	.word	0x20000d18
 8003d84:	20000ccc 	.word	0x20000ccc
 8003d88:	20000cd0 	.word	0x20000cd0
 8003d8c:	20000d2c 	.word	0x20000d2c
 8003d90:	20000d34 	.word	0x20000d34
 8003d94:	20000d1c 	.word	0x20000d1c
 8003d98:	20000844 	.word	0x20000844
 8003d9c:	20000840 	.word	0x20000840
 8003da0:	20000d28 	.word	0x20000d28
 8003da4:	20000d24 	.word	0x20000d24

08003da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dae:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <vTaskSwitchContext+0xa8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <vTaskSwitchContext+0xac>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dbc:	e041      	b.n	8003e42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003dbe:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <vTaskSwitchContext+0xac>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <vTaskSwitchContext+0xb0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e010      	b.n	8003dee <vTaskSwitchContext+0x46>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	607b      	str	r3, [r7, #4]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <vTaskSwitchContext+0x3e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <vTaskSwitchContext+0xb4>)
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0e4      	beq.n	8003dcc <vTaskSwitchContext+0x24>
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <vTaskSwitchContext+0xb4>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3308      	adds	r3, #8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d104      	bne.n	8003e32 <vTaskSwitchContext+0x8a>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <vTaskSwitchContext+0xb8>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <vTaskSwitchContext+0xb0>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000d3c 	.word	0x20000d3c
 8003e54:	20000d28 	.word	0x20000d28
 8003e58:	20000d1c 	.word	0x20000d1c
 8003e5c:	20000844 	.word	0x20000844
 8003e60:	20000840 	.word	0x20000840

08003e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60fb      	str	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <vTaskPlaceOnEventList+0x44>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe fe81 	bl	8002b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e98:	2101      	movs	r1, #1
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	f000 fa7c 	bl	8004398 <prvAddCurrentTaskToDelayedList>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000840 	.word	0x20000840

08003eac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	617b      	str	r3, [r7, #20]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7fe fe38 	bl	8002b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f000 fa51 	bl	8004398 <prvAddCurrentTaskToDelayedList>
	}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000840 	.word	0x20000840

08003f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60fb      	str	r3, [r7, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3318      	adds	r3, #24
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fe69 	bl	8002c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <xTaskRemoveFromEventList+0xb0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fe60 	bl	8002c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <xTaskRemoveFromEventList+0xb4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d903      	bls.n	8003f60 <xTaskRemoveFromEventList+0x5c>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <xTaskRemoveFromEventList+0xb4>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <xTaskRemoveFromEventList+0xb8>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7fe fdeb 	bl	8002b52 <vListInsertEnd>
 8003f7c:	e005      	b.n	8003f8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3318      	adds	r3, #24
 8003f82:	4619      	mov	r1, r3
 8003f84:	480e      	ldr	r0, [pc, #56]	; (8003fc0 <xTaskRemoveFromEventList+0xbc>)
 8003f86:	f7fe fde4 	bl	8002b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <xTaskRemoveFromEventList+0xc0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d905      	bls.n	8003fa4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <xTaskRemoveFromEventList+0xc4>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e001      	b.n	8003fa8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fa8:	697b      	ldr	r3, [r7, #20]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000d3c 	.word	0x20000d3c
 8003fb8:	20000d1c 	.word	0x20000d1c
 8003fbc:	20000844 	.word	0x20000844
 8003fc0:	20000cd4 	.word	0x20000cd4
 8003fc4:	20000840 	.word	0x20000840
 8003fc8:	20000d28 	.word	0x20000d28

08003fcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <vTaskInternalSetTimeOutState+0x24>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <vTaskInternalSetTimeOutState+0x28>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000d2c 	.word	0x20000d2c
 8003ff4:	20000d18 	.word	0x20000d18

08003ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	613b      	str	r3, [r7, #16]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800403a:	f000 fe7b 	bl	8004d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <xTaskCheckForTimeOut+0xbc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d102      	bne.n	800405e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e023      	b.n	80040a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <xTaskCheckForTimeOut+0xc0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d007      	beq.n	800407a <xTaskCheckForTimeOut+0x82>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e015      	b.n	80040a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	429a      	cmp	r2, r3
 8004082:	d20b      	bcs.n	800409c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad2      	subs	r2, r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff9b 	bl	8003fcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	e004      	b.n	80040a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040a6:	f000 fe75 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80040aa:	69fb      	ldr	r3, [r7, #28]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000d18 	.word	0x20000d18
 80040b8:	20000d2c 	.word	0x20000d2c

080040bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <vTaskMissedYield+0x14>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000d28 	.word	0x20000d28

080040d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040dc:	f000 f852 	bl	8004184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvIdleTask+0x28>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d9f9      	bls.n	80040dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <prvIdleTask+0x2c>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040f8:	e7f0      	b.n	80040dc <prvIdleTask+0x8>
 80040fa:	bf00      	nop
 80040fc:	20000844 	.word	0x20000844
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e00c      	b.n	800412a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <prvInitialiseTaskLists+0x60>)
 800411c:	4413      	add	r3, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fcea 	bl	8002af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b37      	cmp	r3, #55	; 0x37
 800412e:	d9ef      	bls.n	8004110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004130:	480d      	ldr	r0, [pc, #52]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004132:	f7fe fce1 	bl	8002af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004136:	480d      	ldr	r0, [pc, #52]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004138:	f7fe fcde 	bl	8002af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <prvInitialiseTaskLists+0x6c>)
 800413e:	f7fe fcdb 	bl	8002af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004142:	480c      	ldr	r0, [pc, #48]	; (8004174 <prvInitialiseTaskLists+0x70>)
 8004144:	f7fe fcd8 	bl	8002af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004148:	480b      	ldr	r0, [pc, #44]	; (8004178 <prvInitialiseTaskLists+0x74>)
 800414a:	f7fe fcd5 	bl	8002af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <prvInitialiseTaskLists+0x78>)
 8004150:	4a05      	ldr	r2, [pc, #20]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <prvInitialiseTaskLists+0x7c>)
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000844 	.word	0x20000844
 8004168:	20000ca4 	.word	0x20000ca4
 800416c:	20000cb8 	.word	0x20000cb8
 8004170:	20000cd4 	.word	0x20000cd4
 8004174:	20000ce8 	.word	0x20000ce8
 8004178:	20000d00 	.word	0x20000d00
 800417c:	20000ccc 	.word	0x20000ccc
 8004180:	20000cd0 	.word	0x20000cd0

08004184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800418a:	e019      	b.n	80041c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800418c:	f000 fdd2 	bl	8004d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <prvCheckTasksWaitingTermination+0x50>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f7fe fd35 	bl	8002c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <prvCheckTasksWaitingTermination+0x54>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <prvCheckTasksWaitingTermination+0x54>)
 80041aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041b6:	f000 fded 	bl	8004d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f810 	bl	80041e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e1      	bne.n	800418c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000ce8 	.word	0x20000ce8
 80041d8:	20000d14 	.word	0x20000d14
 80041dc:	20000cfc 	.word	0x20000cfc

080041e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d108      	bne.n	8004204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff8a 	bl	8005110 <vPortFree>
				vPortFree( pxTCB );
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 ff87 	bl	8005110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004202:	e018      	b.n	8004236 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800420a:	2b01      	cmp	r3, #1
 800420c:	d103      	bne.n	8004216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 ff7e 	bl	8005110 <vPortFree>
	}
 8004214:	e00f      	b.n	8004236 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800421c:	2b02      	cmp	r3, #2
 800421e:	d00a      	beq.n	8004236 <prvDeleteTCB+0x56>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <prvDeleteTCB+0x54>
	}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004258:	e008      	b.n	800426c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000ccc 	.word	0x20000ccc
 800427c:	20000d34 	.word	0x20000d34

08004280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <xTaskGetSchedulerState+0x34>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800428e:	2301      	movs	r3, #1
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e008      	b.n	80042a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <xTaskGetSchedulerState+0x38>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800429c:	2302      	movs	r3, #2
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	e001      	b.n	80042a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042a6:	687b      	ldr	r3, [r7, #4]
	}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000d20 	.word	0x20000d20
 80042b8:	20000d3c 	.word	0x20000d3c

080042bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d056      	beq.n	8004380 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <xTaskPriorityDisinherit+0xd0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d00a      	beq.n	80042f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60fb      	str	r3, [r7, #12]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	1e5a      	subs	r2, r3, #1
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	429a      	cmp	r2, r3
 8004324:	d02c      	beq.n	8004380 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	2b00      	cmp	r3, #0
 800432c:	d128      	bne.n	8004380 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fc6a 	bl	8002c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <xTaskPriorityDisinherit+0xd4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d903      	bls.n	8004360 <xTaskPriorityDisinherit+0xa4>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <xTaskPriorityDisinherit+0xd4>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a09      	ldr	r2, [pc, #36]	; (8004394 <xTaskPriorityDisinherit+0xd8>)
 800436e:	441a      	add	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fbeb 	bl	8002b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004380:	697b      	ldr	r3, [r7, #20]
	}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000840 	.word	0x20000840
 8004390:	20000d1c 	.word	0x20000d1c
 8004394:	20000844 	.word	0x20000844

08004398 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <prvAddCurrentTaskToDelayedList+0x90>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fc2c 	bl	8002c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d10a      	bne.n	80043d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c2:	4b1a      	ldr	r3, [pc, #104]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4819      	ldr	r0, [pc, #100]	; (8004430 <prvAddCurrentTaskToDelayedList+0x98>)
 80043cc:	f7fe fbc1 	bl	8002b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043d0:	e026      	b.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d209      	bcs.n	80043fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fe fbcf 	bl	8002b9a <vListInsert>
}
 80043fc:	e010      	b.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7fe fbc5 	bl	8002b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d202      	bcs.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <prvAddCurrentTaskToDelayedList+0xa4>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000d18 	.word	0x20000d18
 800442c:	20000840 	.word	0x20000840
 8004430:	20000d00 	.word	0x20000d00
 8004434:	20000cd0 	.word	0x20000cd0
 8004438:	20000ccc 	.word	0x20000ccc
 800443c:	20000d34 	.word	0x20000d34

08004440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800444a:	f000 fb07 	bl	8004a5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <xTimerCreateTimerTask+0x80>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d021      	beq.n	800449a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800445e:	1d3a      	adds	r2, r7, #4
 8004460:	f107 0108 	add.w	r1, r7, #8
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fb2b 	bl	8002ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	9202      	str	r2, [sp, #8]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	2302      	movs	r3, #2
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	460a      	mov	r2, r1
 8004480:	4910      	ldr	r1, [pc, #64]	; (80044c4 <xTimerCreateTimerTask+0x84>)
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <xTimerCreateTimerTask+0x88>)
 8004484:	f7ff f912 	bl	80036ac <xTaskCreateStatic>
 8004488:	4603      	mov	r3, r0
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <xTimerCreateTimerTask+0x8c>)
 800448c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTimerCreateTimerTask+0x8c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	613b      	str	r3, [r7, #16]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044b6:	697b      	ldr	r3, [r7, #20]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000d70 	.word	0x20000d70
 80044c4:	08005cbc 	.word	0x08005cbc
 80044c8:	08004605 	.word	0x08004605
 80044cc:	20000d74 	.word	0x20000d74

080044d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	623b      	str	r3, [r7, #32]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <xTimerGenericCommand+0x98>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d02a      	beq.n	800455c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	dc18      	bgt.n	800454a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004518:	f7ff feb2 	bl	8004280 <xTaskGetSchedulerState>
 800451c:	4603      	mov	r3, r0
 800451e:	2b02      	cmp	r3, #2
 8004520:	d109      	bne.n	8004536 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <xTimerGenericCommand+0x98>)
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f107 0110 	add.w	r1, r7, #16
 800452a:	2300      	movs	r3, #0
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	f7fe fcd5 	bl	8002edc <xQueueGenericSend>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
 8004534:	e012      	b.n	800455c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <xTimerGenericCommand+0x98>)
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f107 0110 	add.w	r1, r7, #16
 800453e:	2300      	movs	r3, #0
 8004540:	2200      	movs	r2, #0
 8004542:	f7fe fccb 	bl	8002edc <xQueueGenericSend>
 8004546:	6278      	str	r0, [r7, #36]	; 0x24
 8004548:	e008      	b.n	800455c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <xTimerGenericCommand+0x98>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f107 0110 	add.w	r1, r7, #16
 8004552:	2300      	movs	r3, #0
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	f7fe fdbf 	bl	80030d8 <xQueueGenericSendFromISR>
 800455a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000d70 	.word	0x20000d70

0800456c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <prvProcessExpiredTimer+0x94>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	3304      	adds	r3, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fb41 	bl	8002c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d022      	beq.n	80045de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	18d1      	adds	r1, r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	6978      	ldr	r0, [r7, #20]
 80045a6:	f000 f8d1 	bl	800474c <prvInsertTimerInActiveList>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	2100      	movs	r1, #0
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff88 	bl	80044d0 <xTimerGenericCommand>
 80045c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60fb      	str	r3, [r7, #12]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	4798      	blx	r3
}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000d68 	.word	0x20000d68

08004604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f857 	bl	80046c4 <prvGetNextExpireTime>
 8004616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4619      	mov	r1, r3
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f803 	bl	8004628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004622:	f000 f8d5 	bl	80047d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004626:	e7f1      	b.n	800460c <prvTimerTask+0x8>

08004628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004632:	f7ff fa43 	bl	8003abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f866 	bl	800470c <prvSampleTimeNow>
 8004640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d130      	bne.n	80046aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <prvProcessTimerOrBlockTask+0x3c>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d806      	bhi.n	8004664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004656:	f7ff fa3f 	bl	8003ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff85 	bl	800456c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004662:	e024      	b.n	80046ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <prvProcessTimerOrBlockTask+0x90>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <prvProcessTimerOrBlockTask+0x50>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <prvProcessTimerOrBlockTask+0x52>
 8004678:	2300      	movs	r3, #0
 800467a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <prvProcessTimerOrBlockTask+0x94>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	f7fe ffdb 	bl	8003644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800468e:	f7ff fa23 	bl	8003ad8 <xTaskResumeAll>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <prvProcessTimerOrBlockTask+0x98>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
}
 80046a8:	e001      	b.n	80046ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046aa:	f7ff fa15 	bl	8003ad8 <xTaskResumeAll>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000d6c 	.word	0x20000d6c
 80046bc:	20000d70 	.word	0x20000d70
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <prvGetNextExpireTime+0x44>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <prvGetNextExpireTime+0x16>
 80046d6:	2201      	movs	r2, #1
 80046d8:	e000      	b.n	80046dc <prvGetNextExpireTime+0x18>
 80046da:	2200      	movs	r2, #0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <prvGetNextExpireTime+0x44>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e001      	b.n	80046f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046f8:	68fb      	ldr	r3, [r7, #12]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000d68 	.word	0x20000d68

0800470c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004714:	f7ff fa7e 	bl	8003c14 <xTaskGetTickCount>
 8004718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <prvSampleTimeNow+0x3c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d205      	bcs.n	8004730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004724:	f000 f936 	bl	8004994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e002      	b.n	8004736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <prvSampleTimeNow+0x3c>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000d78 	.word	0x20000d78

0800474c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d812      	bhi.n	8004798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e01b      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <prvInsertTimerInActiveList+0x7c>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe fa02 	bl	8002b9a <vListInsert>
 8004796:	e012      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d206      	bcs.n	80047ae <prvInsertTimerInActiveList+0x62>
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e007      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <prvInsertTimerInActiveList+0x80>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe f9ee 	bl	8002b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047be:	697b      	ldr	r3, [r7, #20]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000d6c 	.word	0x20000d6c
 80047cc:	20000d68 	.word	0x20000d68

080047d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d6:	e0ca      	b.n	800496e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da18      	bge.n	8004810 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	3304      	adds	r3, #4
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	61fb      	str	r3, [r7, #28]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	6850      	ldr	r0, [r2, #4]
 8004808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	4611      	mov	r1, r2
 800480e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f2c0 80aa 	blt.w	800496c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	3304      	adds	r3, #4
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe f9ef 	bl	8002c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800482e:	463b      	mov	r3, r7
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff6b 	bl	800470c <prvSampleTimeNow>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b09      	cmp	r3, #9
 800483c:	f200 8097 	bhi.w	800496e <prvProcessReceivedCommands+0x19e>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <prvProcessReceivedCommands+0x78>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004871 	.word	0x08004871
 800484c:	08004871 	.word	0x08004871
 8004850:	08004871 	.word	0x08004871
 8004854:	080048e5 	.word	0x080048e5
 8004858:	080048f9 	.word	0x080048f9
 800485c:	08004943 	.word	0x08004943
 8004860:	08004871 	.word	0x08004871
 8004864:	08004871 	.word	0x08004871
 8004868:	080048e5 	.word	0x080048e5
 800486c:	080048f9 	.word	0x080048f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	18d1      	adds	r1, r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004890:	f7ff ff5c 	bl	800474c <prvInsertTimerInActiveList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d069      	beq.n	800496e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05e      	beq.n	800496e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	441a      	add	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c2:	f7ff fe05 	bl	80044d0 <xTimerGenericCommand>
 80048c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d14f      	bne.n	800496e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	61bb      	str	r3, [r7, #24]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048f6:	e03a      	b.n	800496e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	617b      	str	r3, [r7, #20]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	18d1      	adds	r1, r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493c:	f7ff ff06 	bl	800474c <prvInsertTimerInActiveList>
					break;
 8004940:	e015      	b.n	800496e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004952:	f000 fbdd 	bl	8005110 <vPortFree>
 8004956:	e00a      	b.n	800496e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800496a:	e000      	b.n	800496e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800496c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <prvProcessReceivedCommands+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	1d39      	adds	r1, r7, #4
 8004974:	2200      	movs	r2, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fc4a 	bl	8003210 <xQueueReceive>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f47f af2a 	bne.w	80047d8 <prvProcessReceivedCommands+0x8>
	}
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3730      	adds	r7, #48	; 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000d70 	.word	0x20000d70

08004994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800499a:	e048      	b.n	8004a2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800499c:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe f929 	bl	8002c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02e      	beq.n	8004a2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d90e      	bls.n	8004a00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fe f8ce 	bl	8002b9a <vListInsert>
 80049fe:	e016      	b.n	8004a2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fd60 	bl	80044d0 <xTimerGenericCommand>
 8004a10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	603b      	str	r3, [r7, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b1      	bne.n	800499c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <prvSwitchTimerLists+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a46:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <prvSwitchTimerLists+0xc4>)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000d68 	.word	0x20000d68
 8004a58:	20000d6c 	.word	0x20000d6c

08004a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a62:	f000 f967 	bl	8004d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d120      	bne.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a6e:	4814      	ldr	r0, [pc, #80]	; (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a70:	f7fe f842 	bl	8002af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a74:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a76:	f7fe f83f 	bl	8002af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <prvCheckForValidListAndQueue+0x6c>)
 8004a7c:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <prvCheckForValidListAndQueue+0x70>)
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <prvCheckForValidListAndQueue+0x74>)
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <prvCheckForValidListAndQueue+0x78>)
 8004a8e:	2110      	movs	r1, #16
 8004a90:	200a      	movs	r0, #10
 8004a92:	f7fe f94d 	bl	8002d30 <xQueueGenericCreateStatic>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	490b      	ldr	r1, [pc, #44]	; (8004ad8 <prvCheckForValidListAndQueue+0x7c>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fda0 	bl	80035f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab0:	f000 f970 	bl	8004d94 <vPortExitCritical>
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000d70 	.word	0x20000d70
 8004ac0:	20000d40 	.word	0x20000d40
 8004ac4:	20000d54 	.word	0x20000d54
 8004ac8:	20000d68 	.word	0x20000d68
 8004acc:	20000d6c 	.word	0x20000d6c
 8004ad0:	20000e1c 	.word	0x20000e1c
 8004ad4:	20000d7c 	.word	0x20000d7c
 8004ad8:	08005cc4 	.word	0x08005cc4

08004adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b04      	subs	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <pxPortInitialiseStack+0x64>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b14      	subs	r3, #20
 8004b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b20      	subs	r3, #32
 8004b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	08004b45 	.word	0x08004b45

08004b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <prvTaskExitError+0x54>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d00a      	beq.n	8004b6e <prvTaskExitError+0x2a>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <prvTaskExitError+0x28>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b82:	bf00      	nop
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0fc      	beq.n	8004b84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <xPortStartScheduler+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xPortStartScheduler+0x12c>)
 8004c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <xPortStartScheduler+0x130>)
 8004c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c64:	e009      	b.n	8004c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d0ef      	beq.n	8004c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xPortStartScheduler+0x134>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <xPortStartScheduler+0x138>)
 8004ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cde:	f000 f8dd 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <xPortStartScheduler+0x13c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ce8:	f000 f8fc 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cf8:	f7ff ff66 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cfc:	f7ff f854 	bl	8003da8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d00:	f7ff ff20 	bl	8004b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	410fc271 	.word	0x410fc271
 8004d18:	410fc270 	.word	0x410fc270
 8004d1c:	e000e400 	.word	0xe000e400
 8004d20:	20000e6c 	.word	0x20000e6c
 8004d24:	20000e70 	.word	0x20000e70
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	20000010 	.word	0x20000010
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <vPortEnterCritical+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	603b      	str	r3, [r7, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortEnterCritical+0x4a>
	}
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000010 	.word	0x20000010
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vPortExitCritical+0x50>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vPortExitCritical+0x24>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <vPortExitCritical+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000010 	.word	0x20000010
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7fe ffc2 	bl	8003da8 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7fe fedf 	bl	8003c34 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <xPortSysTickHandler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000004 	.word	0x20000004
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d914      	bls.n	8004f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <vPortValidateInterruptPriority+0x70>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20a      	bcs.n	8004f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d90a      	bls.n	8004f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	603b      	str	r3, [r7, #0]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <vPortValidateInterruptPriority+0x60>
	}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e3f0 	.word	0xe000e3f0
 8004f6c:	20000e6c 	.word	0x20000e6c
 8004f70:	e000ed0c 	.word	0xe000ed0c
 8004f74:	20000e70 	.word	0x20000e70

08004f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f84:	f7fe fd9a 	bl	8003abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <pvPortMalloc+0x180>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f90:	f000 f920 	bl	80051d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <pvPortMalloc+0x184>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8093 	bne.w	80050c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01d      	beq.n	8004fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fa8:	2208      	movs	r2, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06e      	beq.n	80050c8 <pvPortMalloc+0x150>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <pvPortMalloc+0x188>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d869      	bhi.n	80050c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff4:	4b43      	ldr	r3, [pc, #268]	; (8005104 <pvPortMalloc+0x18c>)
 8004ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff8:	4b42      	ldr	r3, [pc, #264]	; (8005104 <pvPortMalloc+0x18c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffe:	e004      	b.n	800500a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <pvPortMalloc+0xa4>
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <pvPortMalloc+0x180>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	429a      	cmp	r2, r3
 8005024:	d050      	beq.n	80050c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	429a      	cmp	r2, r3
 8005046:	d91f      	bls.n	8005088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <pvPortMalloc+0xf8>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	613b      	str	r3, [r7, #16]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f000 f908 	bl	8005298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <pvPortMalloc+0x188>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <pvPortMalloc+0x188>)
 8005094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <pvPortMalloc+0x188>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <pvPortMalloc+0x190>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d203      	bcs.n	80050aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <pvPortMalloc+0x188>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <pvPortMalloc+0x190>)
 80050a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <pvPortMalloc+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <pvPortMalloc+0x194>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <pvPortMalloc+0x194>)
 80050c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050c8:	f7fe fd06 	bl	8003ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <pvPortMalloc+0x174>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <pvPortMalloc+0x172>
	return pvReturn;
 80050ec:	69fb      	ldr	r3, [r7, #28]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20004a7c 	.word	0x20004a7c
 80050fc:	20004a90 	.word	0x20004a90
 8005100:	20004a80 	.word	0x20004a80
 8005104:	20004a74 	.word	0x20004a74
 8005108:	20004a84 	.word	0x20004a84
 800510c:	20004a88 	.word	0x20004a88

08005110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04d      	beq.n	80051be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005122:	2308      	movs	r3, #8
 8005124:	425b      	negs	r3, r3
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <vPortFree+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vPortFree+0x44>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <vPortFree+0x62>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <vPortFree+0xb8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01e      	beq.n	80051be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11a      	bne.n	80051be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <vPortFree+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005198:	f7fe fc90 	bl	8003abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <vPortFree+0xbc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortFree+0xbc>)
 80051a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f000 f874 	bl	8005298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vPortFree+0xc0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <vPortFree+0xc0>)
 80051b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ba:	f7fe fc8d 	bl	8003ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20004a90 	.word	0x20004a90
 80051cc:	20004a80 	.word	0x20004a80
 80051d0:	20004a8c 	.word	0x20004a8c

080051d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <prvHeapInit+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvHeapInit+0xac>)
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <prvHeapInit+0xb0>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <prvHeapInit+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <prvHeapInit+0xb4>)
 8005234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <prvHeapInit+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvHeapInit+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvHeapInit+0xb4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <prvHeapInit+0xb8>)
 8005262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <prvHeapInit+0xbc>)
 800526a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvHeapInit+0xc0>)
 800526e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000e74 	.word	0x20000e74
 8005284:	20004a74 	.word	0x20004a74
 8005288:	20004a7c 	.word	0x20004a7c
 800528c:	20004a84 	.word	0x20004a84
 8005290:	20004a80 	.word	0x20004a80
 8005294:	20004a90 	.word	0x20004a90

08005298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <prvInsertBlockIntoFreeList+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <prvInsertBlockIntoFreeList+0x14>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d8f7      	bhi.n	80052a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d108      	bne.n	80052da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d118      	bne.n	8005320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d00d      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e008      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e003      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d002      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20004a74 	.word	0x20004a74
 8005348:	20004a7c 	.word	0x20004a7c

0800534c <__errno>:
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <__errno+0x8>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000014 	.word	0x20000014

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4d0d      	ldr	r5, [pc, #52]	; (8005390 <__libc_init_array+0x38>)
 800535c:	4c0d      	ldr	r4, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 800535e:	1b64      	subs	r4, r4, r5
 8005360:	10a4      	asrs	r4, r4, #2
 8005362:	2600      	movs	r6, #0
 8005364:	42a6      	cmp	r6, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	4d0b      	ldr	r5, [pc, #44]	; (8005398 <__libc_init_array+0x40>)
 800536a:	4c0c      	ldr	r4, [pc, #48]	; (800539c <__libc_init_array+0x44>)
 800536c:	f000 fc8e 	bl	8005c8c <_init>
 8005370:	1b64      	subs	r4, r4, r5
 8005372:	10a4      	asrs	r4, r4, #2
 8005374:	2600      	movs	r6, #0
 8005376:	42a6      	cmp	r6, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005380:	4798      	blx	r3
 8005382:	3601      	adds	r6, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	f855 3b04 	ldr.w	r3, [r5], #4
 800538a:	4798      	blx	r3
 800538c:	3601      	adds	r6, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	08005d20 	.word	0x08005d20
 8005394:	08005d20 	.word	0x08005d20
 8005398:	08005d20 	.word	0x08005d20
 800539c:	08005d24 	.word	0x08005d24

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <siprintf>:
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	b500      	push	{lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	ab1d      	add	r3, sp, #116	; 0x74
 80053d4:	9002      	str	r0, [sp, #8]
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053dc:	4809      	ldr	r0, [pc, #36]	; (8005404 <siprintf+0x38>)
 80053de:	9107      	str	r1, [sp, #28]
 80053e0:	9104      	str	r1, [sp, #16]
 80053e2:	4909      	ldr	r1, [pc, #36]	; (8005408 <siprintf+0x3c>)
 80053e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	a902      	add	r1, sp, #8
 80053f0:	f000 f868 	bl	80054c4 <_svfiprintf_r>
 80053f4:	9b02      	ldr	r3, [sp, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	b01c      	add	sp, #112	; 0x70
 80053fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005400:	b003      	add	sp, #12
 8005402:	4770      	bx	lr
 8005404:	20000014 	.word	0x20000014
 8005408:	ffff0208 	.word	0xffff0208

0800540c <__ssputs_r>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	688e      	ldr	r6, [r1, #8]
 8005412:	429e      	cmp	r6, r3
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	461f      	mov	r7, r3
 800541c:	d838      	bhi.n	8005490 <__ssputs_r+0x84>
 800541e:	898a      	ldrh	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005424:	d032      	beq.n	800548c <__ssputs_r+0x80>
 8005426:	6825      	ldr	r5, [r4, #0]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	eba5 0901 	sub.w	r9, r5, r1
 800542e:	6965      	ldr	r5, [r4, #20]
 8005430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005438:	3301      	adds	r3, #1
 800543a:	444b      	add	r3, r9
 800543c:	106d      	asrs	r5, r5, #1
 800543e:	429d      	cmp	r5, r3
 8005440:	bf38      	it	cc
 8005442:	461d      	movcc	r5, r3
 8005444:	0553      	lsls	r3, r2, #21
 8005446:	d531      	bpl.n	80054ac <__ssputs_r+0xa0>
 8005448:	4629      	mov	r1, r5
 800544a:	f000 fb55 	bl	8005af8 <_malloc_r>
 800544e:	4606      	mov	r6, r0
 8005450:	b950      	cbnz	r0, 8005468 <__ssputs_r+0x5c>
 8005452:	230c      	movs	r3, #12
 8005454:	f8ca 3000 	str.w	r3, [sl]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	6921      	ldr	r1, [r4, #16]
 800546a:	464a      	mov	r2, r9
 800546c:	f7ff ff98 	bl	80053a0 <memcpy>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	6126      	str	r6, [r4, #16]
 800547e:	6165      	str	r5, [r4, #20]
 8005480:	444e      	add	r6, r9
 8005482:	eba5 0509 	sub.w	r5, r5, r9
 8005486:	6026      	str	r6, [r4, #0]
 8005488:	60a5      	str	r5, [r4, #8]
 800548a:	463e      	mov	r6, r7
 800548c:	42be      	cmp	r6, r7
 800548e:	d900      	bls.n	8005492 <__ssputs_r+0x86>
 8005490:	463e      	mov	r6, r7
 8005492:	6820      	ldr	r0, [r4, #0]
 8005494:	4632      	mov	r2, r6
 8005496:	4641      	mov	r1, r8
 8005498:	f000 faa8 	bl	80059ec <memmove>
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	1b9b      	subs	r3, r3, r6
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	4433      	add	r3, r6
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7db      	b.n	8005464 <__ssputs_r+0x58>
 80054ac:	462a      	mov	r2, r5
 80054ae:	f000 fb97 	bl	8005be0 <_realloc_r>
 80054b2:	4606      	mov	r6, r0
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1e1      	bne.n	800547c <__ssputs_r+0x70>
 80054b8:	6921      	ldr	r1, [r4, #16]
 80054ba:	4650      	mov	r0, sl
 80054bc:	f000 fab0 	bl	8005a20 <_free_r>
 80054c0:	e7c7      	b.n	8005452 <__ssputs_r+0x46>
	...

080054c4 <_svfiprintf_r>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	4698      	mov	r8, r3
 80054ca:	898b      	ldrh	r3, [r1, #12]
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	b09d      	sub	sp, #116	; 0x74
 80054d0:	4607      	mov	r7, r0
 80054d2:	460d      	mov	r5, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	d50e      	bpl.n	80054f6 <_svfiprintf_r+0x32>
 80054d8:	690b      	ldr	r3, [r1, #16]
 80054da:	b963      	cbnz	r3, 80054f6 <_svfiprintf_r+0x32>
 80054dc:	2140      	movs	r1, #64	; 0x40
 80054de:	f000 fb0b 	bl	8005af8 <_malloc_r>
 80054e2:	6028      	str	r0, [r5, #0]
 80054e4:	6128      	str	r0, [r5, #16]
 80054e6:	b920      	cbnz	r0, 80054f2 <_svfiprintf_r+0x2e>
 80054e8:	230c      	movs	r3, #12
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e0d1      	b.n	8005696 <_svfiprintf_r+0x1d2>
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	2320      	movs	r3, #32
 80054fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005500:	f8cd 800c 	str.w	r8, [sp, #12]
 8005504:	2330      	movs	r3, #48	; 0x30
 8005506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056b0 <_svfiprintf_r+0x1ec>
 800550a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800550e:	f04f 0901 	mov.w	r9, #1
 8005512:	4623      	mov	r3, r4
 8005514:	469a      	mov	sl, r3
 8005516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551a:	b10a      	cbz	r2, 8005520 <_svfiprintf_r+0x5c>
 800551c:	2a25      	cmp	r2, #37	; 0x25
 800551e:	d1f9      	bne.n	8005514 <_svfiprintf_r+0x50>
 8005520:	ebba 0b04 	subs.w	fp, sl, r4
 8005524:	d00b      	beq.n	800553e <_svfiprintf_r+0x7a>
 8005526:	465b      	mov	r3, fp
 8005528:	4622      	mov	r2, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ff6d 	bl	800540c <__ssputs_r>
 8005532:	3001      	adds	r0, #1
 8005534:	f000 80aa 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553a:	445a      	add	r2, fp
 800553c:	9209      	str	r2, [sp, #36]	; 0x24
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a2 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005548:	2300      	movs	r3, #0
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005552:	f10a 0a01 	add.w	sl, sl, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800555e:	931a      	str	r3, [sp, #104]	; 0x68
 8005560:	4654      	mov	r4, sl
 8005562:	2205      	movs	r2, #5
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	4851      	ldr	r0, [pc, #324]	; (80056b0 <_svfiprintf_r+0x1ec>)
 800556a:	f7fa fe51 	bl	8000210 <memchr>
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	b9d8      	cbnz	r0, 80055aa <_svfiprintf_r+0xe6>
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	bf44      	itt	mi
 8005576:	2320      	movmi	r3, #32
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557c:	0711      	lsls	r1, r2, #28
 800557e:	bf44      	itt	mi
 8005580:	232b      	movmi	r3, #43	; 0x2b
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b2a      	cmp	r3, #42	; 0x2a
 800558c:	d015      	beq.n	80055ba <_svfiprintf_r+0xf6>
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	4654      	mov	r4, sl
 8005592:	2000      	movs	r0, #0
 8005594:	f04f 0c0a 	mov.w	ip, #10
 8005598:	4621      	mov	r1, r4
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	; 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d94e      	bls.n	8005642 <_svfiprintf_r+0x17e>
 80055a4:	b1b0      	cbz	r0, 80055d4 <_svfiprintf_r+0x110>
 80055a6:	9207      	str	r2, [sp, #28]
 80055a8:	e014      	b.n	80055d4 <_svfiprintf_r+0x110>
 80055aa:	eba0 0308 	sub.w	r3, r0, r8
 80055ae:	fa09 f303 	lsl.w	r3, r9, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	46a2      	mov	sl, r4
 80055b8:	e7d2      	b.n	8005560 <_svfiprintf_r+0x9c>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9103      	str	r1, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfbb      	ittet	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	f042 0202 	orrlt.w	r2, r2, #2
 80055cc:	9307      	strge	r3, [sp, #28]
 80055ce:	9307      	strlt	r3, [sp, #28]
 80055d0:	bfb8      	it	lt
 80055d2:	9204      	strlt	r2, [sp, #16]
 80055d4:	7823      	ldrb	r3, [r4, #0]
 80055d6:	2b2e      	cmp	r3, #46	; 0x2e
 80055d8:	d10c      	bne.n	80055f4 <_svfiprintf_r+0x130>
 80055da:	7863      	ldrb	r3, [r4, #1]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d135      	bne.n	800564c <_svfiprintf_r+0x188>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bfb8      	it	lt
 80055ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f0:	3402      	adds	r4, #2
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056c0 <_svfiprintf_r+0x1fc>
 80055f8:	7821      	ldrb	r1, [r4, #0]
 80055fa:	2203      	movs	r2, #3
 80055fc:	4650      	mov	r0, sl
 80055fe:	f7fa fe07 	bl	8000210 <memchr>
 8005602:	b140      	cbz	r0, 8005616 <_svfiprintf_r+0x152>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	eba0 000a 	sub.w	r0, r0, sl
 800560a:	fa03 f000 	lsl.w	r0, r3, r0
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	4303      	orrs	r3, r0
 8005612:	3401      	adds	r4, #1
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561a:	4826      	ldr	r0, [pc, #152]	; (80056b4 <_svfiprintf_r+0x1f0>)
 800561c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005620:	2206      	movs	r2, #6
 8005622:	f7fa fdf5 	bl	8000210 <memchr>
 8005626:	2800      	cmp	r0, #0
 8005628:	d038      	beq.n	800569c <_svfiprintf_r+0x1d8>
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <_svfiprintf_r+0x1f4>)
 800562c:	bb1b      	cbnz	r3, 8005676 <_svfiprintf_r+0x1b2>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	3308      	adds	r3, #8
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	4433      	add	r3, r6
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	e767      	b.n	8005512 <_svfiprintf_r+0x4e>
 8005642:	fb0c 3202 	mla	r2, ip, r2, r3
 8005646:	460c      	mov	r4, r1
 8005648:	2001      	movs	r0, #1
 800564a:	e7a5      	b.n	8005598 <_svfiprintf_r+0xd4>
 800564c:	2300      	movs	r3, #0
 800564e:	3401      	adds	r4, #1
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0c0a 	mov.w	ip, #10
 8005658:	4620      	mov	r0, r4
 800565a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800565e:	3a30      	subs	r2, #48	; 0x30
 8005660:	2a09      	cmp	r2, #9
 8005662:	d903      	bls.n	800566c <_svfiprintf_r+0x1a8>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0c5      	beq.n	80055f4 <_svfiprintf_r+0x130>
 8005668:	9105      	str	r1, [sp, #20]
 800566a:	e7c3      	b.n	80055f4 <_svfiprintf_r+0x130>
 800566c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005670:	4604      	mov	r4, r0
 8005672:	2301      	movs	r3, #1
 8005674:	e7f0      	b.n	8005658 <_svfiprintf_r+0x194>
 8005676:	ab03      	add	r3, sp, #12
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	462a      	mov	r2, r5
 800567c:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <_svfiprintf_r+0x1f8>)
 800567e:	a904      	add	r1, sp, #16
 8005680:	4638      	mov	r0, r7
 8005682:	f3af 8000 	nop.w
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	4606      	mov	r6, r0
 800568a:	d1d6      	bne.n	800563a <_svfiprintf_r+0x176>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	065b      	lsls	r3, r3, #25
 8005690:	f53f af2c 	bmi.w	80054ec <_svfiprintf_r+0x28>
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	b01d      	add	sp, #116	; 0x74
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	ab03      	add	r3, sp, #12
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	462a      	mov	r2, r5
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <_svfiprintf_r+0x1f8>)
 80056a4:	a904      	add	r1, sp, #16
 80056a6:	4638      	mov	r0, r7
 80056a8:	f000 f87a 	bl	80057a0 <_printf_i>
 80056ac:	e7eb      	b.n	8005686 <_svfiprintf_r+0x1c2>
 80056ae:	bf00      	nop
 80056b0:	08005ce4 	.word	0x08005ce4
 80056b4:	08005cee 	.word	0x08005cee
 80056b8:	00000000 	.word	0x00000000
 80056bc:	0800540d 	.word	0x0800540d
 80056c0:	08005cea 	.word	0x08005cea

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4699      	mov	r9, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfb8      	it	lt
 80056d8:	4613      	movlt	r3, r2
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e0:	4607      	mov	r7, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc26      	bgt.n	800575a <_printf_common+0x96>
 800570c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005710:	1e13      	subs	r3, r2, #0
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42b      	bmi.n	8005774 <_printf_common+0xb0>
 800571c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d01e      	beq.n	8005768 <_printf_common+0xa4>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	68e5      	ldr	r5, [r4, #12]
 800572e:	6832      	ldr	r2, [r6, #0]
 8005730:	f003 0306 	and.w	r3, r3, #6
 8005734:	2b04      	cmp	r3, #4
 8005736:	bf08      	it	eq
 8005738:	1aad      	subeq	r5, r5, r2
 800573a:	68a3      	ldr	r3, [r4, #8]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	bf0c      	ite	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	2500      	movne	r5, #0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfc4      	itt	gt
 800574a:	1a9b      	subgt	r3, r3, r2
 800574c:	18ed      	addgt	r5, r5, r3
 800574e:	2600      	movs	r6, #0
 8005750:	341a      	adds	r4, #26
 8005752:	42b5      	cmp	r5, r6
 8005754:	d11a      	bne.n	800578c <_printf_common+0xc8>
 8005756:	2000      	movs	r0, #0
 8005758:	e008      	b.n	800576c <_printf_common+0xa8>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4649      	mov	r1, r9
 8005760:	4638      	mov	r0, r7
 8005762:	47c0      	blx	r8
 8005764:	3001      	adds	r0, #1
 8005766:	d103      	bne.n	8005770 <_printf_common+0xac>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	3501      	adds	r5, #1
 8005772:	e7c6      	b.n	8005702 <_printf_common+0x3e>
 8005774:	18e1      	adds	r1, r4, r3
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	2030      	movs	r0, #48	; 0x30
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577e:	4422      	add	r2, r4
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005788:	3302      	adds	r3, #2
 800578a:	e7c7      	b.n	800571c <_printf_common+0x58>
 800578c:	2301      	movs	r3, #1
 800578e:	4622      	mov	r2, r4
 8005790:	4649      	mov	r1, r9
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	3001      	adds	r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa4>
 800579a:	3601      	adds	r6, #1
 800579c:	e7d9      	b.n	8005752 <_printf_common+0x8e>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a8:	2f78      	cmp	r7, #120	; 0x78
 80057aa:	4691      	mov	r9, r2
 80057ac:	4680      	mov	r8, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	469a      	mov	sl, r3
 80057b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	; 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d8 	beq.w	8005972 <_printf_i+0x1d2>
 80057c2:	2f58      	cmp	r7, #88	; 0x58
 80057c4:	f000 80a3 	beq.w	800590e <_printf_i+0x16e>
 80057c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	; (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	08005959 	.word	0x08005959
 8005810:	0800587d 	.word	0x0800587d
 8005814:	0800593b 	.word	0x0800593b
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	0800597b 	.word	0x0800597b
 8005824:	080057c9 	.word	0x080057c9
 8005828:	0800587d 	.word	0x0800587d
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	08005943 	.word	0x08005943
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e0a3      	b.n	8005994 <_printf_i+0x1f4>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	6829      	ldr	r1, [r5, #0]
 8005850:	0606      	lsls	r6, r0, #24
 8005852:	f101 0304 	add.w	r3, r1, #4
 8005856:	d50a      	bpl.n	800586e <_printf_i+0xce>
 8005858:	680e      	ldr	r6, [r1, #0]
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	2e00      	cmp	r6, #0
 800585e:	da03      	bge.n	8005868 <_printf_i+0xc8>
 8005860:	232d      	movs	r3, #45	; 0x2d
 8005862:	4276      	negs	r6, r6
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005868:	485e      	ldr	r0, [pc, #376]	; (80059e4 <_printf_i+0x244>)
 800586a:	230a      	movs	r3, #10
 800586c:	e019      	b.n	80058a2 <_printf_i+0x102>
 800586e:	680e      	ldr	r6, [r1, #0]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005876:	bf18      	it	ne
 8005878:	b236      	sxthne	r6, r6
 800587a:	e7ef      	b.n	800585c <_printf_i+0xbc>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1d19      	adds	r1, r3, #4
 8005882:	6029      	str	r1, [r5, #0]
 8005884:	0601      	lsls	r1, r0, #24
 8005886:	d501      	bpl.n	800588c <_printf_i+0xec>
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0xf2>
 800588c:	0646      	lsls	r6, r0, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0xe8>
 8005890:	881e      	ldrh	r6, [r3, #0]
 8005892:	4854      	ldr	r0, [pc, #336]	; (80059e4 <_printf_i+0x244>)
 8005894:	2f6f      	cmp	r7, #111	; 0x6f
 8005896:	bf0c      	ite	eq
 8005898:	2308      	moveq	r3, #8
 800589a:	230a      	movne	r3, #10
 800589c:	2100      	movs	r1, #0
 800589e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a2:	6865      	ldr	r5, [r4, #4]
 80058a4:	60a5      	str	r5, [r4, #8]
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	bfa2      	ittt	ge
 80058aa:	6821      	ldrge	r1, [r4, #0]
 80058ac:	f021 0104 	bicge.w	r1, r1, #4
 80058b0:	6021      	strge	r1, [r4, #0]
 80058b2:	b90e      	cbnz	r6, 80058b8 <_printf_i+0x118>
 80058b4:	2d00      	cmp	r5, #0
 80058b6:	d04d      	beq.n	8005954 <_printf_i+0x1b4>
 80058b8:	4615      	mov	r5, r2
 80058ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80058be:	fb03 6711 	mls	r7, r3, r1, r6
 80058c2:	5dc7      	ldrb	r7, [r0, r7]
 80058c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c8:	4637      	mov	r7, r6
 80058ca:	42bb      	cmp	r3, r7
 80058cc:	460e      	mov	r6, r1
 80058ce:	d9f4      	bls.n	80058ba <_printf_i+0x11a>
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d10b      	bne.n	80058ec <_printf_i+0x14c>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	07de      	lsls	r6, r3, #31
 80058d8:	d508      	bpl.n	80058ec <_printf_i+0x14c>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	6861      	ldr	r1, [r4, #4]
 80058de:	4299      	cmp	r1, r3
 80058e0:	bfde      	ittt	le
 80058e2:	2330      	movle	r3, #48	; 0x30
 80058e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ec:	1b52      	subs	r2, r2, r5
 80058ee:	6122      	str	r2, [r4, #16]
 80058f0:	f8cd a000 	str.w	sl, [sp]
 80058f4:	464b      	mov	r3, r9
 80058f6:	aa03      	add	r2, sp, #12
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff fee2 	bl	80056c4 <_printf_common>
 8005900:	3001      	adds	r0, #1
 8005902:	d14c      	bne.n	800599e <_printf_i+0x1fe>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	b004      	add	sp, #16
 800590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590e:	4835      	ldr	r0, [pc, #212]	; (80059e4 <_printf_i+0x244>)
 8005910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005914:	6829      	ldr	r1, [r5, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f851 6b04 	ldr.w	r6, [r1], #4
 800591c:	6029      	str	r1, [r5, #0]
 800591e:	061d      	lsls	r5, r3, #24
 8005920:	d514      	bpl.n	800594c <_printf_i+0x1ac>
 8005922:	07df      	lsls	r7, r3, #31
 8005924:	bf44      	itt	mi
 8005926:	f043 0320 	orrmi.w	r3, r3, #32
 800592a:	6023      	strmi	r3, [r4, #0]
 800592c:	b91e      	cbnz	r6, 8005936 <_printf_i+0x196>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f023 0320 	bic.w	r3, r3, #32
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	2310      	movs	r3, #16
 8005938:	e7b0      	b.n	800589c <_printf_i+0xfc>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	f043 0320 	orr.w	r3, r3, #32
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	2378      	movs	r3, #120	; 0x78
 8005944:	4828      	ldr	r0, [pc, #160]	; (80059e8 <_printf_i+0x248>)
 8005946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800594a:	e7e3      	b.n	8005914 <_printf_i+0x174>
 800594c:	0659      	lsls	r1, r3, #25
 800594e:	bf48      	it	mi
 8005950:	b2b6      	uxthmi	r6, r6
 8005952:	e7e6      	b.n	8005922 <_printf_i+0x182>
 8005954:	4615      	mov	r5, r2
 8005956:	e7bb      	b.n	80058d0 <_printf_i+0x130>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	6826      	ldr	r6, [r4, #0]
 800595c:	6961      	ldr	r1, [r4, #20]
 800595e:	1d18      	adds	r0, r3, #4
 8005960:	6028      	str	r0, [r5, #0]
 8005962:	0635      	lsls	r5, r6, #24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	d501      	bpl.n	800596c <_printf_i+0x1cc>
 8005968:	6019      	str	r1, [r3, #0]
 800596a:	e002      	b.n	8005972 <_printf_i+0x1d2>
 800596c:	0670      	lsls	r0, r6, #25
 800596e:	d5fb      	bpl.n	8005968 <_printf_i+0x1c8>
 8005970:	8019      	strh	r1, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	4615      	mov	r5, r2
 8005978:	e7ba      	b.n	80058f0 <_printf_i+0x150>
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	681d      	ldr	r5, [r3, #0]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	2100      	movs	r1, #0
 8005986:	4628      	mov	r0, r5
 8005988:	f7fa fc42 	bl	8000210 <memchr>
 800598c:	b108      	cbz	r0, 8005992 <_printf_i+0x1f2>
 800598e:	1b40      	subs	r0, r0, r5
 8005990:	6060      	str	r0, [r4, #4]
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	2300      	movs	r3, #0
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599c:	e7a8      	b.n	80058f0 <_printf_i+0x150>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d0ab      	beq.n	8005904 <_printf_i+0x164>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	d413      	bmi.n	80059da <_printf_i+0x23a>
 80059b2:	68e0      	ldr	r0, [r4, #12]
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	4298      	cmp	r0, r3
 80059b8:	bfb8      	it	lt
 80059ba:	4618      	movlt	r0, r3
 80059bc:	e7a4      	b.n	8005908 <_printf_i+0x168>
 80059be:	2301      	movs	r3, #1
 80059c0:	4632      	mov	r2, r6
 80059c2:	4649      	mov	r1, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	47d0      	blx	sl
 80059c8:	3001      	adds	r0, #1
 80059ca:	d09b      	beq.n	8005904 <_printf_i+0x164>
 80059cc:	3501      	adds	r5, #1
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	9903      	ldr	r1, [sp, #12]
 80059d2:	1a5b      	subs	r3, r3, r1
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	dcf2      	bgt.n	80059be <_printf_i+0x21e>
 80059d8:	e7eb      	b.n	80059b2 <_printf_i+0x212>
 80059da:	2500      	movs	r5, #0
 80059dc:	f104 0619 	add.w	r6, r4, #25
 80059e0:	e7f5      	b.n	80059ce <_printf_i+0x22e>
 80059e2:	bf00      	nop
 80059e4:	08005cf5 	.word	0x08005cf5
 80059e8:	08005d06 	.word	0x08005d06

080059ec <memmove>:
 80059ec:	4288      	cmp	r0, r1
 80059ee:	b510      	push	{r4, lr}
 80059f0:	eb01 0402 	add.w	r4, r1, r2
 80059f4:	d902      	bls.n	80059fc <memmove+0x10>
 80059f6:	4284      	cmp	r4, r0
 80059f8:	4623      	mov	r3, r4
 80059fa:	d807      	bhi.n	8005a0c <memmove+0x20>
 80059fc:	1e43      	subs	r3, r0, #1
 80059fe:	42a1      	cmp	r1, r4
 8005a00:	d008      	beq.n	8005a14 <memmove+0x28>
 8005a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a0a:	e7f8      	b.n	80059fe <memmove+0x12>
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4601      	mov	r1, r0
 8005a10:	428a      	cmp	r2, r1
 8005a12:	d100      	bne.n	8005a16 <memmove+0x2a>
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a1e:	e7f7      	b.n	8005a10 <memmove+0x24>

08005a20 <_free_r>:
 8005a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d044      	beq.n	8005ab0 <_free_r+0x90>
 8005a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2a:	9001      	str	r0, [sp, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a32:	bfb8      	it	lt
 8005a34:	18e4      	addlt	r4, r4, r3
 8005a36:	f000 f913 	bl	8005c60 <__malloc_lock>
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <_free_r+0x94>)
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x30>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f000 b90e 	b.w	8005c6c <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x46>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x22>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x50>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x46>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1855      	adds	r5, r2, r1
 8005a74:	42a5      	cmp	r5, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x70>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	4421      	add	r1, r4
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x26>
 8005a84:	681c      	ldr	r4, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x26>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x26>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1949      	addeq	r1, r1, r5
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x26>
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	20004a94 	.word	0x20004a94

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0e      	ldr	r6, [pc, #56]	; (8005af4 <sbrk_aligned+0x3c>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 f8bc 	bl	8005c40 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 f8b7 	bl	8005c40 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d00a      	beq.n	8005aec <sbrk_aligned+0x34>
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d007      	beq.n	8005af0 <sbrk_aligned+0x38>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f8ac 	bl	8005c40 <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d101      	bne.n	8005af0 <sbrk_aligned+0x38>
 8005aec:	f04f 34ff 	mov.w	r4, #4294967295
 8005af0:	4620      	mov	r0, r4
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	20004a98 	.word	0x20004a98

08005af8 <_malloc_r>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	1ccd      	adds	r5, r1, #3
 8005afe:	f025 0503 	bic.w	r5, r5, #3
 8005b02:	3508      	adds	r5, #8
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	bf38      	it	cc
 8005b08:	250c      	movcc	r5, #12
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	db01      	blt.n	8005b14 <_malloc_r+0x1c>
 8005b10:	42a9      	cmp	r1, r5
 8005b12:	d905      	bls.n	8005b20 <_malloc_r+0x28>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	2600      	movs	r6, #0
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	4e2e      	ldr	r6, [pc, #184]	; (8005bdc <_malloc_r+0xe4>)
 8005b22:	f000 f89d 	bl	8005c60 <__malloc_lock>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	461c      	mov	r4, r3
 8005b2a:	bb34      	cbnz	r4, 8005b7a <_malloc_r+0x82>
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7ff ffc2 	bl	8005ab8 <sbrk_aligned>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	4604      	mov	r4, r0
 8005b38:	d14d      	bne.n	8005bd6 <_malloc_r+0xde>
 8005b3a:	6834      	ldr	r4, [r6, #0]
 8005b3c:	4626      	mov	r6, r4
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d140      	bne.n	8005bc4 <_malloc_r+0xcc>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	4631      	mov	r1, r6
 8005b46:	4638      	mov	r0, r7
 8005b48:	eb04 0803 	add.w	r8, r4, r3
 8005b4c:	f000 f878 	bl	8005c40 <_sbrk_r>
 8005b50:	4580      	cmp	r8, r0
 8005b52:	d13a      	bne.n	8005bca <_malloc_r+0xd2>
 8005b54:	6821      	ldr	r1, [r4, #0]
 8005b56:	3503      	adds	r5, #3
 8005b58:	1a6d      	subs	r5, r5, r1
 8005b5a:	f025 0503 	bic.w	r5, r5, #3
 8005b5e:	3508      	adds	r5, #8
 8005b60:	2d0c      	cmp	r5, #12
 8005b62:	bf38      	it	cc
 8005b64:	250c      	movcc	r5, #12
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ffa5 	bl	8005ab8 <sbrk_aligned>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d02b      	beq.n	8005bca <_malloc_r+0xd2>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	442b      	add	r3, r5
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	e00e      	b.n	8005b98 <_malloc_r+0xa0>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	1b52      	subs	r2, r2, r5
 8005b7e:	d41e      	bmi.n	8005bbe <_malloc_r+0xc6>
 8005b80:	2a0b      	cmp	r2, #11
 8005b82:	d916      	bls.n	8005bb2 <_malloc_r+0xba>
 8005b84:	1961      	adds	r1, r4, r5
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	6025      	str	r5, [r4, #0]
 8005b8a:	bf18      	it	ne
 8005b8c:	6059      	strne	r1, [r3, #4]
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	bf08      	it	eq
 8005b92:	6031      	streq	r1, [r6, #0]
 8005b94:	5162      	str	r2, [r4, r5]
 8005b96:	604b      	str	r3, [r1, #4]
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f104 060b 	add.w	r6, r4, #11
 8005b9e:	f000 f865 	bl	8005c6c <__malloc_unlock>
 8005ba2:	f026 0607 	bic.w	r6, r6, #7
 8005ba6:	1d23      	adds	r3, r4, #4
 8005ba8:	1af2      	subs	r2, r6, r3
 8005baa:	d0b6      	beq.n	8005b1a <_malloc_r+0x22>
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	50a3      	str	r3, [r4, r2]
 8005bb0:	e7b3      	b.n	8005b1a <_malloc_r+0x22>
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	bf0c      	ite	eq
 8005bb8:	6032      	streq	r2, [r6, #0]
 8005bba:	605a      	strne	r2, [r3, #4]
 8005bbc:	e7ec      	b.n	8005b98 <_malloc_r+0xa0>
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	6864      	ldr	r4, [r4, #4]
 8005bc2:	e7b2      	b.n	8005b2a <_malloc_r+0x32>
 8005bc4:	4634      	mov	r4, r6
 8005bc6:	6876      	ldr	r6, [r6, #4]
 8005bc8:	e7b9      	b.n	8005b3e <_malloc_r+0x46>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f000 f84c 	bl	8005c6c <__malloc_unlock>
 8005bd4:	e7a1      	b.n	8005b1a <_malloc_r+0x22>
 8005bd6:	6025      	str	r5, [r4, #0]
 8005bd8:	e7de      	b.n	8005b98 <_malloc_r+0xa0>
 8005bda:	bf00      	nop
 8005bdc:	20004a94 	.word	0x20004a94

08005be0 <_realloc_r>:
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be4:	4680      	mov	r8, r0
 8005be6:	4614      	mov	r4, r2
 8005be8:	460e      	mov	r6, r1
 8005bea:	b921      	cbnz	r1, 8005bf6 <_realloc_r+0x16>
 8005bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	f7ff bf81 	b.w	8005af8 <_malloc_r>
 8005bf6:	b92a      	cbnz	r2, 8005c04 <_realloc_r+0x24>
 8005bf8:	f7ff ff12 	bl	8005a20 <_free_r>
 8005bfc:	4625      	mov	r5, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c04:	f000 f838 	bl	8005c78 <_malloc_usable_size_r>
 8005c08:	4284      	cmp	r4, r0
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	d802      	bhi.n	8005c14 <_realloc_r+0x34>
 8005c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c12:	d812      	bhi.n	8005c3a <_realloc_r+0x5a>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff ff6e 	bl	8005af8 <_malloc_r>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0ed      	beq.n	8005bfe <_realloc_r+0x1e>
 8005c22:	42bc      	cmp	r4, r7
 8005c24:	4622      	mov	r2, r4
 8005c26:	4631      	mov	r1, r6
 8005c28:	bf28      	it	cs
 8005c2a:	463a      	movcs	r2, r7
 8005c2c:	f7ff fbb8 	bl	80053a0 <memcpy>
 8005c30:	4631      	mov	r1, r6
 8005c32:	4640      	mov	r0, r8
 8005c34:	f7ff fef4 	bl	8005a20 <_free_r>
 8005c38:	e7e1      	b.n	8005bfe <_realloc_r+0x1e>
 8005c3a:	4635      	mov	r5, r6
 8005c3c:	e7df      	b.n	8005bfe <_realloc_r+0x1e>
	...

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb f86e 	bl	8000d2c <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20004a9c 	.word	0x20004a9c

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f000 b811 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	20004aa0 	.word	0x20004aa0

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f000 b80c 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	20004aa0 	.word	0x20004aa0

08005c78 <_malloc_usable_size_r>:
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f18      	subs	r0, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbc      	itt	lt
 8005c82:	580b      	ldrlt	r3, [r1, r0]
 8005c84:	18c0      	addlt	r0, r0, r3
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
