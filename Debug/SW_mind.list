
SW_mind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c40  08005c40  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a28  20000078  08005cc0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004aa0  08005cc0  00024aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001535a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  00035402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00038730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00039860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043b4  00000000  00000000  0003a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e44  00000000  00000000  0003ebec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a8c  00000000  00000000  00053a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001274bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  0012750c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bac 	.word	0x08005bac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005bac 	.word	0x08005bac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <MX_GPIO_Init+0x108>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a3a      	ldr	r2, [pc, #232]	; (80006cc <MX_GPIO_Init+0x108>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <MX_GPIO_Init+0x108>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <MX_GPIO_Init+0x108>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <MX_GPIO_Init+0x108>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_GPIO_Init+0x108>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_GPIO_Init+0x108>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <MX_GPIO_Init+0x108>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_GPIO_Init+0x108>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_GPIO_Init+0x108>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a25      	ldr	r2, [pc, #148]	; (80006cc <MX_GPIO_Init+0x108>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_GPIO_Init+0x108>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800064a:	2200      	movs	r2, #0
 800064c:	f24e 0142 	movw	r1, #57410	; 0xe042
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <MX_GPIO_Init+0x10c>)
 8000652:	f000 ff1b 	bl	800148c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <MX_GPIO_Init+0x110>)
 800066e:	f000 fd61 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000672:	f24e 0342 	movw	r3, #57410	; 0xe042
 8000676:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x10c>)
 800068c:	f000 fd52 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000690:	f241 0304 	movw	r3, #4100	; 0x1004
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <MX_GPIO_Init+0x10c>)
 80006a6:	f000 fd45 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_GPIO_Init+0x114>)
 80006c0:	f000 fd38 	bl	8001134 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020000 	.word	0x40020000

080006dc <scanRows>:

volatile uint8_t wyj = 0b00000001;
volatile uint32_t counter = 0;
volatile uint8_t wej = 0;

uint8_t scanRows(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	if(wej == 0)
 80006e0:	4b5a      	ldr	r3, [pc, #360]	; (800084c <scanRows+0x170>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11a      	bne.n	8000720 <scanRows+0x44>
	{
	        if(counter == 100)
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <scanRows+0x174>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b64      	cmp	r3, #100	; 0x64
 80006f0:	d111      	bne.n	8000716 <scanRows+0x3a>
	        {
	            counter = 0;
 80006f2:	4b57      	ldr	r3, [pc, #348]	; (8000850 <scanRows+0x174>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	            wyj = wyj * 2;
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <scanRows+0x178>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b54      	ldr	r3, [pc, #336]	; (8000854 <scanRows+0x178>)
 8000704:	701a      	strb	r2, [r3, #0]
	            if(wyj > 8)
 8000706:	4b53      	ldr	r3, [pc, #332]	; (8000854 <scanRows+0x178>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b08      	cmp	r3, #8
 800070e:	d902      	bls.n	8000716 <scanRows+0x3a>
	            {
	                wyj = 1;
 8000710:	4b50      	ldr	r3, [pc, #320]	; (8000854 <scanRows+0x178>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
	            }
	        }
	        counter = counter + 1;
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <scanRows+0x174>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a4c      	ldr	r2, [pc, #304]	; (8000850 <scanRows+0x174>)
 800071e:	6013      	str	r3, [r2, #0]
	}

	switch(wyj) {
 8000720:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <scanRows+0x178>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	3b01      	subs	r3, #1
 8000728:	2b07      	cmp	r3, #7
 800072a:	d873      	bhi.n	8000814 <scanRows+0x138>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <scanRows+0x58>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000755 	.word	0x08000755
 8000738:	08000785 	.word	0x08000785
 800073c:	08000815 	.word	0x08000815
 8000740:	080007b5 	.word	0x080007b5
 8000744:	08000815 	.word	0x08000815
 8000748:	08000815 	.word	0x08000815
 800074c:	08000815 	.word	0x08000815
 8000750:	080007e5 	.word	0x080007e5
	  case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2102      	movs	r1, #2
 8000758:	483f      	ldr	r0, [pc, #252]	; (8000858 <scanRows+0x17c>)
 800075a:	f000 fe97 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000764:	483c      	ldr	r0, [pc, #240]	; (8000858 <scanRows+0x17c>)
 8000766:	f000 fe91 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000770:	4839      	ldr	r0, [pc, #228]	; (8000858 <scanRows+0x17c>)
 8000772:	f000 fe8b 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4836      	ldr	r0, [pc, #216]	; (8000858 <scanRows+0x17c>)
 800077e:	f000 fe85 	bl	800148c <HAL_GPIO_WritePin>
	    break;
 8000782:	e05e      	b.n	8000842 <scanRows+0x166>
	  case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2102      	movs	r1, #2
 8000788:	4833      	ldr	r0, [pc, #204]	; (8000858 <scanRows+0x17c>)
 800078a:	f000 fe7f 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4830      	ldr	r0, [pc, #192]	; (8000858 <scanRows+0x17c>)
 8000796:	f000 fe79 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <scanRows+0x17c>)
 80007a2:	f000 fe73 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	482a      	ldr	r0, [pc, #168]	; (8000858 <scanRows+0x17c>)
 80007ae:	f000 fe6d 	bl	800148c <HAL_GPIO_WritePin>
	    break;
 80007b2:	e046      	b.n	8000842 <scanRows+0x166>
	  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2102      	movs	r1, #2
 80007b8:	4827      	ldr	r0, [pc, #156]	; (8000858 <scanRows+0x17c>)
 80007ba:	f000 fe67 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c4:	4824      	ldr	r0, [pc, #144]	; (8000858 <scanRows+0x17c>)
 80007c6:	f000 fe61 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4821      	ldr	r0, [pc, #132]	; (8000858 <scanRows+0x17c>)
 80007d2:	f000 fe5b 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	481e      	ldr	r0, [pc, #120]	; (8000858 <scanRows+0x17c>)
 80007de:	f000 fe55 	bl	800148c <HAL_GPIO_WritePin>
	    break;
 80007e2:	e02e      	b.n	8000842 <scanRows+0x166>
	  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	481b      	ldr	r0, [pc, #108]	; (8000858 <scanRows+0x17c>)
 80007ea:	f000 fe4f 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f4:	4818      	ldr	r0, [pc, #96]	; (8000858 <scanRows+0x17c>)
 80007f6:	f000 fe49 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <scanRows+0x17c>)
 8000802:	f000 fe43 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <scanRows+0x17c>)
 800080e:	f000 fe3d 	bl	800148c <HAL_GPIO_WritePin>
	    break;
 8000812:	e016      	b.n	8000842 <scanRows+0x166>

	  default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2102      	movs	r1, #2
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <scanRows+0x17c>)
 800081a:	f000 fe37 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <scanRows+0x17c>)
 8000826:	f000 fe31 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <scanRows+0x17c>)
 8000832:	f000 fe2b 	bl	800148c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <scanRows+0x17c>)
 800083e:	f000 fe25 	bl	800148c <HAL_GPIO_WritePin>
	}
	return wyj;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <scanRows+0x178>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000098 	.word	0x20000098
 8000850:	20000094 	.word	0x20000094
 8000854:	20000000 	.word	0x20000000
 8000858:	40020400 	.word	0x40020400

0800085c <readCols>:

uint8_t readCols(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8000860:	2104      	movs	r1, #4
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <readCols+0x78>)
 8000864:	f000 fdfa 	bl	800145c <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <readCols+0x1c>
		wej = 1;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <readCols+0x7c>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
		return 0b0001;
 8000874:	2301      	movs	r3, #1
 8000876:	e02a      	b.n	80008ce <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <readCols+0x78>)
 800087e:	f000 fded 	bl	800145c <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d004      	beq.n	8000892 <readCols+0x36>
		wej = 2;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <readCols+0x7c>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
		return 0b0010;
 800088e:	2302      	movs	r3, #2
 8000890:	e01d      	b.n	80008ce <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8000892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <readCols+0x80>)
 8000898:	f000 fde0 	bl	800145c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <readCols+0x50>
		wej = 4;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <readCols+0x7c>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	701a      	strb	r2, [r3, #0]
		return 0b0100;
 80008a8:	2304      	movs	r3, #4
 80008aa:	e010      	b.n	80008ce <readCols+0x72>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <readCols+0x80>)
 80008b2:	f000 fdd3 	bl	800145c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d004      	beq.n	80008c6 <readCols+0x6a>
		wej = 8;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <readCols+0x7c>)
 80008be:	2208      	movs	r2, #8
 80008c0:	701a      	strb	r2, [r3, #0]
		return 0b1000;
 80008c2:	2308      	movs	r3, #8
 80008c4:	e003      	b.n	80008ce <readCols+0x72>
	}
	wej = 0;
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <readCols+0x7c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
	return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020400 	.word	0x40020400
 80008d8:	20000098 	.word	0x20000098
 80008dc:	40020000 	.word	0x40020000

080008e0 <decode>:

uint8_t decode(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	uint8_t cols = readCols();
 80008e6:	f7ff ffb9 	bl	800085c <readCols>
 80008ea:	4603      	mov	r3, r0
 80008ec:	717b      	strb	r3, [r7, #5]
	uint8_t rows = wyj;
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <decode+0xcc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	713b      	strb	r3, [r7, #4]
	uint8_t rejMS = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71fb      	strb	r3, [r7, #7]
	uint8_t rejLS = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	71bb      	strb	r3, [r7, #6]

	if(cols != 0)
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d04b      	beq.n	800099a <decode+0xba>
	{
	        switch(rows){
 8000902:	793b      	ldrb	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
 8000906:	2b07      	cmp	r3, #7
 8000908:	d81e      	bhi.n	8000948 <decode+0x68>
 800090a:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <decode+0x30>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	08000931 	.word	0x08000931
 8000914:	08000937 	.word	0x08000937
 8000918:	08000949 	.word	0x08000949
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000949 	.word	0x08000949
 8000924:	08000949 	.word	0x08000949
 8000928:	08000949 	.word	0x08000949
 800092c:	08000943 	.word	0x08000943
				case 1 :
					rejMS = 0b0000;
 8000930:	2300      	movs	r3, #0
 8000932:	71fb      	strb	r3, [r7, #7]
					break;
 8000934:	e00a      	b.n	800094c <decode+0x6c>
				case 2 :
					rejMS = 0b0100;
 8000936:	2304      	movs	r3, #4
 8000938:	71fb      	strb	r3, [r7, #7]
					break;
 800093a:	e007      	b.n	800094c <decode+0x6c>
				case 4 :
					rejMS = 0b1000;
 800093c:	2308      	movs	r3, #8
 800093e:	71fb      	strb	r3, [r7, #7]
					break;
 8000940:	e004      	b.n	800094c <decode+0x6c>
				case 8 :
					rejMS = 0b1100;
 8000942:	230c      	movs	r3, #12
 8000944:	71fb      	strb	r3, [r7, #7]
					break;
 8000946:	e001      	b.n	800094c <decode+0x6c>
				default: rejMS = 0b00;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
	        }

	        switch(cols){
 800094c:	797b      	ldrb	r3, [r7, #5]
 800094e:	3b01      	subs	r3, #1
 8000950:	2b07      	cmp	r3, #7
 8000952:	d81f      	bhi.n	8000994 <decode+0xb4>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <decode+0x7c>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	0800097d 	.word	0x0800097d
 8000960:	08000983 	.word	0x08000983
 8000964:	08000995 	.word	0x08000995
 8000968:	08000989 	.word	0x08000989
 800096c:	08000995 	.word	0x08000995
 8000970:	08000995 	.word	0x08000995
 8000974:	08000995 	.word	0x08000995
 8000978:	0800098f 	.word	0x0800098f
				case 1 :
					rejLS = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	71bb      	strb	r3, [r7, #6]
					break;
 8000980:	e00c      	b.n	800099c <decode+0xbc>
				case 2 :
					rejLS = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	71bb      	strb	r3, [r7, #6]
					break;
 8000986:	e009      	b.n	800099c <decode+0xbc>
				case 4 :
					rejLS = 0b10;
 8000988:	2302      	movs	r3, #2
 800098a:	71bb      	strb	r3, [r7, #6]
					break;
 800098c:	e006      	b.n	800099c <decode+0xbc>
				case 8 :
					rejLS = 0b11;
 800098e:	2303      	movs	r3, #3
 8000990:	71bb      	strb	r3, [r7, #6]
					break;
 8000992:	e003      	b.n	800099c <decode+0xbc>
				default: rejLS = 0b00;
 8000994:	2300      	movs	r3, #0
 8000996:	71bb      	strb	r3, [r7, #6]
 8000998:	e000      	b.n	800099c <decode+0xbc>
	        }
	}
 800099a:	bf00      	nop

	return rejMS + rejLS;
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	4413      	add	r3, r2
 80009a2:	b2db      	uxtb	r3, r3

}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000

080009b0 <ObslugaKlawiatury>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ObslugaKlawiatury( void * pvParameters )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	while(1){
		scanRows();
 80009b8:	f7ff fe90 	bl	80006dc <scanRows>
		uint8_t keycode = decode();
 80009bc:	f7ff ff90 	bl	80008e0 <decode>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
		char *kod = '0';
 80009c4:	2330      	movs	r3, #48	; 0x30
 80009c6:	60bb      	str	r3, [r7, #8]
		sprintf(&kod, "%01d", keycode);
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4906      	ldr	r1, [pc, #24]	; (80009e8 <ObslugaKlawiatury+0x38>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 fc8b 	bl	80052ec <siprintf>
		HAL_UART_Transmit(&huart2, &kod, 2, 10);
 80009d6:	f107 0108 	add.w	r1, r7, #8
 80009da:	230a      	movs	r3, #10
 80009dc:	2202      	movs	r2, #2
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <ObslugaKlawiatury+0x3c>)
 80009e0:	f001 fc2c 	bl	800223c <HAL_UART_Transmit>
	while(1){
 80009e4:	e7e8      	b.n	80009b8 <ObslugaKlawiatury+0x8>
 80009e6:	bf00      	nop
 80009e8:	08005bc4 	.word	0x08005bc4
 80009ec:	200000f8 	.word	0x200000f8

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fa45 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f81d 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f7ff fde1 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 f9a3 	bl	8000d4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a06:	f000 f88b 	bl	8000b20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a0a:	f001 ffbf 	bl	800298c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a0e:	f7ff fdd1 	bl	80005b4 <MX_FREERTOS_Init>
  xTaskCreate(
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a20:	4903      	ldr	r1, [pc, #12]	; (8000a30 <main+0x40>)
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <main+0x44>)
 8000a24:	f002 fe2d 	bl	8003682 <xTaskCreate>
                      NULL,    				/* Parameter passed into the task. */
                      1,					/* Priority at which the task is created. */
                      NULL );      			/* Used to pass out the created task's handle. */

  /* Start scheduler */
  osKernelStart();
 8000a28:	f001 ffd4 	bl	80029d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x3c>
 8000a2e:	bf00      	nop
 8000a30:	08005bcc 	.word	0x08005bcc
 8000a34:	080009b1 	.word	0x080009b1

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 fc48 	bl	80052dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f844 	bl	8001b54 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 f81f 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fce4 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000afe:	f000 f809 	bl	8000b14 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_SPI1_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b54:	2228      	movs	r2, #40	; 0x28
 8000b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b72:	f001 fa8d 	bl	8002090 <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b7c:	f7ff ffca 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000009c 	.word	0x2000009c
 8000b88:	40013000 	.word	0x40013000

08000b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_SPI_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000be6:	23e0      	movs	r3, #224	; 0xe0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_SPI_MspInit+0x8c>)
 8000c02:	f000 fa97 	bl	8001134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_MspInit+0x54>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_MspInit+0x54>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_MspInit+0x54>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_MspInit+0x54>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 fa3e 	bl	80010e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f940 	bl	8000f28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ca8:	f003 fa78 	bl	800419c <xTaskGetSchedulerState>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cb2:	f004 f861 	bl	8004d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f004 fabe 	bl	800526c <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	200000f4 	.word	0x200000f4
 8000d24:	20004aa0 	.word	0x20004aa0

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f001 fa0d 	bl	80021a2 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f7ff fec1 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000f8 	.word	0x200000f8
 8000d9c:	40004400 	.word	0x40004400

08000da0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12b      	bne.n	8000e1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_UART_MspInit+0x8c>)
 8000e16:	f000 f98d 	bl	8001134 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ff65 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f004 fa0b 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fdc5 	bl	80009f0 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e74:	08005c48 	.word	0x08005c48
  ldr r2, =_sbss
 8000e78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e7c:	20004aa0 	.word	0x20004aa0

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f90d 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff feb0 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f917 	bl	800111a <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f8ed 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	2000013c 	.word	0x2000013c

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000013c 	.word	0x2000013c

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff47 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5c 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e165      	b.n	800141c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8154 	bne.w	8001416 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80ae 	beq.w	8001416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a5c      	ldr	r2, [pc, #368]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x304>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x308>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x21a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <HAL_GPIO_Init+0x30c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x216>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_GPIO_Init+0x310>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x212>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x314>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x20e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_GPIO_Init+0x318>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x20a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x31c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x206>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_GPIO_Init+0x320>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x202>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x324>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae96 	bls.w	8001150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0cc      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d90c      	bls.n	80014fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0b8      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001514:	4b59      	ldr	r3, [pc, #356]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800151e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	494d      	ldr	r1, [pc, #308]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d044      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d119      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e07f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d003      	beq.n	800157e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157a:	2b03      	cmp	r3, #3
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e06f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e067      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f023 0203 	bic.w	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4934      	ldr	r1, [pc, #208]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fcce 	bl	8000f50 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b8:	f7ff fcca 	bl	8000f50 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e04f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 020c 	and.w	r2, r3, #12
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1eb      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d20c      	bcs.n	8001608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e032      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4916      	ldr	r1, [pc, #88]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001646:	f000 f855 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 800164a:	4602      	mov	r2, r0
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	490a      	ldr	r1, [pc, #40]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	5ccb      	ldrb	r3, [r1, r3]
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_ClockConfig+0x1c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc2e 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00
 800167c:	40023800 	.word	0x40023800
 8001680:	08005bec 	.word	0x08005bec
 8001684:	20000004 	.word	0x20000004
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016a8:	f7ff fff0 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	0a9b      	lsrs	r3, r3, #10
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	4903      	ldr	r1, [pc, #12]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	08005bfc 	.word	0x08005bfc

080016cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016d0:	f7ff ffdc 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0b5b      	lsrs	r3, r3, #13
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	4903      	ldr	r1, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08005bfc 	.word	0x08005bfc

080016f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b0ae      	sub	sp, #184	; 0xb8
 80016fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171a:	4bcb      	ldr	r3, [pc, #812]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b0c      	cmp	r3, #12
 8001724:	f200 8206 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x440>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <HAL_RCC_GetSysClockFreq+0x3c>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001765 	.word	0x08001765
 8001734:	08001b35 	.word	0x08001b35
 8001738:	08001b35 	.word	0x08001b35
 800173c:	08001b35 	.word	0x08001b35
 8001740:	0800176d 	.word	0x0800176d
 8001744:	08001b35 	.word	0x08001b35
 8001748:	08001b35 	.word	0x08001b35
 800174c:	08001b35 	.word	0x08001b35
 8001750:	08001775 	.word	0x08001775
 8001754:	08001b35 	.word	0x08001b35
 8001758:	08001b35 	.word	0x08001b35
 800175c:	08001b35 	.word	0x08001b35
 8001760:	08001965 	.word	0x08001965
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4bb9      	ldr	r3, [pc, #740]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800176a:	e1e7      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176c:	4bb8      	ldr	r3, [pc, #736]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001772:	e1e3      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4bb4      	ldr	r3, [pc, #720]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001780:	4bb1      	ldr	r3, [pc, #708]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d071      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178c:	4bae      	ldr	r3, [pc, #696]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	2200      	movs	r2, #0
 8001794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001798:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800179c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4621      	mov	r1, r4
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	6439      	str	r1, [r7, #64]	; 0x40
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800180c:	4649      	mov	r1, r9
 800180e:	00cb      	lsls	r3, r1, #3
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001816:	4641      	mov	r1, r8
 8001818:	00ca      	lsls	r2, r1, #3
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
 8001826:	462b      	mov	r3, r5
 8001828:	460a      	mov	r2, r1
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800183c:	4629      	mov	r1, r5
 800183e:	024b      	lsls	r3, r1, #9
 8001840:	4621      	mov	r1, r4
 8001842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001846:	4621      	mov	r1, r4
 8001848:	024a      	lsls	r2, r1, #9
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001852:	2200      	movs	r2, #0
 8001854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800185c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001860:	f7fe fd26 	bl	80002b0 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800186e:	e067      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	2200      	movs	r2, #0
 8001878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800187c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001888:	67bb      	str	r3, [r7, #120]	; 0x78
 800188a:	2300      	movs	r3, #0
 800188c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800188e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001892:	4622      	mov	r2, r4
 8001894:	462b      	mov	r3, r5
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	0159      	lsls	r1, r3, #5
 80018a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a4:	0150      	lsls	r0, r2, #5
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4621      	mov	r1, r4
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80018b0:	4629      	mov	r1, r5
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018c4:	4649      	mov	r1, r9
 80018c6:	018b      	lsls	r3, r1, #6
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ce:	4641      	mov	r1, r8
 80018d0:	018a      	lsls	r2, r1, #6
 80018d2:	4641      	mov	r1, r8
 80018d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d8:	4649      	mov	r1, r9
 80018da:	eb63 0b01 	sbc.w	fp, r3, r1
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018f2:	4692      	mov	sl, r2
 80018f4:	469b      	mov	fp, r3
 80018f6:	4623      	mov	r3, r4
 80018f8:	eb1a 0303 	adds.w	r3, sl, r3
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	462b      	mov	r3, r5
 8001900:	eb4b 0303 	adc.w	r3, fp, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001912:	4629      	mov	r1, r5
 8001914:	028b      	lsls	r3, r1, #10
 8001916:	4621      	mov	r1, r4
 8001918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800191c:	4621      	mov	r1, r4
 800191e:	028a      	lsls	r2, r1, #10
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001928:	2200      	movs	r2, #0
 800192a:	673b      	str	r3, [r7, #112]	; 0x70
 800192c:	677a      	str	r2, [r7, #116]	; 0x74
 800192e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001932:	f7fe fcbd 	bl	80002b0 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4613      	mov	r3, r2
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001962:	e0eb      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d06b      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	2200      	movs	r2, #0
 8001984:	66bb      	str	r3, [r7, #104]	; 0x68
 8001986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
 8001990:	2300      	movs	r3, #0
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
 8001994:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001998:	4622      	mov	r2, r4
 800199a:	462b      	mov	r3, r5
 800199c:	f04f 0000 	mov.w	r0, #0
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	0159      	lsls	r1, r3, #5
 80019a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019aa:	0150      	lsls	r0, r2, #5
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4621      	mov	r1, r4
 80019b2:	1a51      	subs	r1, r2, r1
 80019b4:	61b9      	str	r1, [r7, #24]
 80019b6:	4629      	mov	r1, r5
 80019b8:	eb63 0301 	sbc.w	r3, r3, r1
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019ca:	4659      	mov	r1, fp
 80019cc:	018b      	lsls	r3, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019d4:	4651      	mov	r1, sl
 80019d6:	018a      	lsls	r2, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ebb2 0801 	subs.w	r8, r2, r1
 80019de:	4659      	mov	r1, fp
 80019e0:	eb63 0901 	sbc.w	r9, r3, r1
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f8:	4690      	mov	r8, r2
 80019fa:	4699      	mov	r9, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	eb18 0303 	adds.w	r3, r8, r3
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	462b      	mov	r3, r5
 8001a06:	eb49 0303 	adc.w	r3, r9, r3
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a18:	4629      	mov	r1, r5
 8001a1a:	024b      	lsls	r3, r1, #9
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a22:	4621      	mov	r1, r4
 8001a24:	024a      	lsls	r2, r1, #9
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a38:	f7fe fc3a 	bl	80002b0 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a46:	e065      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x420>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
 8001a66:	2300      	movs	r3, #0
 8001a68:	657b      	str	r3, [r7, #84]	; 0x54
 8001a6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a6e:	4642      	mov	r2, r8
 8001a70:	464b      	mov	r3, r9
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4641      	mov	r1, r8
 8001a88:	1a51      	subs	r1, r2, r1
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aaa:	4651      	mov	r1, sl
 8001aac:	018a      	lsls	r2, r1, #6
 8001aae:	4651      	mov	r1, sl
 8001ab0:	1a54      	subs	r4, r2, r1
 8001ab2:	4659      	mov	r1, fp
 8001ab4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	00eb      	lsls	r3, r5, #3
 8001ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	18e3      	adds	r3, r4, r3
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001afc:	2200      	movs	r2, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b06:	f7fe fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0f1b      	lsrs	r3, r3, #28
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b32:	e003      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	37b8      	adds	r7, #184	; 0xb8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400

08001b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e28d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8083 	beq.w	8001c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b74:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b80:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x124>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e25a      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x90>
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xb4>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f992 	bl	8000f50 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f98e 	bl	8000f50 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e21f      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f97e 	bl	8000f50 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f97a 	bl	8000f50 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e20b      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x104>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06f      	beq.n	8001d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d017      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1d3      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f927 	bl	8000f50 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f923 	bl	8000f50 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1b4      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f906 	bl	8000f50 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f902 	bl	8000f50 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e193      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f8e6 	bl	8000f50 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f8e2 	bl	8000f50 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e173      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x234>
 8001da6:	e01b      	b.n	8001de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8cf 	bl	8000f50 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff f8cb 	bl	8000f50 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d907      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e15c      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470000 	.word	0x42470000
 8001dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b8a      	ldr	r3, [pc, #552]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ea      	bne.n	8001db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8097 	beq.w	8001f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f88b 	bl	8000f50 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f887 	bl	8000f50 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e118      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x31e>
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x340>
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e94:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a59      	ldr	r2, [pc, #356]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f84c 	bl	8000f50 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f848 	bl	8000f50 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0d7      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ee      	beq.n	8001ebc <HAL_RCC_OscConfig+0x368>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f836 	bl	8000f50 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f832 	bl	8000f50 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0c1      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ad 	beq.w	8002080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d145      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f806 	bl	8000f50 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f802 	bl	8000f50 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e093      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	071b      	lsls	r3, r3, #28
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ffd7 	bl	8000f50 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ffd3 	bl	8000f50 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e064      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x452>
 8001fc4:	e05c      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ffc0 	bl	8000f50 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe ffbc 	bl	8000f50 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e04d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x480>
 8001ff2:	e045      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e040      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_OscConfig+0x538>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d030      	beq.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d129      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d122      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	4293      	cmp	r3, r2
 8002046:	d119      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d10f      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07b      	b.n	800219a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d108      	bne.n	80020bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020b2:	d009      	beq.n	80020c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
 80020ba:	e005      	b.n	80020c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fd52 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	ea42 0103 	orr.w	r1, r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f003 0104 	and.w	r1, r3, #4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f003 0210 	and.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e03f      	b.n	8002234 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fde9 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2224      	movs	r2, #36	; 0x24
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f928 	bl	800243c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b20      	cmp	r3, #32
 800225a:	d17c      	bne.n	8002356 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_UART_Transmit+0x2c>
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e075      	b.n	8002358 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_UART_Transmit+0x3e>
 8002276:	2302      	movs	r3, #2
 8002278:	e06e      	b.n	8002358 <HAL_UART_Transmit+0x11c>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2221      	movs	r2, #33	; 0x21
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002290:	f7fe fe5e 	bl	8000f50 <HAL_GetTick>
 8002294:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	d108      	bne.n	80022be <HAL_UART_Transmit+0x82>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e003      	b.n	80022c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022ce:	e02a      	b.n	8002326 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f840 	bl	8002360 <UART_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e036      	b.n	8002358 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	3302      	adds	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	e007      	b.n	8002318 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1cf      	bne.n	80022d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f810 	bl	8002360 <UART_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e006      	b.n	8002358 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b090      	sub	sp, #64	; 0x40
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002370:	e050      	b.n	8002414 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d04c      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800237a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <UART_WaitOnFlagUntilTimeout+0x30>
 8002380:	f7fe fde6 	bl	8000f50 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800238c:	429a      	cmp	r2, r3
 800238e:	d241      	bcs.n	8002414 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	e853 3f00 	ldrex	r3, [r3]
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023b0:	637a      	str	r2, [r7, #52]	; 0x34
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e5      	bne.n	8002390 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3314      	adds	r3, #20
 80023ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	613b      	str	r3, [r7, #16]
   return(result);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3314      	adds	r3, #20
 80023e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e4:	623a      	str	r2, [r7, #32]
 80023e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e8:	69f9      	ldr	r1, [r7, #28]
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	e841 2300 	strex	r3, r2, [r1]
 80023f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e00f      	b.n	8002434 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	429a      	cmp	r2, r3
 8002430:	d09f      	beq.n	8002372 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3740      	adds	r7, #64	; 0x40
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b0c0      	sub	sp, #256	; 0x100
 8002442:	af00      	add	r7, sp, #0
 8002444:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	ea40 0301 	orr.w	r3, r0, r1
 8002464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	431a      	orrs	r2, r3
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002494:	f021 010c 	bic.w	r1, r1, #12
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b6:	6999      	ldr	r1, [r3, #24]
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	ea40 0301 	orr.w	r3, r0, r1
 80024c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <UART_SetConfig+0x2cc>)
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d005      	beq.n	80024dc <UART_SetConfig+0xa0>
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b8d      	ldr	r3, [pc, #564]	; (800270c <UART_SetConfig+0x2d0>)
 80024d8:	429a      	cmp	r2, r3
 80024da:	d104      	bne.n	80024e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024dc:	f7ff f8f6 	bl	80016cc <HAL_RCC_GetPCLK2Freq>
 80024e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024e4:	e003      	b.n	80024ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024e6:	f7ff f8dd 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 80024ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f8:	f040 810c 	bne.w	8002714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002500:	2200      	movs	r2, #0
 8002502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002506:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800250a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800250e:	4622      	mov	r2, r4
 8002510:	462b      	mov	r3, r5
 8002512:	1891      	adds	r1, r2, r2
 8002514:	65b9      	str	r1, [r7, #88]	; 0x58
 8002516:	415b      	adcs	r3, r3
 8002518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800251a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800251e:	4621      	mov	r1, r4
 8002520:	eb12 0801 	adds.w	r8, r2, r1
 8002524:	4629      	mov	r1, r5
 8002526:	eb43 0901 	adc.w	r9, r3, r1
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800253a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253e:	4690      	mov	r8, r2
 8002540:	4699      	mov	r9, r3
 8002542:	4623      	mov	r3, r4
 8002544:	eb18 0303 	adds.w	r3, r8, r3
 8002548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800254c:	462b      	mov	r3, r5
 800254e:	eb49 0303 	adc.w	r3, r9, r3
 8002552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002562:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800256a:	460b      	mov	r3, r1
 800256c:	18db      	adds	r3, r3, r3
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
 8002570:	4613      	mov	r3, r2
 8002572:	eb42 0303 	adc.w	r3, r2, r3
 8002576:	657b      	str	r3, [r7, #84]	; 0x54
 8002578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800257c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002580:	f7fd fe96 	bl	80002b0 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <UART_SetConfig+0x2d4>)
 800258a:	fba3 2302 	umull	r2, r3, r3, r2
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	011c      	lsls	r4, r3, #4
 8002592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800259c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025a4:	4642      	mov	r2, r8
 80025a6:	464b      	mov	r3, r9
 80025a8:	1891      	adds	r1, r2, r2
 80025aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80025ac:	415b      	adcs	r3, r3
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025b4:	4641      	mov	r1, r8
 80025b6:	eb12 0a01 	adds.w	sl, r2, r1
 80025ba:	4649      	mov	r1, r9
 80025bc:	eb43 0b01 	adc.w	fp, r3, r1
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025d4:	4692      	mov	sl, r2
 80025d6:	469b      	mov	fp, r3
 80025d8:	4643      	mov	r3, r8
 80025da:	eb1a 0303 	adds.w	r3, sl, r3
 80025de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025e2:	464b      	mov	r3, r9
 80025e4:	eb4b 0303 	adc.w	r3, fp, r3
 80025e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002600:	460b      	mov	r3, r1
 8002602:	18db      	adds	r3, r3, r3
 8002604:	643b      	str	r3, [r7, #64]	; 0x40
 8002606:	4613      	mov	r3, r2
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
 800260e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002616:	f7fd fe4b 	bl	80002b0 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4611      	mov	r1, r2
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <UART_SetConfig+0x2d4>)
 8002622:	fba3 2301 	umull	r2, r3, r3, r1
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2264      	movs	r2, #100	; 0x64
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002636:	4b36      	ldr	r3, [pc, #216]	; (8002710 <UART_SetConfig+0x2d4>)
 8002638:	fba3 2302 	umull	r2, r3, r3, r2
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002644:	441c      	add	r4, r3
 8002646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002650:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	1891      	adds	r1, r2, r2
 800265e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002660:	415b      	adcs	r3, r3
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002668:	4641      	mov	r1, r8
 800266a:	1851      	adds	r1, r2, r1
 800266c:	6339      	str	r1, [r7, #48]	; 0x30
 800266e:	4649      	mov	r1, r9
 8002670:	414b      	adcs	r3, r1
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002680:	4659      	mov	r1, fp
 8002682:	00cb      	lsls	r3, r1, #3
 8002684:	4651      	mov	r1, sl
 8002686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268a:	4651      	mov	r1, sl
 800268c:	00ca      	lsls	r2, r1, #3
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	4603      	mov	r3, r0
 8002694:	4642      	mov	r2, r8
 8002696:	189b      	adds	r3, r3, r2
 8002698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800269c:	464b      	mov	r3, r9
 800269e:	460a      	mov	r2, r1
 80026a0:	eb42 0303 	adc.w	r3, r2, r3
 80026a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026bc:	460b      	mov	r3, r1
 80026be:	18db      	adds	r3, r3, r3
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c2:	4613      	mov	r3, r2
 80026c4:	eb42 0303 	adc.w	r3, r2, r3
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026d2:	f7fd fded 	bl	80002b0 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <UART_SetConfig+0x2d4>)
 80026dc:	fba3 1302 	umull	r1, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2164      	movs	r1, #100	; 0x64
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <UART_SetConfig+0x2d4>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 0207 	and.w	r2, r3, #7
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4422      	add	r2, r4
 8002702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002704:	e105      	b.n	8002912 <UART_SetConfig+0x4d6>
 8002706:	bf00      	nop
 8002708:	40011000 	.word	0x40011000
 800270c:	40011400 	.word	0x40011400
 8002710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800271e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002726:	4642      	mov	r2, r8
 8002728:	464b      	mov	r3, r9
 800272a:	1891      	adds	r1, r2, r2
 800272c:	6239      	str	r1, [r7, #32]
 800272e:	415b      	adcs	r3, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002736:	4641      	mov	r1, r8
 8002738:	1854      	adds	r4, r2, r1
 800273a:	4649      	mov	r1, r9
 800273c:	eb43 0501 	adc.w	r5, r3, r1
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	00eb      	lsls	r3, r5, #3
 800274a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	4643      	mov	r3, r8
 8002756:	18e3      	adds	r3, r4, r3
 8002758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800275c:	464b      	mov	r3, r9
 800275e:	eb45 0303 	adc.w	r3, r5, r3
 8002762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002782:	4629      	mov	r1, r5
 8002784:	008b      	lsls	r3, r1, #2
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800278c:	4621      	mov	r1, r4
 800278e:	008a      	lsls	r2, r1, #2
 8002790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002794:	f7fd fd8c 	bl	80002b0 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4b60      	ldr	r3, [pc, #384]	; (8002920 <UART_SetConfig+0x4e4>)
 800279e:	fba3 2302 	umull	r2, r3, r3, r2
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	011c      	lsls	r4, r3, #4
 80027a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027b8:	4642      	mov	r2, r8
 80027ba:	464b      	mov	r3, r9
 80027bc:	1891      	adds	r1, r2, r2
 80027be:	61b9      	str	r1, [r7, #24]
 80027c0:	415b      	adcs	r3, r3
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c8:	4641      	mov	r1, r8
 80027ca:	1851      	adds	r1, r2, r1
 80027cc:	6139      	str	r1, [r7, #16]
 80027ce:	4649      	mov	r1, r9
 80027d0:	414b      	adcs	r3, r1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e0:	4659      	mov	r1, fp
 80027e2:	00cb      	lsls	r3, r1, #3
 80027e4:	4651      	mov	r1, sl
 80027e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ea:	4651      	mov	r1, sl
 80027ec:	00ca      	lsls	r2, r1, #3
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	4642      	mov	r2, r8
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027fc:	464b      	mov	r3, r9
 80027fe:	460a      	mov	r2, r1
 8002800:	eb42 0303 	adc.w	r3, r2, r3
 8002804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	67bb      	str	r3, [r7, #120]	; 0x78
 8002812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002820:	4649      	mov	r1, r9
 8002822:	008b      	lsls	r3, r1, #2
 8002824:	4641      	mov	r1, r8
 8002826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800282a:	4641      	mov	r1, r8
 800282c:	008a      	lsls	r2, r1, #2
 800282e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002832:	f7fd fd3d 	bl	80002b0 <__aeabi_uldivmod>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <UART_SetConfig+0x4e4>)
 800283c:	fba3 1302 	umull	r1, r3, r3, r2
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	2164      	movs	r1, #100	; 0x64
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	3332      	adds	r3, #50	; 0x32
 800284e:	4a34      	ldr	r2, [pc, #208]	; (8002920 <UART_SetConfig+0x4e4>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285a:	441c      	add	r4, r3
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	673b      	str	r3, [r7, #112]	; 0x70
 8002864:	677a      	str	r2, [r7, #116]	; 0x74
 8002866:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800286a:	4642      	mov	r2, r8
 800286c:	464b      	mov	r3, r9
 800286e:	1891      	adds	r1, r2, r2
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	415b      	adcs	r3, r3
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800287a:	4641      	mov	r1, r8
 800287c:	1851      	adds	r1, r2, r1
 800287e:	6039      	str	r1, [r7, #0]
 8002880:	4649      	mov	r1, r9
 8002882:	414b      	adcs	r3, r1
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002892:	4659      	mov	r1, fp
 8002894:	00cb      	lsls	r3, r1, #3
 8002896:	4651      	mov	r1, sl
 8002898:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289c:	4651      	mov	r1, sl
 800289e:	00ca      	lsls	r2, r1, #3
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	4603      	mov	r3, r0
 80028a6:	4642      	mov	r2, r8
 80028a8:	189b      	adds	r3, r3, r2
 80028aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ac:	464b      	mov	r3, r9
 80028ae:	460a      	mov	r2, r1
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	663b      	str	r3, [r7, #96]	; 0x60
 80028c0:	667a      	str	r2, [r7, #100]	; 0x64
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028ce:	4649      	mov	r1, r9
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	4641      	mov	r1, r8
 80028d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d8:	4641      	mov	r1, r8
 80028da:	008a      	lsls	r2, r1, #2
 80028dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028e0:	f7fd fce6 	bl	80002b0 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <UART_SetConfig+0x4e4>)
 80028ea:	fba3 1302 	umull	r1, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2164      	movs	r1, #100	; 0x64
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a08      	ldr	r2, [pc, #32]	; (8002920 <UART_SetConfig+0x4e4>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4422      	add	r2, r4
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002918:	46bd      	mov	sp, r7
 800291a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291e:	bf00      	nop
 8002920:	51eb851f 	.word	0x51eb851f

08002924 <__NVIC_SetPriority>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db0a      	blt.n	800294e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	490c      	ldr	r1, [pc, #48]	; (8002970 <__NVIC_SetPriority+0x4c>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	0112      	lsls	r2, r2, #4
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	440b      	add	r3, r1
 8002948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800294c:	e00a      	b.n	8002964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <__NVIC_SetPriority+0x50>)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3b04      	subs	r3, #4
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	440b      	add	r3, r1
 8002962:	761a      	strb	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800297c:	2100      	movs	r1, #0
 800297e:	f06f 0004 	mvn.w	r0, #4
 8002982:	f7ff ffcf 	bl	8002924 <__NVIC_SetPriority>
#endif
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002992:	f3ef 8305 	mrs	r3, IPSR
 8002996:	603b      	str	r3, [r7, #0]
  return(result);
 8002998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800299e:	f06f 0305 	mvn.w	r3, #5
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e00c      	b.n	80029c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <osKernelInitialize+0x44>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <osKernelInitialize+0x44>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	e002      	b.n	80029c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029c0:	687b      	ldr	r3, [r7, #4]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000140 	.word	0x20000140

080029d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029da:	f3ef 8305 	mrs	r3, IPSR
 80029de:	603b      	str	r3, [r7, #0]
  return(result);
 80029e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80029e6:	f06f 0305 	mvn.w	r3, #5
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	e010      	b.n	8002a10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <osKernelStart+0x48>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d109      	bne.n	8002a0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029f6:	f7ff ffbf 	bl	8002978 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <osKernelStart+0x48>)
 80029fc:	2202      	movs	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a00:	f000 ff84 	bl	800390c <vTaskStartScheduler>
      stat = osOK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	e002      	b.n	8002a10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000140 	.word	0x20000140

08002a20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002a30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <vApplicationGetIdleTaskMemory+0x30>)
 8002a36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000144 	.word	0x20000144
 8002a50:	200001a0 	.word	0x200001a0

08002a54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <vApplicationGetTimerTaskMemory+0x30>)
 8002a6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	200003a0 	.word	0x200003a0
 8002a84:	200003fc 	.word	0x200003fc

08002a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 0208 	add.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f103 0208 	add.w	r2, r3, #8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f103 0208 	add.w	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d103      	bne.n	8002b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e00c      	b.n	8002b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e002      	b.n	8002b58 <vListInsert+0x2e>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d2f6      	bcs.n	8002b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	601a      	str	r2, [r3, #0]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6852      	ldr	r2, [r2, #4]
 8002bbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d103      	bne.n	8002bd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c1a:	f002 f81b 	bl	8004c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	441a      	add	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	441a      	add	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d114      	bne.n	8002c9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01a      	beq.n	8002cae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 f8cf 	bl	8003e20 <xTaskRemoveFromEventList>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <xQueueGenericReset+0xcc>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	e009      	b.n	8002cae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fef2 	bl	8002a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3324      	adds	r3, #36	; 0x24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff feed 	bl	8002a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cae:	f002 f801 	bl	8004cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	e000ed04 	.word	0xe000ed04

08002cc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <xQueueGenericCreateStatic+0x52>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <xQueueGenericCreateStatic+0x56>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericCreateStatic+0x58>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	623b      	str	r3, [r7, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <xQueueGenericCreateStatic+0x7e>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <xQueueGenericCreateStatic+0x82>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueGenericCreateStatic+0x84>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61fb      	str	r3, [r7, #28]
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d5e:	2350      	movs	r3, #80	; 0x50
 8002d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b50      	cmp	r3, #80	; 0x50
 8002d66:	d00a      	beq.n	8002d7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	61bb      	str	r3, [r7, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f805 	bl	8002db0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3730      	adds	r7, #48	; 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e002      	b.n	8002dd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dde:	2101      	movs	r1, #1
 8002de0:	69b8      	ldr	r0, [r7, #24]
 8002de2:	f7ff ff05 	bl	8002bf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e06:	2300      	movs	r3, #0
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <xQueueGenericSend+0x32>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <xQueueGenericSend+0x40>
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <xQueueGenericSend+0x44>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <xQueueGenericSend+0x46>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <xQueueGenericSend+0x60>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d103      	bne.n	8002e66 <xQueueGenericSend+0x6e>
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <xQueueGenericSend+0x72>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <xQueueGenericSend+0x74>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	623b      	str	r3, [r7, #32]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e86:	f001 f989 	bl	800419c <xTaskGetSchedulerState>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <xQueueGenericSend+0x9e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <xQueueGenericSend+0xa2>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <xQueueGenericSend+0xa4>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	61fb      	str	r3, [r7, #28]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eb6:	f001 fecd 	bl	8004c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <xQueueGenericSend+0xd4>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d129      	bne.n	8002f20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed2:	f000 fa0b 	bl	80032ec <prvCopyDataToQueue>
 8002ed6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	3324      	adds	r3, #36	; 0x24
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ff9b 	bl	8003e20 <xTaskRemoveFromEventList>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <xQueueGenericSend+0x1f8>)
 8002ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	e00a      	b.n	8002f18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <xQueueGenericSend+0x1f8>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f18:	f001 fecc 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e063      	b.n	8002fe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f26:	f001 fec5 	bl	8004cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e05c      	b.n	8002fe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d106      	bne.n	8002f42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 ffd5 	bl	8003ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f42:	f001 feb7 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f46:	f000 fd47 	bl	80039d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4a:	f001 fe83 	bl	8004c54 <vPortEnterCritical>
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d103      	bne.n	8002f64 <xQueueGenericSend+0x16c>
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSend+0x182>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f7a:	f001 fe9b 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f7e:	1d3a      	adds	r2, r7, #4
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ffc4 	bl	8003f14 <xTaskCheckForTimeOut>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d124      	bne.n	8002fdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f94:	f000 faa2 	bl	80034dc <prvIsQueueFull>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 feea 	bl	8003d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fae:	f000 fa2d 	bl	800340c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fb2:	f000 fd1f 	bl	80039f4 <xTaskResumeAll>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af7c 	bne.w	8002eb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <xQueueGenericSend+0x1f8>)
 8002fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	e772      	b.n	8002eb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f000 fa1b 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd6:	f000 fd0d 	bl	80039f4 <xTaskResumeAll>
 8002fda:	e76c      	b.n	8002eb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fde:	f000 fa15 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe2:	f000 fd07 	bl	80039f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3738      	adds	r7, #56	; 0x38
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b090      	sub	sp, #64	; 0x40
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <xQueueGenericSendFromISR+0x3c>
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xQueueGenericSendFromISR+0x40>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <xQueueGenericSendFromISR+0x42>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d103      	bne.n	800305e <xQueueGenericSendFromISR+0x6a>
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <xQueueGenericSendFromISR+0x6e>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <xQueueGenericSendFromISR+0x70>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	623b      	str	r3, [r7, #32]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800307e:	f001 fecb 	bl	8004e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003082:	f3ef 8211 	mrs	r2, BASEPRI
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61fa      	str	r2, [r7, #28]
 8003098:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800309a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xQueueGenericSendFromISR+0xbc>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d12f      	bne.n	8003110 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030c6:	f000 f911 	bl	80032ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d112      	bne.n	80030fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fe9d 	bl	8003e20 <xTaskRemoveFromEventList>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e007      	b.n	800310a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030fe:	3301      	adds	r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	b25a      	sxtb	r2, r3
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800310a:	2301      	movs	r3, #1
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800310e:	e001      	b.n	8003114 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003110:	2300      	movs	r3, #0
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800311e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003122:	4618      	mov	r0, r3
 8003124:	3740      	adds	r7, #64	; 0x40
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <xQueueReceive+0x30>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	623b      	str	r3, [r7, #32]
}
 8003158:	bf00      	nop
 800315a:	e7fe      	b.n	800315a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <xQueueReceive+0x3e>
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <xQueueReceive+0x42>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueReceive+0x44>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <xQueueReceive+0x5e>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61fb      	str	r3, [r7, #28]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800318a:	f001 f807 	bl	800419c <xTaskGetSchedulerState>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <xQueueReceive+0x6e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <xQueueReceive+0x72>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueReceive+0x74>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xQueueReceive+0x8e>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61bb      	str	r3, [r7, #24]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ba:	f001 fd4b 	bl	8004c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01f      	beq.n	800320a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ce:	f000 f8f7 	bl	80033c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00f      	beq.n	8003202 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	3310      	adds	r3, #16
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fe1a 	bl	8003e20 <xTaskRemoveFromEventList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <xQueueReceive+0x1bc>)
 80031f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003202:	f001 fd57 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8003206:	2301      	movs	r3, #1
 8003208:	e069      	b.n	80032de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003210:	f001 fd50 	bl	8004cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003214:	2300      	movs	r3, #0
 8003216:	e062      	b.n	80032de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fe60 	bl	8003ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800322c:	f001 fd42 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003230:	f000 fbd2 	bl	80039d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003234:	f001 fd0e 	bl	8004c54 <vPortEnterCritical>
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800323e:	b25b      	sxtb	r3, r3
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d103      	bne.n	800324e <xQueueReceive+0x122>
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003254:	b25b      	sxtb	r3, r3
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d103      	bne.n	8003264 <xQueueReceive+0x138>
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003264:	f001 fd26 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003268:	1d3a      	adds	r2, r7, #4
 800326a:	f107 0310 	add.w	r3, r7, #16
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe4f 	bl	8003f14 <xTaskCheckForTimeOut>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d123      	bne.n	80032c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800327c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800327e:	f000 f917 	bl	80034b0 <prvIsQueueEmpty>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d017      	beq.n	80032b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fd75 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003298:	f000 f8b8 	bl	800340c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800329c:	f000 fbaa 	bl	80039f4 <xTaskResumeAll>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d189      	bne.n	80031ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <xQueueReceive+0x1bc>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	e780      	b.n	80031ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ba:	f000 f8a7 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032be:	f000 fb99 	bl	80039f4 <xTaskResumeAll>
 80032c2:	e77a      	b.n	80031ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c6:	f000 f8a1 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ca:	f000 fb93 	bl	80039f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d0:	f000 f8ee 	bl	80034b0 <prvIsQueueEmpty>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f43f af6f 	beq.w	80031ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d14d      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 ff5e 	bl	80041d8 <xTaskPriorityDisinherit>
 800331c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e043      	b.n	80033ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6858      	ldr	r0, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	f001 ffc2 	bl	80052c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d32b      	bcc.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e026      	b.n	80033ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68d8      	ldr	r0, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	461a      	mov	r2, r3
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	f001 ffa8 	bl	80052c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	425b      	negs	r3, r3
 800337a:	441a      	add	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	425b      	negs	r3, r3
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d105      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033b6:	697b      	ldr	r3, [r7, #20]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	441a      	add	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d303      	bcc.n	80033f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	461a      	mov	r2, r3
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f001 ff5e 	bl	80052c0 <memcpy>
	}
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003414:	f001 fc1e 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003420:	e011      	b.n	8003446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3324      	adds	r3, #36	; 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fcf6 	bl	8003e20 <xTaskRemoveFromEventList>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800343a:	f000 fdcd 	bl	8003fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3b01      	subs	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dce9      	bgt.n	8003422 <prvUnlockQueue+0x16>
 800344e:	e000      	b.n	8003452 <prvUnlockQueue+0x46>
					break;
 8003450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800345a:	f001 fc2b 	bl	8004cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800345e:	f001 fbf9 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346a:	e011      	b.n	8003490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3310      	adds	r3, #16
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fcd1 	bl	8003e20 <xTaskRemoveFromEventList>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003484:	f000 fda8 	bl	8003fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	3b01      	subs	r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dce9      	bgt.n	800346c <prvUnlockQueue+0x60>
 8003498:	e000      	b.n	800349c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800349a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034a4:	f001 fc06 	bl	8004cb4 <vPortExitCritical>
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b8:	f001 fbcc 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e001      	b.n	80034ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ce:	f001 fbf1 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e4:	f001 fbb6 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d102      	bne.n	80034fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e001      	b.n	80034fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f001 fbd9 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e014      	b.n	8003546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <vQueueAddToRegistry+0x50>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <vQueueAddToRegistry+0x50>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <vQueueAddToRegistry+0x50>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800353e:	e006      	b.n	800354e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b07      	cmp	r3, #7
 800354a:	d9e7      	bls.n	800351c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	200007fc 	.word	0x200007fc

08003560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003570:	f001 fb70 	bl	8004c54 <vPortEnterCritical>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <vQueueWaitForMessageRestricted+0x2a>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d103      	bne.n	80035a0 <vQueueWaitForMessageRestricted+0x40>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a0:	f001 fb88 	bl	8004cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc07 	bl	8003dc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff26 	bl	800340c <prvUnlockQueue>
	}
 80035c0:	bf00      	nop
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	; 0x38
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xTaskCreateStatic+0x46>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61fb      	str	r3, [r7, #28]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800360e:	235c      	movs	r3, #92	; 0x5c
 8003610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b5c      	cmp	r3, #92	; 0x5c
 8003616:	d00a      	beq.n	800362e <xTaskCreateStatic+0x66>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61bb      	str	r3, [r7, #24]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800362e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01e      	beq.n	8003674 <xTaskCreateStatic+0xac>
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003644:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800364e:	2300      	movs	r3, #0
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9302      	str	r3, [sp, #8]
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f850 	bl	800370c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800366c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800366e:	f000 f8dd 	bl	800382c <prvAddNewTaskToReadyList>
 8003672:	e001      	b.n	8003678 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003678:	697b      	ldr	r3, [r7, #20]
	}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08c      	sub	sp, #48	; 0x30
 8003686:	af04      	add	r7, sp, #16
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fbfe 	bl	8004e98 <pvPortMalloc>
 800369c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036a4:	205c      	movs	r0, #92	; 0x5c
 80036a6:	f001 fbf7 	bl	8004e98 <pvPortMalloc>
 80036aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
 80036b8:	e005      	b.n	80036c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f001 fcb8 	bl	8005030 <vPortFree>
 80036c0:	e001      	b.n	80036c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d017      	beq.n	80036fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f80e 	bl	800370c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f0:	69f8      	ldr	r0, [r7, #28]
 80036f2:	f000 f89b 	bl	800382c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e002      	b.n	8003702 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003702:	69bb      	ldr	r3, [r7, #24]
	}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	461a      	mov	r2, r3
 8003724:	21a5      	movs	r1, #165	; 0xa5
 8003726:	f001 fdd9 	bl	80052dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003734:	3b01      	subs	r3, #1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f023 0307 	bic.w	r3, r3, #7
 8003742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <prvInitialiseNewTask+0x58>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	617b      	str	r3, [r7, #20]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01f      	beq.n	80037aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e012      	b.n	8003796 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	7819      	ldrb	r1, [r3, #0]
 8003778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	3334      	adds	r3, #52	; 0x34
 8003780:	460a      	mov	r2, r1
 8003782:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	3301      	adds	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d9e9      	bls.n	8003770 <prvInitialiseNewTask+0x64>
 800379c:	e000      	b.n	80037a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800379e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	e003      	b.n	80037b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2b37      	cmp	r3, #55	; 0x37
 80037b6:	d901      	bls.n	80037bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037b8:	2337      	movs	r3, #55	; 0x37
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f978 	bl	8002ac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	3318      	adds	r3, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f973 	bl	8002ac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	69b8      	ldr	r0, [r7, #24]
 800380c:	f001 f8f4 	bl	80049f8 <pxPortInitialiseStack>
 8003810:	4602      	mov	r2, r0
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003822:	bf00      	nop
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003834:	f001 fa0e 	bl	8004c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <prvAddNewTaskToReadyList+0xc4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <prvAddNewTaskToReadyList+0xc4>)
 8003840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003842:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <prvAddNewTaskToReadyList+0xc8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800384a:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <prvAddNewTaskToReadyList+0xc8>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <prvAddNewTaskToReadyList+0xc4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d110      	bne.n	800387a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003858:	f000 fbe2 	bl	8004020 <prvInitialiseTaskLists>
 800385c:	e00d      	b.n	800387a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <prvAddNewTaskToReadyList+0xcc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <prvAddNewTaskToReadyList+0xc8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d802      	bhi.n	800387a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <prvAddNewTaskToReadyList+0xc8>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <prvAddNewTaskToReadyList+0xd0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3301      	adds	r3, #1
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <prvAddNewTaskToReadyList+0xd0>)
 8003882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <prvAddNewTaskToReadyList+0xd0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <prvAddNewTaskToReadyList+0xd4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d903      	bls.n	80038a0 <prvAddNewTaskToReadyList+0x74>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <prvAddNewTaskToReadyList+0xd4>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <prvAddNewTaskToReadyList+0xd8>)
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f7ff f913 	bl	8002ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038bc:	f001 f9fa 	bl	8004cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <prvAddNewTaskToReadyList+0xcc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <prvAddNewTaskToReadyList+0xc8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d207      	bcs.n	80038e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <prvAddNewTaskToReadyList+0xdc>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000d10 	.word	0x20000d10
 80038f4:	2000083c 	.word	0x2000083c
 80038f8:	20000d1c 	.word	0x20000d1c
 80038fc:	20000d2c 	.word	0x20000d2c
 8003900:	20000d18 	.word	0x20000d18
 8003904:	20000840 	.word	0x20000840
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800391a:	463a      	mov	r2, r7
 800391c:	1d39      	adds	r1, r7, #4
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f87c 	bl	8002a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	9202      	str	r2, [sp, #8]
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	460a      	mov	r2, r1
 800393a:	4921      	ldr	r1, [pc, #132]	; (80039c0 <vTaskStartScheduler+0xb4>)
 800393c:	4821      	ldr	r0, [pc, #132]	; (80039c4 <vTaskStartScheduler+0xb8>)
 800393e:	f7ff fe43 	bl	80035c8 <xTaskCreateStatic>
 8003942:	4603      	mov	r3, r0
 8003944:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <vTaskStartScheduler+0xbc>)
 8003946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <vTaskStartScheduler+0xbc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e001      	b.n	800395a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d102      	bne.n	8003966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003960:	f000 fcfc 	bl	800435c <xTimerCreateTimerTask>
 8003964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d116      	bne.n	800399a <vTaskStartScheduler+0x8e>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
}
 800397e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <vTaskStartScheduler+0xc0>)
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <vTaskStartScheduler+0xc4>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <vTaskStartScheduler+0xc8>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003994:	f001 f8bc 	bl	8004b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003998:	e00e      	b.n	80039b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d10a      	bne.n	80039b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60fb      	str	r3, [r7, #12]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <vTaskStartScheduler+0xaa>
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08005bd4 	.word	0x08005bd4
 80039c4:	08003ff1 	.word	0x08003ff1
 80039c8:	20000d34 	.word	0x20000d34
 80039cc:	20000d30 	.word	0x20000d30
 80039d0:	20000d1c 	.word	0x20000d1c
 80039d4:	20000d14 	.word	0x20000d14

080039d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <vTaskSuspendAll+0x18>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <vTaskSuspendAll+0x18>)
 80039e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000d38 	.word	0x20000d38

080039f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	603b      	str	r3, [r7, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a20:	f001 f918 	bl	8004c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4a38      	ldr	r2, [pc, #224]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d162      	bne.n	8003afc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <xTaskResumeAll+0x11c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d05e      	beq.n	8003afc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a3e:	e02f      	b.n	8003aa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a40:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <xTaskResumeAll+0x120>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f8a5 	bl	8002b9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff f8a0 	bl	8002b9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <xTaskResumeAll+0x124>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d903      	bls.n	8003a70 <xTaskResumeAll+0x7c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <xTaskResumeAll+0x124>)
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <xTaskResumeAll+0x128>)
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7ff f82b 	bl	8002ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <xTaskResumeAll+0x12c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <xTaskResumeAll+0x130>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <xTaskResumeAll+0x120>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1cb      	bne.n	8003a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aae:	f000 fb55 	bl	800415c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <xTaskResumeAll+0x134>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003abe:	f000 f847 	bl	8003b50 <xTaskIncrementTick>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <xTaskResumeAll+0x130>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f1      	bne.n	8003abe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <xTaskResumeAll+0x134>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <xTaskResumeAll+0x130>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <xTaskResumeAll+0x138>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 f8da 	bl	8004cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b00:	68bb      	ldr	r3, [r7, #8]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000d38 	.word	0x20000d38
 8003b10:	20000d10 	.word	0x20000d10
 8003b14:	20000cd0 	.word	0x20000cd0
 8003b18:	20000d18 	.word	0x20000d18
 8003b1c:	20000840 	.word	0x20000840
 8003b20:	2000083c 	.word	0x2000083c
 8003b24:	20000d24 	.word	0x20000d24
 8003b28:	20000d20 	.word	0x20000d20
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <xTaskGetTickCount+0x1c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b3c:	687b      	ldr	r3, [r7, #4]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000d14 	.word	0x20000d14

08003b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5a:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <xTaskIncrementTick+0x148>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 808f 	bne.w	8003c82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <xTaskIncrementTick+0x14c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	; (8003c9c <xTaskIncrementTick+0x14c>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d120      	bne.n	8003bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	603b      	str	r3, [r7, #0]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskIncrementTick+0x46>
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <xTaskIncrementTick+0x158>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <xTaskIncrementTick+0x158>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	f000 fad1 	bl	800415c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bba:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <xTaskIncrementTick+0x15c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d349      	bcc.n	8003c58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc4:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <xTaskIncrementTick+0x15c>)
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	601a      	str	r2, [r3, #0]
					break;
 8003bd6:	e03f      	b.n	8003c58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d203      	bcs.n	8003bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <xTaskIncrementTick+0x15c>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bf6:	e02f      	b.n	8003c58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe ffcd 	bl	8002b9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe ffc4 	bl	8002b9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <xTaskIncrementTick+0x160>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <xTaskIncrementTick+0xd8>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <xTaskIncrementTick+0x160>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <xTaskIncrementTick+0x164>)
 8003c36:	441a      	add	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f7fe ff4f 	bl	8002ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <xTaskIncrementTick+0x168>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3b8      	bcc.n	8003bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c56:	e7b5      	b.n	8003bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <xTaskIncrementTick+0x168>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	4915      	ldr	r1, [pc, #84]	; (8003cb4 <xTaskIncrementTick+0x164>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d901      	bls.n	8003c74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <xTaskIncrementTick+0x16c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e004      	b.n	8003c8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <xTaskIncrementTick+0x170>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <xTaskIncrementTick+0x170>)
 8003c8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c8c:	697b      	ldr	r3, [r7, #20]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000d38 	.word	0x20000d38
 8003c9c:	20000d14 	.word	0x20000d14
 8003ca0:	20000cc8 	.word	0x20000cc8
 8003ca4:	20000ccc 	.word	0x20000ccc
 8003ca8:	20000d28 	.word	0x20000d28
 8003cac:	20000d30 	.word	0x20000d30
 8003cb0:	20000d18 	.word	0x20000d18
 8003cb4:	20000840 	.word	0x20000840
 8003cb8:	2000083c 	.word	0x2000083c
 8003cbc:	20000d24 	.word	0x20000d24
 8003cc0:	20000d20 	.word	0x20000d20

08003cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <vTaskSwitchContext+0xa8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <vTaskSwitchContext+0xac>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cd8:	e041      	b.n	8003d5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003cda:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <vTaskSwitchContext+0xac>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <vTaskSwitchContext+0xb0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e010      	b.n	8003d0a <vTaskSwitchContext+0x46>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	607b      	str	r3, [r7, #4]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vTaskSwitchContext+0x3e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <vTaskSwitchContext+0xb4>)
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0e4      	beq.n	8003ce8 <vTaskSwitchContext+0x24>
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <vTaskSwitchContext+0xb4>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3308      	adds	r3, #8
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d104      	bne.n	8003d4e <vTaskSwitchContext+0x8a>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <vTaskSwitchContext+0xb8>)
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <vTaskSwitchContext+0xb0>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000d38 	.word	0x20000d38
 8003d70:	20000d24 	.word	0x20000d24
 8003d74:	20000d18 	.word	0x20000d18
 8003d78:	20000840 	.word	0x20000840
 8003d7c:	2000083c 	.word	0x2000083c

08003d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60fb      	str	r3, [r7, #12]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <vTaskPlaceOnEventList+0x44>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3318      	adds	r3, #24
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe febb 	bl	8002b2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db4:	2101      	movs	r1, #1
 8003db6:	6838      	ldr	r0, [r7, #0]
 8003db8:	f000 fa7c 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000083c 	.word	0x2000083c

08003dc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	617b      	str	r3, [r7, #20]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <vTaskPlaceOnEventListRestricted+0x54>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3318      	adds	r3, #24
 8003df6:	4619      	mov	r1, r3
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7fe fe72 	bl	8002ae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	68b8      	ldr	r0, [r7, #8]
 8003e0e:	f000 fa51 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
	}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000083c 	.word	0x2000083c

08003e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60fb      	str	r3, [r7, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fea3 	bl	8002b9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <xTaskRemoveFromEventList+0xb0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fe9a 	bl	8002b9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <xTaskRemoveFromEventList+0xb4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d903      	bls.n	8003e7c <xTaskRemoveFromEventList+0x5c>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <xTaskRemoveFromEventList+0xb4>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <xTaskRemoveFromEventList+0xb8>)
 8003e8a:	441a      	add	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7fe fe25 	bl	8002ae2 <vListInsertEnd>
 8003e98:	e005      	b.n	8003ea6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	3318      	adds	r3, #24
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480e      	ldr	r0, [pc, #56]	; (8003edc <xTaskRemoveFromEventList+0xbc>)
 8003ea2:	f7fe fe1e 	bl	8002ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <xTaskRemoveFromEventList+0xc0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d905      	bls.n	8003ec0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <xTaskRemoveFromEventList+0xc4>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e001      	b.n	8003ec4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ec4:	697b      	ldr	r3, [r7, #20]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000d38 	.word	0x20000d38
 8003ed4:	20000d18 	.word	0x20000d18
 8003ed8:	20000840 	.word	0x20000840
 8003edc:	20000cd0 	.word	0x20000cd0
 8003ee0:	2000083c 	.word	0x2000083c
 8003ee4:	20000d24 	.word	0x20000d24

08003ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <vTaskInternalSetTimeOutState+0x24>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <vTaskInternalSetTimeOutState+0x28>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	605a      	str	r2, [r3, #4]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	20000d28 	.word	0x20000d28
 8003f10:	20000d14 	.word	0x20000d14

08003f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	613b      	str	r3, [r7, #16]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60fb      	str	r3, [r7, #12]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f56:	f000 fe7d 	bl	8004c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <xTaskCheckForTimeOut+0xbc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d102      	bne.n	8003f7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	e023      	b.n	8003fc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <xTaskCheckForTimeOut+0xc0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d007      	beq.n	8003f96 <xTaskCheckForTimeOut+0x82>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e015      	b.n	8003fc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d20b      	bcs.n	8003fb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff9b 	bl	8003ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	e004      	b.n	8003fc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fc2:	f000 fe77 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000d14 	.word	0x20000d14
 8003fd4:	20000d28 	.word	0x20000d28

08003fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <vTaskMissedYield+0x14>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	20000d24 	.word	0x20000d24

08003ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ff8:	f000 f852 	bl	80040a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <prvIdleTask+0x28>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d9f9      	bls.n	8003ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <prvIdleTask+0x2c>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004014:	e7f0      	b.n	8003ff8 <prvIdleTask+0x8>
 8004016:	bf00      	nop
 8004018:	20000840 	.word	0x20000840
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	e00c      	b.n	8004046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <prvInitialiseTaskLists+0x60>)
 8004038:	4413      	add	r3, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fd24 	bl	8002a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3301      	adds	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b37      	cmp	r3, #55	; 0x37
 800404a:	d9ef      	bls.n	800402c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800404c:	480d      	ldr	r0, [pc, #52]	; (8004084 <prvInitialiseTaskLists+0x64>)
 800404e:	f7fe fd1b 	bl	8002a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004052:	480d      	ldr	r0, [pc, #52]	; (8004088 <prvInitialiseTaskLists+0x68>)
 8004054:	f7fe fd18 	bl	8002a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004058:	480c      	ldr	r0, [pc, #48]	; (800408c <prvInitialiseTaskLists+0x6c>)
 800405a:	f7fe fd15 	bl	8002a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800405e:	480c      	ldr	r0, [pc, #48]	; (8004090 <prvInitialiseTaskLists+0x70>)
 8004060:	f7fe fd12 	bl	8002a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <prvInitialiseTaskLists+0x74>)
 8004066:	f7fe fd0f 	bl	8002a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <prvInitialiseTaskLists+0x78>)
 800406c:	4a05      	ldr	r2, [pc, #20]	; (8004084 <prvInitialiseTaskLists+0x64>)
 800406e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <prvInitialiseTaskLists+0x7c>)
 8004072:	4a05      	ldr	r2, [pc, #20]	; (8004088 <prvInitialiseTaskLists+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000840 	.word	0x20000840
 8004084:	20000ca0 	.word	0x20000ca0
 8004088:	20000cb4 	.word	0x20000cb4
 800408c:	20000cd0 	.word	0x20000cd0
 8004090:	20000ce4 	.word	0x20000ce4
 8004094:	20000cfc 	.word	0x20000cfc
 8004098:	20000cc8 	.word	0x20000cc8
 800409c:	20000ccc 	.word	0x20000ccc

080040a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a6:	e019      	b.n	80040dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040a8:	f000 fdd4 	bl	8004c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <prvCheckTasksWaitingTermination+0x50>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fd6f 	bl	8002b9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <prvCheckTasksWaitingTermination+0x54>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <prvCheckTasksWaitingTermination+0x54>)
 80040c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040d2:	f000 fdef 	bl	8004cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f810 	bl	80040fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e1      	bne.n	80040a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000ce4 	.word	0x20000ce4
 80040f4:	20000d10 	.word	0x20000d10
 80040f8:	20000cf8 	.word	0x20000cf8

080040fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ff8c 	bl	8005030 <vPortFree>
				vPortFree( pxTCB );
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 ff89 	bl	8005030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800411e:	e018      	b.n	8004152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004126:	2b01      	cmp	r3, #1
 8004128:	d103      	bne.n	8004132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 ff80 	bl	8005030 <vPortFree>
	}
 8004130:	e00f      	b.n	8004152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004138:	2b02      	cmp	r3, #2
 800413a:	d00a      	beq.n	8004152 <prvDeleteTCB+0x56>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <prvDeleteTCB+0x54>
	}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <prvResetNextTaskUnblockTime+0x38>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvResetNextTaskUnblockTime+0x3c>)
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004174:	e008      	b.n	8004188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <prvResetNextTaskUnblockTime+0x38>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <prvResetNextTaskUnblockTime+0x3c>)
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000cc8 	.word	0x20000cc8
 8004198:	20000d30 	.word	0x20000d30

0800419c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <xTaskGetSchedulerState+0x34>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041aa:	2301      	movs	r3, #1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e008      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <xTaskGetSchedulerState+0x38>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041b8:	2302      	movs	r3, #2
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e001      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041c2:	687b      	ldr	r3, [r7, #4]
	}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000d1c 	.word	0x20000d1c
 80041d4:	20000d38 	.word	0x20000d38

080041d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d056      	beq.n	800429c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <xTaskPriorityDisinherit+0xd0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d00a      	beq.n	800420e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	429a      	cmp	r2, r3
 8004240:	d02c      	beq.n	800429c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	2b00      	cmp	r3, #0
 8004248:	d128      	bne.n	800429c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fca4 	bl	8002b9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <xTaskPriorityDisinherit+0xd4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d903      	bls.n	800427c <xTaskPriorityDisinherit+0xa4>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <xTaskPriorityDisinherit+0xd4>)
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <xTaskPriorityDisinherit+0xd8>)
 800428a:	441a      	add	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fc25 	bl	8002ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800429c:	697b      	ldr	r3, [r7, #20]
	}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000083c 	.word	0x2000083c
 80042ac:	20000d18 	.word	0x20000d18
 80042b0:	20000840 	.word	0x20000840

080042b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <prvAddCurrentTaskToDelayedList+0x90>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c4:	4b20      	ldr	r3, [pc, #128]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fc66 	bl	8002b9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d10a      	bne.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4819      	ldr	r0, [pc, #100]	; (800434c <prvAddCurrentTaskToDelayedList+0x98>)
 80042e8:	f7fe fbfb 	bl	8002ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ec:	e026      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d209      	bcs.n	800431a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fe fc09 	bl	8002b2a <vListInsert>
}
 8004318:	e010      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fbff 	bl	8002b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d202      	bcs.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000d14 	.word	0x20000d14
 8004348:	2000083c 	.word	0x2000083c
 800434c:	20000cfc 	.word	0x20000cfc
 8004350:	20000ccc 	.word	0x20000ccc
 8004354:	20000cc8 	.word	0x20000cc8
 8004358:	20000d30 	.word	0x20000d30

0800435c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004366:	f000 fb07 	bl	8004978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <xTimerCreateTimerTask+0x80>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800437a:	1d3a      	adds	r2, r7, #4
 800437c:	f107 0108 	add.w	r1, r7, #8
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fb65 	bl	8002a54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	9202      	str	r2, [sp, #8]
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	2302      	movs	r3, #2
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	460a      	mov	r2, r1
 800439c:	4910      	ldr	r1, [pc, #64]	; (80043e0 <xTimerCreateTimerTask+0x84>)
 800439e:	4811      	ldr	r0, [pc, #68]	; (80043e4 <xTimerCreateTimerTask+0x88>)
 80043a0:	f7ff f912 	bl	80035c8 <xTaskCreateStatic>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000d6c 	.word	0x20000d6c
 80043e0:	08005bdc 	.word	0x08005bdc
 80043e4:	08004521 	.word	0x08004521
 80043e8:	20000d70 	.word	0x20000d70

080043ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <xTimerGenericCommand+0x98>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02a      	beq.n	8004478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	dc18      	bgt.n	8004466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004434:	f7ff feb2 	bl	800419c <xTaskGetSchedulerState>
 8004438:	4603      	mov	r3, r0
 800443a:	2b02      	cmp	r3, #2
 800443c:	d109      	bne.n	8004452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <xTimerGenericCommand+0x98>)
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f107 0110 	add.w	r1, r7, #16
 8004446:	2300      	movs	r3, #0
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	f7fe fcd5 	bl	8002df8 <xQueueGenericSend>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24
 8004450:	e012      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xTimerGenericCommand+0x98>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f107 0110 	add.w	r1, r7, #16
 800445a:	2300      	movs	r3, #0
 800445c:	2200      	movs	r2, #0
 800445e:	f7fe fccb 	bl	8002df8 <xQueueGenericSend>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
 8004464:	e008      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <xTimerGenericCommand+0x98>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f107 0110 	add.w	r1, r7, #16
 800446e:	2300      	movs	r3, #0
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	f7fe fdbf 	bl	8002ff4 <xQueueGenericSendFromISR>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000d6c 	.word	0x20000d6c

08004488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <prvProcessExpiredTimer+0x94>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fb7b 	bl	8002b9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	18d1      	adds	r1, r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f000 f8d1 	bl	8004668 <prvInsertTimerInActiveList>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f7ff ff88 	bl	80043ec <xTimerGenericCommand>
 80044dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	4798      	blx	r3
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000d64 	.word	0x20000d64

08004520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f857 	bl	80045e0 <prvGetNextExpireTime>
 8004532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4619      	mov	r1, r3
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f803 	bl	8004544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800453e:	f000 f8d5 	bl	80046ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004542:	e7f1      	b.n	8004528 <prvTimerTask+0x8>

08004544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800454e:	f7ff fa43 	bl	80039d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f866 	bl	8004628 <prvSampleTimeNow>
 800455c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d130      	bne.n	80045c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d806      	bhi.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004572:	f7ff fa3f 	bl	80039f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff85 	bl	8004488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800457e:	e024      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <prvProcessTimerOrBlockTask+0x90>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <prvProcessTimerOrBlockTask+0x50>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <prvProcessTimerOrBlockTask+0x52>
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <prvProcessTimerOrBlockTask+0x94>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fe ffdb 	bl	8003560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045aa:	f7ff fa23 	bl	80039f4 <xTaskResumeAll>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <prvProcessTimerOrBlockTask+0x98>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
}
 80045c4:	e001      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045c6:	f7ff fa15 	bl	80039f4 <xTaskResumeAll>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d68 	.word	0x20000d68
 80045d8:	20000d6c 	.word	0x20000d6c
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <prvGetNextExpireTime+0x44>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <prvGetNextExpireTime+0x16>
 80045f2:	2201      	movs	r2, #1
 80045f4:	e000      	b.n	80045f8 <prvGetNextExpireTime+0x18>
 80045f6:	2200      	movs	r2, #0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <prvGetNextExpireTime+0x44>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e001      	b.n	8004614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000d64 	.word	0x20000d64

08004628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004630:	f7ff fa7e 	bl	8003b30 <xTaskGetTickCount>
 8004634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d205      	bcs.n	800464c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004640:	f000 f936 	bl	80048b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e002      	b.n	8004652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000d74 	.word	0x20000d74

08004668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d812      	bhi.n	80046b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e01b      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <prvInsertTimerInActiveList+0x7c>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7fe fa3c 	bl	8002b2a <vListInsert>
 80046b2:	e012      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d206      	bcs.n	80046ca <prvInsertTimerInActiveList+0x62>
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e007      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvInsertTimerInActiveList+0x80>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fe fa28 	bl	8002b2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000d68 	.word	0x20000d68
 80046e8:	20000d64 	.word	0x20000d64

080046ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046f2:	e0ca      	b.n	800488a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da18      	bge.n	800472c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	3304      	adds	r3, #4
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004722:	6850      	ldr	r0, [r2, #4]
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	4611      	mov	r1, r2
 800472a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f2c0 80aa 	blt.w	8004888 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fa29 	bl	8002b9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800474a:	463b      	mov	r3, r7
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff6b 	bl	8004628 <prvSampleTimeNow>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b09      	cmp	r3, #9
 8004758:	f200 8097 	bhi.w	800488a <prvProcessReceivedCommands+0x19e>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <prvProcessReceivedCommands+0x78>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	0800478d 	.word	0x0800478d
 8004768:	0800478d 	.word	0x0800478d
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004801 	.word	0x08004801
 8004774:	08004815 	.word	0x08004815
 8004778:	0800485f 	.word	0x0800485f
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800478d 	.word	0x0800478d
 8004784:	08004801 	.word	0x08004801
 8004788:	08004815 	.word	0x08004815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	18d1      	adds	r1, r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ac:	f7ff ff5c 	bl	8004668 <prvInsertTimerInActiveList>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d069      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05e      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	441a      	add	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f7ff fe05 	bl	80043ec <xTimerGenericCommand>
 80047e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d14f      	bne.n	800488a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	61bb      	str	r3, [r7, #24]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004812:	e03a      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	617b      	str	r3, [r7, #20]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004858:	f7ff ff06 	bl	8004668 <prvInsertTimerInActiveList>
					break;
 800485c:	e015      	b.n	800488a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800486c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486e:	f000 fbdf 	bl	8005030 <vPortFree>
 8004872:	e00a      	b.n	800488a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004886:	e000      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <prvProcessReceivedCommands+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1d39      	adds	r1, r7, #4
 8004890:	2200      	movs	r2, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fc4a 	bl	800312c <xQueueReceive>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f af2a 	bne.w	80046f4 <prvProcessReceivedCommands+0x8>
	}
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	; 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000d6c 	.word	0x20000d6c

080048b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b6:	e048      	b.n	800494a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe f963 	bl	8002b9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02e      	beq.n	800494a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90e      	bls.n	800491c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe f908 	bl	8002b2a <vListInsert>
 800491a:	e016      	b.n	800494a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2300      	movs	r3, #0
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	2100      	movs	r1, #0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fd60 	bl	80043ec <xTimerGenericCommand>
 800492c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	603b      	str	r3, [r7, #0]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1b1      	bne.n	80048b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvSwitchTimerLists+0xc4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a04      	ldr	r2, [pc, #16]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <prvSwitchTimerLists+0xc4>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000d64 	.word	0x20000d64
 8004974:	20000d68 	.word	0x20000d68

08004978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800497e:	f000 f969 	bl	8004c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d120      	bne.n	80049cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800498a:	4814      	ldr	r0, [pc, #80]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800498c:	f7fe f87c 	bl	8002a88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004990:	4813      	ldr	r0, [pc, #76]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 8004992:	f7fe f879 	bl	8002a88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <prvCheckForValidListAndQueue+0x6c>)
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800499a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvCheckForValidListAndQueue+0x70>)
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 80049a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <prvCheckForValidListAndQueue+0x74>)
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <prvCheckForValidListAndQueue+0x78>)
 80049aa:	2110      	movs	r1, #16
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fe f987 	bl	8002cc0 <xQueueGenericCreateStatic>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <prvCheckForValidListAndQueue+0x7c>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fda0 	bl	800350c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f000 f972 	bl	8004cb4 <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000d6c 	.word	0x20000d6c
 80049dc:	20000d3c 	.word	0x20000d3c
 80049e0:	20000d50 	.word	0x20000d50
 80049e4:	20000d64 	.word	0x20000d64
 80049e8:	20000d68 	.word	0x20000d68
 80049ec:	20000e18 	.word	0x20000e18
 80049f0:	20000d78 	.word	0x20000d78
 80049f4:	08005be4 	.word	0x08005be4

080049f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <pxPortInitialiseStack+0x64>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b14      	subs	r3, #20
 8004a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f06f 0202 	mvn.w	r2, #2
 8004a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b20      	subs	r3, #32
 8004a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	08004a61 	.word	0x08004a61

08004a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvTaskExitError+0x54>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d00a      	beq.n	8004a8a <prvTaskExitError+0x2a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvTaskExitError+0x28>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60bb      	str	r3, [r7, #8]
}
 8004a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a9e:	bf00      	nop
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0fc      	beq.n	8004aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000010 	.word	0x20000010
	...

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	4770      	bx	lr
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <prvPortStartFirstTask+0x24>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8814 	msr	CONTROL, r0
 8004afa:	b662      	cpsie	i
 8004afc:	b661      	cpsie	f
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	df00      	svc	0
 8004b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed08 	.word	0xe000ed08

08004b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <xPortStartScheduler+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10a      	bne.n	8004b36 <xPortStartScheduler+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x46>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xPortStartScheduler+0x12c>)
 8004b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xPortStartScheduler+0x130>)
 8004b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b84:	e009      	b.n	8004b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d0ef      	beq.n	8004b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00a      	beq.n	8004bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bfe:	f000 f8dd 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <xPortStartScheduler+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c08:	f000 f8fc 	bl	8004e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c18:	f7ff ff66 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c1c:	f7ff f852 	bl	8003cc4 <vTaskSwitchContext>
	prvTaskExitError();
 8004c20:	f7ff ff1e 	bl	8004a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	410fc271 	.word	0x410fc271
 8004c38:	410fc270 	.word	0x410fc270
 8004c3c:	e000e400 	.word	0xe000e400
 8004c40:	20000e68 	.word	0x20000e68
 8004c44:	20000e6c 	.word	0x20000e6c
 8004c48:	e000ed20 	.word	0xe000ed20
 8004c4c:	20000010 	.word	0x20000010
 8004c50:	e000ef34 	.word	0xe000ef34

08004c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
}
 8004cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe ffc0 	bl	8003cc4 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7fe fedd 	bl	8003b50 <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <xPortSysTickHandler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x44>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e010 	.word	0xe000e010
 8004df4:	e000e018 	.word	0xe000e018
 8004df8:	20000004 	.word	0x20000004
 8004dfc:	10624dd3 	.word	0x10624dd3
 8004e00:	e000e014 	.word	0xe000e014

08004e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e14 <vPortEnableVFP+0x10>
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e0e:	6001      	str	r1, [r0, #0]
 8004e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed88 	.word	0xe000ed88

08004e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e1e:	f3ef 8305 	mrs	r3, IPSR
 8004e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d914      	bls.n	8004e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <vPortValidateInterruptPriority+0x70>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vPortValidateInterruptPriority+0x74>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	7afa      	ldrb	r2, [r7, #11]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20a      	bcs.n	8004e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <vPortValidateInterruptPriority+0x78>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <vPortValidateInterruptPriority+0x7c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90a      	bls.n	8004e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	603b      	str	r3, [r7, #0]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <vPortValidateInterruptPriority+0x60>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e3f0 	.word	0xe000e3f0
 8004e8c:	20000e68 	.word	0x20000e68
 8004e90:	e000ed0c 	.word	0xe000ed0c
 8004e94:	20000e6c 	.word	0x20000e6c

08004e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ea4:	f7fe fd98 	bl	80039d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <pvPortMalloc+0x180>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004eb0:	f000 f920 	bl	80050f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <pvPortMalloc+0x184>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8093 	bne.w	8004fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01d      	beq.n	8004f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <pvPortMalloc+0x6c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06e      	beq.n	8004fe8 <pvPortMalloc+0x150>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <pvPortMalloc+0x188>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d869      	bhi.n	8004fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <pvPortMalloc+0x18c>)
 8004f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <pvPortMalloc+0x18c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1e:	e004      	b.n	8004f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <pvPortMalloc+0xa4>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <pvPortMalloc+0x180>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d050      	beq.n	8004fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	2308      	movs	r3, #8
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d91f      	bls.n	8004fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <pvPortMalloc+0xf8>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	613b      	str	r3, [r7, #16]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fa2:	69b8      	ldr	r0, [r7, #24]
 8004fa4:	f000 f908 	bl	80051b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <pvPortMalloc+0x188>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <pvPortMalloc+0x188>)
 8004fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <pvPortMalloc+0x188>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <pvPortMalloc+0x190>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d203      	bcs.n	8004fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fc2:	4b17      	ldr	r3, [pc, #92]	; (8005020 <pvPortMalloc+0x188>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <pvPortMalloc+0x190>)
 8004fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x184>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <pvPortMalloc+0x194>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <pvPortMalloc+0x194>)
 8004fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fe8:	f7fe fd04 	bl	80039f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <pvPortMalloc+0x174>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <pvPortMalloc+0x172>
	return pvReturn;
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004a78 	.word	0x20004a78
 800501c:	20004a8c 	.word	0x20004a8c
 8005020:	20004a7c 	.word	0x20004a7c
 8005024:	20004a70 	.word	0x20004a70
 8005028:	20004a80 	.word	0x20004a80
 800502c:	20004a84 	.word	0x20004a84

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04d      	beq.n	80050de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <vPortFree+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vPortFree+0x44>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <vPortFree+0x62>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <vPortFree+0xb8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11a      	bne.n	80050de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vPortFree+0xb8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050b8:	f7fe fc8e 	bl	80039d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vPortFree+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <vPortFree+0xbc>)
 80050c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f000 f874 	bl	80051b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <vPortFree+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <vPortFree+0xc0>)
 80050d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050da:	f7fe fc8b 	bl	80039f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20004a8c 	.word	0x20004a8c
 80050ec:	20004a7c 	.word	0x20004a7c
 80050f0:	20004a88 	.word	0x20004a88

080050f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <prvHeapInit+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <prvHeapInit+0xac>)
 8005124:	4413      	add	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <prvHeapInit+0xb0>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <prvHeapInit+0xb0>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005140:	2208      	movs	r2, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <prvHeapInit+0xb4>)
 8005154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvHeapInit+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <prvHeapInit+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvHeapInit+0xb4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <prvHeapInit+0xb8>)
 8005182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <prvHeapInit+0xbc>)
 800518a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvHeapInit+0xc0>)
 800518e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000e70 	.word	0x20000e70
 80051a4:	20004a70 	.word	0x20004a70
 80051a8:	20004a78 	.word	0x20004a78
 80051ac:	20004a80 	.word	0x20004a80
 80051b0:	20004a7c 	.word	0x20004a7c
 80051b4:	20004a8c 	.word	0x20004a8c

080051b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <prvInsertBlockIntoFreeList+0xac>)
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e002      	b.n	80051cc <prvInsertBlockIntoFreeList+0x14>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d8f7      	bhi.n	80051c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d108      	bne.n	80051fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	441a      	add	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d118      	bne.n	8005240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d00d      	beq.n	8005236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e008      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e003      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d002      	beq.n	8005256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20004a70 	.word	0x20004a70
 8005268:	20004a78 	.word	0x20004a78

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000014 	.word	0x20000014

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4d0d      	ldr	r5, [pc, #52]	; (80052b0 <__libc_init_array+0x38>)
 800527c:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	2600      	movs	r6, #0
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	4d0b      	ldr	r5, [pc, #44]	; (80052b8 <__libc_init_array+0x40>)
 800528a:	4c0c      	ldr	r4, [pc, #48]	; (80052bc <__libc_init_array+0x44>)
 800528c:	f000 fc8e 	bl	8005bac <_init>
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	2600      	movs	r6, #0
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	08005c40 	.word	0x08005c40
 80052b4:	08005c40 	.word	0x08005c40
 80052b8:	08005c40 	.word	0x08005c40
 80052bc:	08005c44 	.word	0x08005c44

080052c0 <memcpy>:
 80052c0:	440a      	add	r2, r1
 80052c2:	4291      	cmp	r1, r2
 80052c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052c8:	d100      	bne.n	80052cc <memcpy+0xc>
 80052ca:	4770      	bx	lr
 80052cc:	b510      	push	{r4, lr}
 80052ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052d6:	4291      	cmp	r1, r2
 80052d8:	d1f9      	bne.n	80052ce <memcpy+0xe>
 80052da:	bd10      	pop	{r4, pc}

080052dc <memset>:
 80052dc:	4402      	add	r2, r0
 80052de:	4603      	mov	r3, r0
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d100      	bne.n	80052e6 <memset+0xa>
 80052e4:	4770      	bx	lr
 80052e6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ea:	e7f9      	b.n	80052e0 <memset+0x4>

080052ec <siprintf>:
 80052ec:	b40e      	push	{r1, r2, r3}
 80052ee:	b500      	push	{lr}
 80052f0:	b09c      	sub	sp, #112	; 0x70
 80052f2:	ab1d      	add	r3, sp, #116	; 0x74
 80052f4:	9002      	str	r0, [sp, #8]
 80052f6:	9006      	str	r0, [sp, #24]
 80052f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052fc:	4809      	ldr	r0, [pc, #36]	; (8005324 <siprintf+0x38>)
 80052fe:	9107      	str	r1, [sp, #28]
 8005300:	9104      	str	r1, [sp, #16]
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <siprintf+0x3c>)
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	9105      	str	r1, [sp, #20]
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	a902      	add	r1, sp, #8
 8005310:	f000 f868 	bl	80053e4 <_svfiprintf_r>
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	20000014 	.word	0x20000014
 8005328:	ffff0208 	.word	0xffff0208

0800532c <__ssputs_r>:
 800532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	688e      	ldr	r6, [r1, #8]
 8005332:	429e      	cmp	r6, r3
 8005334:	4682      	mov	sl, r0
 8005336:	460c      	mov	r4, r1
 8005338:	4690      	mov	r8, r2
 800533a:	461f      	mov	r7, r3
 800533c:	d838      	bhi.n	80053b0 <__ssputs_r+0x84>
 800533e:	898a      	ldrh	r2, [r1, #12]
 8005340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005344:	d032      	beq.n	80053ac <__ssputs_r+0x80>
 8005346:	6825      	ldr	r5, [r4, #0]
 8005348:	6909      	ldr	r1, [r1, #16]
 800534a:	eba5 0901 	sub.w	r9, r5, r1
 800534e:	6965      	ldr	r5, [r4, #20]
 8005350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005358:	3301      	adds	r3, #1
 800535a:	444b      	add	r3, r9
 800535c:	106d      	asrs	r5, r5, #1
 800535e:	429d      	cmp	r5, r3
 8005360:	bf38      	it	cc
 8005362:	461d      	movcc	r5, r3
 8005364:	0553      	lsls	r3, r2, #21
 8005366:	d531      	bpl.n	80053cc <__ssputs_r+0xa0>
 8005368:	4629      	mov	r1, r5
 800536a:	f000 fb55 	bl	8005a18 <_malloc_r>
 800536e:	4606      	mov	r6, r0
 8005370:	b950      	cbnz	r0, 8005388 <__ssputs_r+0x5c>
 8005372:	230c      	movs	r3, #12
 8005374:	f8ca 3000 	str.w	r3, [sl]
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	6921      	ldr	r1, [r4, #16]
 800538a:	464a      	mov	r2, r9
 800538c:	f7ff ff98 	bl	80052c0 <memcpy>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6126      	str	r6, [r4, #16]
 800539e:	6165      	str	r5, [r4, #20]
 80053a0:	444e      	add	r6, r9
 80053a2:	eba5 0509 	sub.w	r5, r5, r9
 80053a6:	6026      	str	r6, [r4, #0]
 80053a8:	60a5      	str	r5, [r4, #8]
 80053aa:	463e      	mov	r6, r7
 80053ac:	42be      	cmp	r6, r7
 80053ae:	d900      	bls.n	80053b2 <__ssputs_r+0x86>
 80053b0:	463e      	mov	r6, r7
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4641      	mov	r1, r8
 80053b8:	f000 faa8 	bl	800590c <memmove>
 80053bc:	68a3      	ldr	r3, [r4, #8]
 80053be:	1b9b      	subs	r3, r3, r6
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	4433      	add	r3, r6
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	2000      	movs	r0, #0
 80053ca:	e7db      	b.n	8005384 <__ssputs_r+0x58>
 80053cc:	462a      	mov	r2, r5
 80053ce:	f000 fb97 	bl	8005b00 <_realloc_r>
 80053d2:	4606      	mov	r6, r0
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1e1      	bne.n	800539c <__ssputs_r+0x70>
 80053d8:	6921      	ldr	r1, [r4, #16]
 80053da:	4650      	mov	r0, sl
 80053dc:	f000 fab0 	bl	8005940 <_free_r>
 80053e0:	e7c7      	b.n	8005372 <__ssputs_r+0x46>
	...

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4698      	mov	r8, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	b09d      	sub	sp, #116	; 0x74
 80053f0:	4607      	mov	r7, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	d50e      	bpl.n	8005416 <_svfiprintf_r+0x32>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b963      	cbnz	r3, 8005416 <_svfiprintf_r+0x32>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f000 fb0b 	bl	8005a18 <_malloc_r>
 8005402:	6028      	str	r0, [r5, #0]
 8005404:	6128      	str	r0, [r5, #16]
 8005406:	b920      	cbnz	r0, 8005412 <_svfiprintf_r+0x2e>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e0d1      	b.n	80055b6 <_svfiprintf_r+0x1d2>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	616b      	str	r3, [r5, #20]
 8005416:	2300      	movs	r3, #0
 8005418:	9309      	str	r3, [sp, #36]	; 0x24
 800541a:	2320      	movs	r3, #32
 800541c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005420:	f8cd 800c 	str.w	r8, [sp, #12]
 8005424:	2330      	movs	r3, #48	; 0x30
 8005426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055d0 <_svfiprintf_r+0x1ec>
 800542a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542e:	f04f 0901 	mov.w	r9, #1
 8005432:	4623      	mov	r3, r4
 8005434:	469a      	mov	sl, r3
 8005436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543a:	b10a      	cbz	r2, 8005440 <_svfiprintf_r+0x5c>
 800543c:	2a25      	cmp	r2, #37	; 0x25
 800543e:	d1f9      	bne.n	8005434 <_svfiprintf_r+0x50>
 8005440:	ebba 0b04 	subs.w	fp, sl, r4
 8005444:	d00b      	beq.n	800545e <_svfiprintf_r+0x7a>
 8005446:	465b      	mov	r3, fp
 8005448:	4622      	mov	r2, r4
 800544a:	4629      	mov	r1, r5
 800544c:	4638      	mov	r0, r7
 800544e:	f7ff ff6d 	bl	800532c <__ssputs_r>
 8005452:	3001      	adds	r0, #1
 8005454:	f000 80aa 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545a:	445a      	add	r2, fp
 800545c:	9209      	str	r2, [sp, #36]	; 0x24
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a2 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005472:	f10a 0a01 	add.w	sl, sl, #1
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	9307      	str	r3, [sp, #28]
 800547a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547e:	931a      	str	r3, [sp, #104]	; 0x68
 8005480:	4654      	mov	r4, sl
 8005482:	2205      	movs	r2, #5
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4851      	ldr	r0, [pc, #324]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800548a:	f7fa fec1 	bl	8000210 <memchr>
 800548e:	9a04      	ldr	r2, [sp, #16]
 8005490:	b9d8      	cbnz	r0, 80054ca <_svfiprintf_r+0xe6>
 8005492:	06d0      	lsls	r0, r2, #27
 8005494:	bf44      	itt	mi
 8005496:	2320      	movmi	r3, #32
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549c:	0711      	lsls	r1, r2, #28
 800549e:	bf44      	itt	mi
 80054a0:	232b      	movmi	r3, #43	; 0x2b
 80054a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a6:	f89a 3000 	ldrb.w	r3, [sl]
 80054aa:	2b2a      	cmp	r3, #42	; 0x2a
 80054ac:	d015      	beq.n	80054da <_svfiprintf_r+0xf6>
 80054ae:	9a07      	ldr	r2, [sp, #28]
 80054b0:	4654      	mov	r4, sl
 80054b2:	2000      	movs	r0, #0
 80054b4:	f04f 0c0a 	mov.w	ip, #10
 80054b8:	4621      	mov	r1, r4
 80054ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054be:	3b30      	subs	r3, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d94e      	bls.n	8005562 <_svfiprintf_r+0x17e>
 80054c4:	b1b0      	cbz	r0, 80054f4 <_svfiprintf_r+0x110>
 80054c6:	9207      	str	r2, [sp, #28]
 80054c8:	e014      	b.n	80054f4 <_svfiprintf_r+0x110>
 80054ca:	eba0 0308 	sub.w	r3, r0, r8
 80054ce:	fa09 f303 	lsl.w	r3, r9, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	46a2      	mov	sl, r4
 80054d8:	e7d2      	b.n	8005480 <_svfiprintf_r+0x9c>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	9103      	str	r1, [sp, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfbb      	ittet	lt
 80054e6:	425b      	neglt	r3, r3
 80054e8:	f042 0202 	orrlt.w	r2, r2, #2
 80054ec:	9307      	strge	r3, [sp, #28]
 80054ee:	9307      	strlt	r3, [sp, #28]
 80054f0:	bfb8      	it	lt
 80054f2:	9204      	strlt	r2, [sp, #16]
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	2b2e      	cmp	r3, #46	; 0x2e
 80054f8:	d10c      	bne.n	8005514 <_svfiprintf_r+0x130>
 80054fa:	7863      	ldrb	r3, [r4, #1]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d135      	bne.n	800556c <_svfiprintf_r+0x188>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb8      	it	lt
 800550c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005510:	3402      	adds	r4, #2
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055e0 <_svfiprintf_r+0x1fc>
 8005518:	7821      	ldrb	r1, [r4, #0]
 800551a:	2203      	movs	r2, #3
 800551c:	4650      	mov	r0, sl
 800551e:	f7fa fe77 	bl	8000210 <memchr>
 8005522:	b140      	cbz	r0, 8005536 <_svfiprintf_r+0x152>
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	eba0 000a 	sub.w	r0, r0, sl
 800552a:	fa03 f000 	lsl.w	r0, r3, r0
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	4303      	orrs	r3, r0
 8005532:	3401      	adds	r4, #1
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4826      	ldr	r0, [pc, #152]	; (80055d4 <_svfiprintf_r+0x1f0>)
 800553c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005540:	2206      	movs	r2, #6
 8005542:	f7fa fe65 	bl	8000210 <memchr>
 8005546:	2800      	cmp	r0, #0
 8005548:	d038      	beq.n	80055bc <_svfiprintf_r+0x1d8>
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <_svfiprintf_r+0x1f4>)
 800554c:	bb1b      	cbnz	r3, 8005596 <_svfiprintf_r+0x1b2>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	3307      	adds	r3, #7
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	3308      	adds	r3, #8
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555c:	4433      	add	r3, r6
 800555e:	9309      	str	r3, [sp, #36]	; 0x24
 8005560:	e767      	b.n	8005432 <_svfiprintf_r+0x4e>
 8005562:	fb0c 3202 	mla	r2, ip, r2, r3
 8005566:	460c      	mov	r4, r1
 8005568:	2001      	movs	r0, #1
 800556a:	e7a5      	b.n	80054b8 <_svfiprintf_r+0xd4>
 800556c:	2300      	movs	r3, #0
 800556e:	3401      	adds	r4, #1
 8005570:	9305      	str	r3, [sp, #20]
 8005572:	4619      	mov	r1, r3
 8005574:	f04f 0c0a 	mov.w	ip, #10
 8005578:	4620      	mov	r0, r4
 800557a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557e:	3a30      	subs	r2, #48	; 0x30
 8005580:	2a09      	cmp	r2, #9
 8005582:	d903      	bls.n	800558c <_svfiprintf_r+0x1a8>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0c5      	beq.n	8005514 <_svfiprintf_r+0x130>
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	e7c3      	b.n	8005514 <_svfiprintf_r+0x130>
 800558c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005590:	4604      	mov	r4, r0
 8005592:	2301      	movs	r3, #1
 8005594:	e7f0      	b.n	8005578 <_svfiprintf_r+0x194>
 8005596:	ab03      	add	r3, sp, #12
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	462a      	mov	r2, r5
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <_svfiprintf_r+0x1f8>)
 800559e:	a904      	add	r1, sp, #16
 80055a0:	4638      	mov	r0, r7
 80055a2:	f3af 8000 	nop.w
 80055a6:	1c42      	adds	r2, r0, #1
 80055a8:	4606      	mov	r6, r0
 80055aa:	d1d6      	bne.n	800555a <_svfiprintf_r+0x176>
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	065b      	lsls	r3, r3, #25
 80055b0:	f53f af2c 	bmi.w	800540c <_svfiprintf_r+0x28>
 80055b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b6:	b01d      	add	sp, #116	; 0x74
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <_svfiprintf_r+0x1f8>)
 80055c4:	a904      	add	r1, sp, #16
 80055c6:	4638      	mov	r0, r7
 80055c8:	f000 f87a 	bl	80056c0 <_printf_i>
 80055cc:	e7eb      	b.n	80055a6 <_svfiprintf_r+0x1c2>
 80055ce:	bf00      	nop
 80055d0:	08005c04 	.word	0x08005c04
 80055d4:	08005c0e 	.word	0x08005c0e
 80055d8:	00000000 	.word	0x00000000
 80055dc:	0800532d 	.word	0x0800532d
 80055e0:	08005c0a 	.word	0x08005c0a

080055e4 <_printf_common>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	4616      	mov	r6, r2
 80055ea:	4699      	mov	r9, r3
 80055ec:	688a      	ldr	r2, [r1, #8]
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bfb8      	it	lt
 80055f8:	4613      	movlt	r3, r2
 80055fa:	6033      	str	r3, [r6, #0]
 80055fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005600:	4607      	mov	r7, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b10a      	cbz	r2, 800560a <_printf_common+0x26>
 8005606:	3301      	adds	r3, #1
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	0699      	lsls	r1, r3, #26
 800560e:	bf42      	ittt	mi
 8005610:	6833      	ldrmi	r3, [r6, #0]
 8005612:	3302      	addmi	r3, #2
 8005614:	6033      	strmi	r3, [r6, #0]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d106      	bne.n	800562c <_printf_common+0x48>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	6832      	ldr	r2, [r6, #0]
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc26      	bgt.n	800567a <_printf_common+0x96>
 800562c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005630:	1e13      	subs	r3, r2, #0
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	2301      	movne	r3, #1
 8005638:	0692      	lsls	r2, r2, #26
 800563a:	d42b      	bmi.n	8005694 <_printf_common+0xb0>
 800563c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005640:	4649      	mov	r1, r9
 8005642:	4638      	mov	r0, r7
 8005644:	47c0      	blx	r8
 8005646:	3001      	adds	r0, #1
 8005648:	d01e      	beq.n	8005688 <_printf_common+0xa4>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	68e5      	ldr	r5, [r4, #12]
 800564e:	6832      	ldr	r2, [r6, #0]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf08      	it	eq
 8005658:	1aad      	subeq	r5, r5, r2
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	bf0c      	ite	eq
 8005660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005664:	2500      	movne	r5, #0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfc4      	itt	gt
 800566a:	1a9b      	subgt	r3, r3, r2
 800566c:	18ed      	addgt	r5, r5, r3
 800566e:	2600      	movs	r6, #0
 8005670:	341a      	adds	r4, #26
 8005672:	42b5      	cmp	r5, r6
 8005674:	d11a      	bne.n	80056ac <_printf_common+0xc8>
 8005676:	2000      	movs	r0, #0
 8005678:	e008      	b.n	800568c <_printf_common+0xa8>
 800567a:	2301      	movs	r3, #1
 800567c:	4652      	mov	r2, sl
 800567e:	4649      	mov	r1, r9
 8005680:	4638      	mov	r0, r7
 8005682:	47c0      	blx	r8
 8005684:	3001      	adds	r0, #1
 8005686:	d103      	bne.n	8005690 <_printf_common+0xac>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	3501      	adds	r5, #1
 8005692:	e7c6      	b.n	8005622 <_printf_common+0x3e>
 8005694:	18e1      	adds	r1, r4, r3
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800569e:	4422      	add	r2, r4
 80056a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a8:	3302      	adds	r3, #2
 80056aa:	e7c7      	b.n	800563c <_printf_common+0x58>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4622      	mov	r2, r4
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d0e6      	beq.n	8005688 <_printf_common+0xa4>
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7d9      	b.n	8005672 <_printf_common+0x8e>
	...

080056c0 <_printf_i>:
 80056c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	7e0f      	ldrb	r7, [r1, #24]
 80056c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056c8:	2f78      	cmp	r7, #120	; 0x78
 80056ca:	4691      	mov	r9, r2
 80056cc:	4680      	mov	r8, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	469a      	mov	sl, r3
 80056d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056d6:	d807      	bhi.n	80056e8 <_printf_i+0x28>
 80056d8:	2f62      	cmp	r7, #98	; 0x62
 80056da:	d80a      	bhi.n	80056f2 <_printf_i+0x32>
 80056dc:	2f00      	cmp	r7, #0
 80056de:	f000 80d8 	beq.w	8005892 <_printf_i+0x1d2>
 80056e2:	2f58      	cmp	r7, #88	; 0x58
 80056e4:	f000 80a3 	beq.w	800582e <_printf_i+0x16e>
 80056e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f0:	e03a      	b.n	8005768 <_printf_i+0xa8>
 80056f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056f6:	2b15      	cmp	r3, #21
 80056f8:	d8f6      	bhi.n	80056e8 <_printf_i+0x28>
 80056fa:	a101      	add	r1, pc, #4	; (adr r1, 8005700 <_printf_i+0x40>)
 80056fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005700:	08005759 	.word	0x08005759
 8005704:	0800576d 	.word	0x0800576d
 8005708:	080056e9 	.word	0x080056e9
 800570c:	080056e9 	.word	0x080056e9
 8005710:	080056e9 	.word	0x080056e9
 8005714:	080056e9 	.word	0x080056e9
 8005718:	0800576d 	.word	0x0800576d
 800571c:	080056e9 	.word	0x080056e9
 8005720:	080056e9 	.word	0x080056e9
 8005724:	080056e9 	.word	0x080056e9
 8005728:	080056e9 	.word	0x080056e9
 800572c:	08005879 	.word	0x08005879
 8005730:	0800579d 	.word	0x0800579d
 8005734:	0800585b 	.word	0x0800585b
 8005738:	080056e9 	.word	0x080056e9
 800573c:	080056e9 	.word	0x080056e9
 8005740:	0800589b 	.word	0x0800589b
 8005744:	080056e9 	.word	0x080056e9
 8005748:	0800579d 	.word	0x0800579d
 800574c:	080056e9 	.word	0x080056e9
 8005750:	080056e9 	.word	0x080056e9
 8005754:	08005863 	.word	0x08005863
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	1d1a      	adds	r2, r3, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005768:	2301      	movs	r3, #1
 800576a:	e0a3      	b.n	80058b4 <_printf_i+0x1f4>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	6829      	ldr	r1, [r5, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	f101 0304 	add.w	r3, r1, #4
 8005776:	d50a      	bpl.n	800578e <_printf_i+0xce>
 8005778:	680e      	ldr	r6, [r1, #0]
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	2e00      	cmp	r6, #0
 800577e:	da03      	bge.n	8005788 <_printf_i+0xc8>
 8005780:	232d      	movs	r3, #45	; 0x2d
 8005782:	4276      	negs	r6, r6
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	485e      	ldr	r0, [pc, #376]	; (8005904 <_printf_i+0x244>)
 800578a:	230a      	movs	r3, #10
 800578c:	e019      	b.n	80057c2 <_printf_i+0x102>
 800578e:	680e      	ldr	r6, [r1, #0]
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005796:	bf18      	it	ne
 8005798:	b236      	sxthne	r6, r6
 800579a:	e7ef      	b.n	800577c <_printf_i+0xbc>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	0601      	lsls	r1, r0, #24
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0xec>
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0xf2>
 80057ac:	0646      	lsls	r6, r0, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0xe8>
 80057b0:	881e      	ldrh	r6, [r3, #0]
 80057b2:	4854      	ldr	r0, [pc, #336]	; (8005904 <_printf_i+0x244>)
 80057b4:	2f6f      	cmp	r7, #111	; 0x6f
 80057b6:	bf0c      	ite	eq
 80057b8:	2308      	moveq	r3, #8
 80057ba:	230a      	movne	r3, #10
 80057bc:	2100      	movs	r1, #0
 80057be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c2:	6865      	ldr	r5, [r4, #4]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	bfa2      	ittt	ge
 80057ca:	6821      	ldrge	r1, [r4, #0]
 80057cc:	f021 0104 	bicge.w	r1, r1, #4
 80057d0:	6021      	strge	r1, [r4, #0]
 80057d2:	b90e      	cbnz	r6, 80057d8 <_printf_i+0x118>
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d04d      	beq.n	8005874 <_printf_i+0x1b4>
 80057d8:	4615      	mov	r5, r2
 80057da:	fbb6 f1f3 	udiv	r1, r6, r3
 80057de:	fb03 6711 	mls	r7, r3, r1, r6
 80057e2:	5dc7      	ldrb	r7, [r0, r7]
 80057e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057e8:	4637      	mov	r7, r6
 80057ea:	42bb      	cmp	r3, r7
 80057ec:	460e      	mov	r6, r1
 80057ee:	d9f4      	bls.n	80057da <_printf_i+0x11a>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d10b      	bne.n	800580c <_printf_i+0x14c>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07de      	lsls	r6, r3, #31
 80057f8:	d508      	bpl.n	800580c <_printf_i+0x14c>
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	4299      	cmp	r1, r3
 8005800:	bfde      	ittt	le
 8005802:	2330      	movle	r3, #48	; 0x30
 8005804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800580c:	1b52      	subs	r2, r2, r5
 800580e:	6122      	str	r2, [r4, #16]
 8005810:	f8cd a000 	str.w	sl, [sp]
 8005814:	464b      	mov	r3, r9
 8005816:	aa03      	add	r2, sp, #12
 8005818:	4621      	mov	r1, r4
 800581a:	4640      	mov	r0, r8
 800581c:	f7ff fee2 	bl	80055e4 <_printf_common>
 8005820:	3001      	adds	r0, #1
 8005822:	d14c      	bne.n	80058be <_printf_i+0x1fe>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b004      	add	sp, #16
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	4835      	ldr	r0, [pc, #212]	; (8005904 <_printf_i+0x244>)
 8005830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005834:	6829      	ldr	r1, [r5, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f851 6b04 	ldr.w	r6, [r1], #4
 800583c:	6029      	str	r1, [r5, #0]
 800583e:	061d      	lsls	r5, r3, #24
 8005840:	d514      	bpl.n	800586c <_printf_i+0x1ac>
 8005842:	07df      	lsls	r7, r3, #31
 8005844:	bf44      	itt	mi
 8005846:	f043 0320 	orrmi.w	r3, r3, #32
 800584a:	6023      	strmi	r3, [r4, #0]
 800584c:	b91e      	cbnz	r6, 8005856 <_printf_i+0x196>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	f023 0320 	bic.w	r3, r3, #32
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	2310      	movs	r3, #16
 8005858:	e7b0      	b.n	80057bc <_printf_i+0xfc>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	2378      	movs	r3, #120	; 0x78
 8005864:	4828      	ldr	r0, [pc, #160]	; (8005908 <_printf_i+0x248>)
 8005866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800586a:	e7e3      	b.n	8005834 <_printf_i+0x174>
 800586c:	0659      	lsls	r1, r3, #25
 800586e:	bf48      	it	mi
 8005870:	b2b6      	uxthmi	r6, r6
 8005872:	e7e6      	b.n	8005842 <_printf_i+0x182>
 8005874:	4615      	mov	r5, r2
 8005876:	e7bb      	b.n	80057f0 <_printf_i+0x130>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6826      	ldr	r6, [r4, #0]
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	1d18      	adds	r0, r3, #4
 8005880:	6028      	str	r0, [r5, #0]
 8005882:	0635      	lsls	r5, r6, #24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	d501      	bpl.n	800588c <_printf_i+0x1cc>
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0x1d2>
 800588c:	0670      	lsls	r0, r6, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0x1c8>
 8005890:	8019      	strh	r1, [r3, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	4615      	mov	r5, r2
 8005898:	e7ba      	b.n	8005810 <_printf_i+0x150>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fa fcb2 	bl	8000210 <memchr>
 80058ac:	b108      	cbz	r0, 80058b2 <_printf_i+0x1f2>
 80058ae:	1b40      	subs	r0, r0, r5
 80058b0:	6060      	str	r0, [r4, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	e7a8      	b.n	8005810 <_printf_i+0x150>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d0ab      	beq.n	8005824 <_printf_i+0x164>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	079b      	lsls	r3, r3, #30
 80058d0:	d413      	bmi.n	80058fa <_printf_i+0x23a>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e7a4      	b.n	8005828 <_printf_i+0x168>
 80058de:	2301      	movs	r3, #1
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	47d0      	blx	sl
 80058e8:	3001      	adds	r0, #1
 80058ea:	d09b      	beq.n	8005824 <_printf_i+0x164>
 80058ec:	3501      	adds	r5, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	9903      	ldr	r1, [sp, #12]
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dcf2      	bgt.n	80058de <_printf_i+0x21e>
 80058f8:	e7eb      	b.n	80058d2 <_printf_i+0x212>
 80058fa:	2500      	movs	r5, #0
 80058fc:	f104 0619 	add.w	r6, r4, #25
 8005900:	e7f5      	b.n	80058ee <_printf_i+0x22e>
 8005902:	bf00      	nop
 8005904:	08005c15 	.word	0x08005c15
 8005908:	08005c26 	.word	0x08005c26

0800590c <memmove>:
 800590c:	4288      	cmp	r0, r1
 800590e:	b510      	push	{r4, lr}
 8005910:	eb01 0402 	add.w	r4, r1, r2
 8005914:	d902      	bls.n	800591c <memmove+0x10>
 8005916:	4284      	cmp	r4, r0
 8005918:	4623      	mov	r3, r4
 800591a:	d807      	bhi.n	800592c <memmove+0x20>
 800591c:	1e43      	subs	r3, r0, #1
 800591e:	42a1      	cmp	r1, r4
 8005920:	d008      	beq.n	8005934 <memmove+0x28>
 8005922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800592a:	e7f8      	b.n	800591e <memmove+0x12>
 800592c:	4402      	add	r2, r0
 800592e:	4601      	mov	r1, r0
 8005930:	428a      	cmp	r2, r1
 8005932:	d100      	bne.n	8005936 <memmove+0x2a>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800593e:	e7f7      	b.n	8005930 <memmove+0x24>

08005940 <_free_r>:
 8005940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005942:	2900      	cmp	r1, #0
 8005944:	d044      	beq.n	80059d0 <_free_r+0x90>
 8005946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594a:	9001      	str	r0, [sp, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f1a1 0404 	sub.w	r4, r1, #4
 8005952:	bfb8      	it	lt
 8005954:	18e4      	addlt	r4, r4, r3
 8005956:	f000 f913 	bl	8005b80 <__malloc_lock>
 800595a:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <_free_r+0x94>)
 800595c:	9801      	ldr	r0, [sp, #4]
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	b933      	cbnz	r3, 8005970 <_free_r+0x30>
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	6014      	str	r4, [r2, #0]
 8005966:	b003      	add	sp, #12
 8005968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800596c:	f000 b90e 	b.w	8005b8c <__malloc_unlock>
 8005970:	42a3      	cmp	r3, r4
 8005972:	d908      	bls.n	8005986 <_free_r+0x46>
 8005974:	6825      	ldr	r5, [r4, #0]
 8005976:	1961      	adds	r1, r4, r5
 8005978:	428b      	cmp	r3, r1
 800597a:	bf01      	itttt	eq
 800597c:	6819      	ldreq	r1, [r3, #0]
 800597e:	685b      	ldreq	r3, [r3, #4]
 8005980:	1949      	addeq	r1, r1, r5
 8005982:	6021      	streq	r1, [r4, #0]
 8005984:	e7ed      	b.n	8005962 <_free_r+0x22>
 8005986:	461a      	mov	r2, r3
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b10b      	cbz	r3, 8005990 <_free_r+0x50>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d9fa      	bls.n	8005986 <_free_r+0x46>
 8005990:	6811      	ldr	r1, [r2, #0]
 8005992:	1855      	adds	r5, r2, r1
 8005994:	42a5      	cmp	r5, r4
 8005996:	d10b      	bne.n	80059b0 <_free_r+0x70>
 8005998:	6824      	ldr	r4, [r4, #0]
 800599a:	4421      	add	r1, r4
 800599c:	1854      	adds	r4, r2, r1
 800599e:	42a3      	cmp	r3, r4
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	d1e0      	bne.n	8005966 <_free_r+0x26>
 80059a4:	681c      	ldr	r4, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	6053      	str	r3, [r2, #4]
 80059aa:	4421      	add	r1, r4
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	e7da      	b.n	8005966 <_free_r+0x26>
 80059b0:	d902      	bls.n	80059b8 <_free_r+0x78>
 80059b2:	230c      	movs	r3, #12
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	e7d6      	b.n	8005966 <_free_r+0x26>
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	1961      	adds	r1, r4, r5
 80059bc:	428b      	cmp	r3, r1
 80059be:	bf04      	itt	eq
 80059c0:	6819      	ldreq	r1, [r3, #0]
 80059c2:	685b      	ldreq	r3, [r3, #4]
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	bf04      	itt	eq
 80059c8:	1949      	addeq	r1, r1, r5
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	6054      	str	r4, [r2, #4]
 80059ce:	e7ca      	b.n	8005966 <_free_r+0x26>
 80059d0:	b003      	add	sp, #12
 80059d2:	bd30      	pop	{r4, r5, pc}
 80059d4:	20004a90 	.word	0x20004a90

080059d8 <sbrk_aligned>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4e0e      	ldr	r6, [pc, #56]	; (8005a14 <sbrk_aligned+0x3c>)
 80059dc:	460c      	mov	r4, r1
 80059de:	6831      	ldr	r1, [r6, #0]
 80059e0:	4605      	mov	r5, r0
 80059e2:	b911      	cbnz	r1, 80059ea <sbrk_aligned+0x12>
 80059e4:	f000 f8bc 	bl	8005b60 <_sbrk_r>
 80059e8:	6030      	str	r0, [r6, #0]
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f8b7 	bl	8005b60 <_sbrk_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d00a      	beq.n	8005a0c <sbrk_aligned+0x34>
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d007      	beq.n	8005a10 <sbrk_aligned+0x38>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f8ac 	bl	8005b60 <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d101      	bne.n	8005a10 <sbrk_aligned+0x38>
 8005a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a10:	4620      	mov	r0, r4
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	20004a94 	.word	0x20004a94

08005a18 <_malloc_r>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	1ccd      	adds	r5, r1, #3
 8005a1e:	f025 0503 	bic.w	r5, r5, #3
 8005a22:	3508      	adds	r5, #8
 8005a24:	2d0c      	cmp	r5, #12
 8005a26:	bf38      	it	cc
 8005a28:	250c      	movcc	r5, #12
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	db01      	blt.n	8005a34 <_malloc_r+0x1c>
 8005a30:	42a9      	cmp	r1, r5
 8005a32:	d905      	bls.n	8005a40 <_malloc_r+0x28>
 8005a34:	230c      	movs	r3, #12
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	2600      	movs	r6, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a40:	4e2e      	ldr	r6, [pc, #184]	; (8005afc <_malloc_r+0xe4>)
 8005a42:	f000 f89d 	bl	8005b80 <__malloc_lock>
 8005a46:	6833      	ldr	r3, [r6, #0]
 8005a48:	461c      	mov	r4, r3
 8005a4a:	bb34      	cbnz	r4, 8005a9a <_malloc_r+0x82>
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f7ff ffc2 	bl	80059d8 <sbrk_aligned>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	4604      	mov	r4, r0
 8005a58:	d14d      	bne.n	8005af6 <_malloc_r+0xde>
 8005a5a:	6834      	ldr	r4, [r6, #0]
 8005a5c:	4626      	mov	r6, r4
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	d140      	bne.n	8005ae4 <_malloc_r+0xcc>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	4631      	mov	r1, r6
 8005a66:	4638      	mov	r0, r7
 8005a68:	eb04 0803 	add.w	r8, r4, r3
 8005a6c:	f000 f878 	bl	8005b60 <_sbrk_r>
 8005a70:	4580      	cmp	r8, r0
 8005a72:	d13a      	bne.n	8005aea <_malloc_r+0xd2>
 8005a74:	6821      	ldr	r1, [r4, #0]
 8005a76:	3503      	adds	r5, #3
 8005a78:	1a6d      	subs	r5, r5, r1
 8005a7a:	f025 0503 	bic.w	r5, r5, #3
 8005a7e:	3508      	adds	r5, #8
 8005a80:	2d0c      	cmp	r5, #12
 8005a82:	bf38      	it	cc
 8005a84:	250c      	movcc	r5, #12
 8005a86:	4629      	mov	r1, r5
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f7ff ffa5 	bl	80059d8 <sbrk_aligned>
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d02b      	beq.n	8005aea <_malloc_r+0xd2>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	442b      	add	r3, r5
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	e00e      	b.n	8005ab8 <_malloc_r+0xa0>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	1b52      	subs	r2, r2, r5
 8005a9e:	d41e      	bmi.n	8005ade <_malloc_r+0xc6>
 8005aa0:	2a0b      	cmp	r2, #11
 8005aa2:	d916      	bls.n	8005ad2 <_malloc_r+0xba>
 8005aa4:	1961      	adds	r1, r4, r5
 8005aa6:	42a3      	cmp	r3, r4
 8005aa8:	6025      	str	r5, [r4, #0]
 8005aaa:	bf18      	it	ne
 8005aac:	6059      	strne	r1, [r3, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	bf08      	it	eq
 8005ab2:	6031      	streq	r1, [r6, #0]
 8005ab4:	5162      	str	r2, [r4, r5]
 8005ab6:	604b      	str	r3, [r1, #4]
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f104 060b 	add.w	r6, r4, #11
 8005abe:	f000 f865 	bl	8005b8c <__malloc_unlock>
 8005ac2:	f026 0607 	bic.w	r6, r6, #7
 8005ac6:	1d23      	adds	r3, r4, #4
 8005ac8:	1af2      	subs	r2, r6, r3
 8005aca:	d0b6      	beq.n	8005a3a <_malloc_r+0x22>
 8005acc:	1b9b      	subs	r3, r3, r6
 8005ace:	50a3      	str	r3, [r4, r2]
 8005ad0:	e7b3      	b.n	8005a3a <_malloc_r+0x22>
 8005ad2:	6862      	ldr	r2, [r4, #4]
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	bf0c      	ite	eq
 8005ad8:	6032      	streq	r2, [r6, #0]
 8005ada:	605a      	strne	r2, [r3, #4]
 8005adc:	e7ec      	b.n	8005ab8 <_malloc_r+0xa0>
 8005ade:	4623      	mov	r3, r4
 8005ae0:	6864      	ldr	r4, [r4, #4]
 8005ae2:	e7b2      	b.n	8005a4a <_malloc_r+0x32>
 8005ae4:	4634      	mov	r4, r6
 8005ae6:	6876      	ldr	r6, [r6, #4]
 8005ae8:	e7b9      	b.n	8005a5e <_malloc_r+0x46>
 8005aea:	230c      	movs	r3, #12
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4638      	mov	r0, r7
 8005af0:	f000 f84c 	bl	8005b8c <__malloc_unlock>
 8005af4:	e7a1      	b.n	8005a3a <_malloc_r+0x22>
 8005af6:	6025      	str	r5, [r4, #0]
 8005af8:	e7de      	b.n	8005ab8 <_malloc_r+0xa0>
 8005afa:	bf00      	nop
 8005afc:	20004a90 	.word	0x20004a90

08005b00 <_realloc_r>:
 8005b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b04:	4680      	mov	r8, r0
 8005b06:	4614      	mov	r4, r2
 8005b08:	460e      	mov	r6, r1
 8005b0a:	b921      	cbnz	r1, 8005b16 <_realloc_r+0x16>
 8005b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	4611      	mov	r1, r2
 8005b12:	f7ff bf81 	b.w	8005a18 <_malloc_r>
 8005b16:	b92a      	cbnz	r2, 8005b24 <_realloc_r+0x24>
 8005b18:	f7ff ff12 	bl	8005940 <_free_r>
 8005b1c:	4625      	mov	r5, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b24:	f000 f838 	bl	8005b98 <_malloc_usable_size_r>
 8005b28:	4284      	cmp	r4, r0
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	d802      	bhi.n	8005b34 <_realloc_r+0x34>
 8005b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b32:	d812      	bhi.n	8005b5a <_realloc_r+0x5a>
 8005b34:	4621      	mov	r1, r4
 8005b36:	4640      	mov	r0, r8
 8005b38:	f7ff ff6e 	bl	8005a18 <_malloc_r>
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d0ed      	beq.n	8005b1e <_realloc_r+0x1e>
 8005b42:	42bc      	cmp	r4, r7
 8005b44:	4622      	mov	r2, r4
 8005b46:	4631      	mov	r1, r6
 8005b48:	bf28      	it	cs
 8005b4a:	463a      	movcs	r2, r7
 8005b4c:	f7ff fbb8 	bl	80052c0 <memcpy>
 8005b50:	4631      	mov	r1, r6
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7ff fef4 	bl	8005940 <_free_r>
 8005b58:	e7e1      	b.n	8005b1e <_realloc_r+0x1e>
 8005b5a:	4635      	mov	r5, r6
 8005b5c:	e7df      	b.n	8005b1e <_realloc_r+0x1e>
	...

08005b60 <_sbrk_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d06      	ldr	r5, [pc, #24]	; (8005b7c <_sbrk_r+0x1c>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fb f8a6 	bl	8000cbc <_sbrk>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_sbrk_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_sbrk_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20004a98 	.word	0x20004a98

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f000 b811 	b.w	8005ba8 <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	20004a9c 	.word	0x20004a9c

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f000 b80c 	b.w	8005baa <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	20004a9c 	.word	0x20004a9c

08005b98 <_malloc_usable_size_r>:
 8005b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9c:	1f18      	subs	r0, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfbc      	itt	lt
 8005ba2:	580b      	ldrlt	r3, [r1, r0]
 8005ba4:	18c0      	addlt	r0, r0, r3
 8005ba6:	4770      	bx	lr

08005ba8 <__retarget_lock_acquire_recursive>:
 8005ba8:	4770      	bx	lr

08005baa <__retarget_lock_release_recursive>:
 8005baa:	4770      	bx	lr

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
